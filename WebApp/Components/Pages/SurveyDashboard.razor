@page "/survey-dashboard"
@attribute [Authorize(Policy = "NotGuest")]
@using WebAPI.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Web
@using System.Text.Json
@inject HttpClient httpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<div class="dashboard-footer">
    <span>
        Last updated: @(GetLastUpdatedDate()?.ToString("dd-MM-yyyy HH:mm") ?? "No data")
    </span>
</div>

<div class="dashboard-container">
    <div class="dashboard-header">
        <img src="/images/dk_logo.png" alt="Nilfisk Logo" class="dashboard-logo" />
        <div class="dashboard-title-group">
            <h2 class="dashboard-title">Survey Analytics Dashboard</h2>
            <span class="dashboard-subtitle">Customer Satisfaction & Survey Insights</span>
        </div>
        <div class="dashboard-actions">
            <ExportToolbar Data="@surveyResponses" 
                          FileName="survey-dashboard-data" 
                          Title="Survey Analytics Dashboard Export" />
        </div>
    </div>
    
    @if (isLoading)
    {
        <div class="loading-spinner">
            <div class="spinner"></div>
            <p>Loading survey data...</p>
        </div>
    }
    else if (surveyResponses.Count == 0)
    {
        <div class="no-data">
            <p>No survey responses available yet.</p>
        </div>
    }
    else
    {
        <!-- Main Dashboard Overview -->
        <div class="summary-cards">
            <div class="card clickable" @onclick='() => ScrollToSection("responses")'>
                <div class="card-icon">üìä</div>
                <h3 class="counter" data-target="@surveyResponses.Count">@surveyResponses.Count</h3>
                <p>Total Responses</p>
                <div class="card-arrow">‚Üí</div>
            </div>
            <div class="card clickable" @onclick='() => ScrollToSection("satisfaction")'>
                <div class="card-icon">‚≠ê</div>
                <h3 class="counter satisfaction-score" data-target="@Math.Round(avgSatisfaction, 1)">@Math.Round(avgSatisfaction, 1)</h3>
                <p>Avg Overall Satisfaction</p>
                <div class="satisfaction-bar" style="position: relative;">
                    <div class="satisfaction-fill" style="width: @(avgSatisfaction * 10)%"></div>
                    <div class="goal-line" title="Goal: 9" style="position: absolute; left: 90%; top: 0; bottom: 0; width: 2px; background: #28a745; opacity: 0.7;"></div>
                </div>
            </div>
            <div class="card clickable" @onclick='() => ScrollToSection("clients")'>
                <div class="card-icon">üë•</div>
                <h3 class="counter" data-target="@GetTotalUniqueClients()">@GetTotalUniqueClients()</h3>
                <p>Unique Clients</p>
                <div class="card-arrow">‚Üí</div>
            </div>
        </div>

        <!-- Sector Overview Charts -->
        <div class="charts-section">
            <div class="section-header">
                <h3>üìà Completion By Sector</h3>
            </div>
            
            <div class="chart-container" id="responses">
                <div class="chart-header">
                    <h4>üîç Survey Responses by Sector</h4>
                    <div class="chart-controls">
                        <button class="view-btn @(chartView == "count" ? "active" : "")" @onclick='() => SetChartView("count")'>Count</button>
                        <button class="view-btn @(chartView == "percentage" ? "active" : "")" @onclick='() => SetChartView("percentage")'>%</button>
                        <button class="view-btn @(chartView == "completion" ? "active" : "")" @onclick='() => SetChartView("completion")'>Completion Rate</button>
                    </div>
                </div>
                <div class="interactive-bar-chart">
                    @foreach (var sector in sectorCounts.OrderByDescending(x => x.Value))
                    {
                        var totalCount = sector.Value;
                        var completedCount = GetCompletedCountForSector(sector.Key);
                        var completionRate = totalCount > 0 ? (double)completedCount / totalCount * 100 : 0;
                        
                        var displayValue = chartView switch
                        {
                            "percentage" => $"{((double)sector.Value / surveyResponses.Count * 100):F1}%",
                            "completion" => $"{completionRate.ToString("F0")}% ({completedCount}/{totalCount})",
                            _ => sector.Value.ToString()
                        };
                        
                        var barWidth = chartView switch
                        {
                            "percentage" => (double)sector.Value / surveyResponses.Count * 100,
                            "completion" => completionRate,
                            _ => totalCount > 0 ? Math.Max(((double)totalCount / surveyResponses.Count * 100), 5) : 0
                        };
                        
                        <div class="interactive-bar-item @(hoveredSector == sector.Key ? "hovered" : "")" 
                             @onclick="() => ToggleSectorDetails(sector.Key)"
                             @onmouseover="() => hoveredSector = sector.Key"
                             @onmouseleave="() => hoveredSector = null">
                            <div class="bar-header">
                                <div class="bar-label">
                                    <span class="sector-icon">@GetSectorIcon(sector.Key)</span>
                                    @sector.Key
                                </div>
                                <div class="bar-value-display">@displayValue</div>
                            </div>
                            <div class="bar-wrapper">
                                <div class="interactive-bar" 
                                     style="width: @(barWidth)%; background: linear-gradient(135deg, @GetSectorColor(sector.Key), @GetSectorColorDark(sector.Key)); animation-delay: @(Array.IndexOf(sectorCounts.Keys.ToArray(), sector.Key) * 0.1)s">
                                    <div class="bar-shine"></div>
                                </div>
                                @if (chartView == "completion")
                                {
                                    <div class="completion-progress-bg">
                                        <div class="completion-progress-fill" style="width: @(completionRate)%"></div>
                                    </div>
                                }
                            </div>
                            @if (expandedSectors.Contains(sector.Key))
                            {
                                <div class="sector-dropdown">
                                    <div class="dropdown-stats">
                                        <div class="mini-stat">
                                            <span class="mini-stat-value">@Math.Round(GetSectorAverage(sector.Key, "satisfaction"), 1)</span>
                                            <span class="mini-stat-label">Avg Satisfaction</span>
                                        </div>
                                        <div class="mini-stat">
                                            <span class="mini-stat-value">@completedCount</span>
                                            <span class="mini-stat-label">Completed</span>
                                        </div>
                                        <div class="mini-stat">
                                            <span class="mini-stat-value">@(totalCount - completedCount)</span>
                                            <span class="mini-stat-label">Pending</span>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>

            <!-- Average Satisfaction by Sector -->
            <div class="chart-container" id="satisfaction">
                <div class="chart-header">
                    <h4>‚≠ê Satisfaction Ratings</h4>
                    <div class="filter-controls">
                        <div class="filter-section">
                            <label class="filter-label">Filter by Sector</label>
                            <select @bind="selectedSectorFilter" class="filter-dropdown">
                                <option value="all">All Sectors</option>
                                @foreach (var sector in GetUniqueSectors())
                                {
                                    <option value="@sector">@sector</option>
                                }
                            </select>
                        </div>
                        
                        <div class="filter-section">
                            <label class="filter-label">Filter by Company Size</label>
                            <select @bind="selectedCompanySizeFilter" class="filter-dropdown">
                                <option value="all">All Company Sizes</option>
                                @foreach (var companySize in GetUniqueCompanySizes())
                                {
                                    <option value="@companySize">@companySize</option>
                                }
                            </select>
                        </div>
                        
                        @if (selectedSectorFilter != "all" || selectedCompanySizeFilter != "all")
                        {
                            <div class="filter-section">
                                <button class="clear-filters-btn" @onclick="ClearAllFilters">
                                    üóëÔ∏è Clear Filters
                                </button>
                            </div>
                        }
                        
                        @if (selectedSectorFilter != "all" || selectedCompanySizeFilter != "all")
                        {
                            <div class="active-filters">
                                <span class="filter-indicator">Active Filters:</span>
                                @if (selectedSectorFilter != "all")
                                {
                                    <span class="filter-badge sector">@selectedSectorFilter</span>
                                }
                                @if (selectedCompanySizeFilter != "all")
                                {
                                    <span class="filter-badge company-size">@selectedCompanySizeFilter</span>
                                }
                            </div>
                        }
                    </div>
                </div>
                <div class="satisfaction-grid">
                    @{
                        var filteredSatisfactionData = GetCombinedFilteredSatisfactionData();
                    }
                    
                    @foreach (var item in filteredSatisfactionData.OrderByDescending(x => x.Value))
                    {
                        var percentage = item.Value / 10 * 100;
                        var satisfaction = item.Value;
                        var satisfactionClass = satisfaction >= 8 ? "excellent" : satisfaction >= 6 ? "good" : satisfaction >= 4 ? "average" : "poor";
                        
                        <div class="satisfaction-card @satisfactionClass" @onclick="() => SelectItem(item.Key)">
                            <div class="satisfaction-header">
                                <span class="sector-icon">@GetItemIcon(item.Key)</span>
                                <h5>@item.Key</h5>
                                <div class="satisfaction-score-big">@Math.Round(item.Value, 1)</div>
                            </div>
                            <div class="satisfaction-meter">
                                <div class="meter-track" style="position: relative;">
                                    <div class="goal-line" title="Goal: 9" style="position: absolute; left: 90%; top: 0; bottom: 0; width: 2px; background: #28a745; opacity: 0.7;"></div>
                                </div>
                                <div class="meter-fill" style="width: @(percentage)%; background: @GetItemColor(item.Key);"></div>
                                <div class="meter-labels">
                                    @for (int i = 0; i <= 10; i += 2)
                                    {
                                        <span class="meter-label">@i</span>
                                    }
                                </div>
                            </div>
                            <div class="satisfaction-emotion">@GetSatisfactionEmoji(satisfaction)</div>
                            <div class="satisfaction-details">
                                <small>@GetFilteredResponseCount(item.Key) responses</small>
                            </div>
                        </div>
                    }
                    
                    @if (!filteredSatisfactionData.Any())
                    {
                        <div class="no-data-message">
                            <div class="no-data-icon">üìä</div>
                            <h4>No Data Available</h4>
                            <p>No survey responses found for the selected filters.</p>
                        </div>
                    }
                </div>
            </div>

            <!-- Satisfaction Trends Over Time -->
            <div class="chart-container" id="trends">
                <div class="chart-header">
                    <h4>üìà Satisfaction Trends Over Time</h4>
                    <div class="chart-controls">
                        <button class="view-btn @(trendsView == "monthly" ? "active" : "")" @onclick='() => SetTrendsView("monthly")'>Monthly</button>
                        <button class="view-btn @(trendsView == "quarterly" ? "active" : "")" @onclick='() => SetTrendsView("quarterly")'>Quarterly</button>
                        <button class="view-btn @(trendsView == "yearly" ? "active" : "")" @onclick='() => SetTrendsView("yearly")'>Yearly</button>
                    </div>
                </div>
                
                @if (GetTrendData().Any())
                {
                    <div class="trends-container">
                        <!-- Trend Summary Cards -->
                        <div class="trend-summary-cards">
                            <div class="trend-card">
                                <div class="trend-icon">üìà</div>
                                <div class="trend-value @(GetTrendDirection() == "up" ? "positive" : GetTrendDirection() == "down" ? "negative" : "neutral")">
                                    @GetTrendPercentage()%
                                </div>
                                <div class="trend-label">@GetTrendDirection().ToUpper() trend</div>
                                <div class="trend-period">Last @trendsView</div>
                            </div>
                            
                            <div class="trend-card">
                                <div class="trend-icon">üéØ</div>
                                <div class="trend-value">@GetHighestPeriod().Score.ToString("F1")</div>
                                <div class="trend-label">Highest Score</div>
                                <div class="trend-period">@GetHighestPeriod().Period</div>
                            </div>
                            
                            <div class="trend-card">
                                <div class="trend-icon">‚ö†Ô∏è</div>
                                <div class="trend-value">@GetLowestPeriod().Score.ToString("F1")</div>
                                <div class="trend-label">Lowest Score</div>
                                <div class="trend-period">@GetLowestPeriod().Period</div>
                            </div>
                            
                            <div class="trend-card">
                                <div class="trend-icon">üìä</div>
                                <div class="trend-value">@GetTrendData().Count()</div>
                                <div class="trend-label">Data Points</div>
                                <div class="trend-period">@trendsView periods</div>
                            </div>
                        </div>

                        <!-- Interactive Trend Chart -->
                        <div class="trend-chart-container">
                            <div class="visual-trend-chart">
                                @{
                                    var trendData = GetTrendData().ToList();
                                }
                                
                                @if (trendData.Any())
                                {
                                    <div class="trend-chart-header">
                                        <span class="chart-title">üìà Satisfaction Score Over Time</span>
                                        <span class="chart-range">Scale: 0 - 10</span>
                                    </div>
                                    
                                    <!-- Visual Line Chart -->
                                    <div class="line-chart-container">
                                        <div class="chart-grid">
                                            <!-- Y-axis scale -->
                                            <div class="y-axis">
                                                @for (int i = 10; i >= 0; i -= 2)
                                                {
                                                    <div class="y-label" style="bottom: @(i * 10)%;">@i</div>
                                                }
                                            </div>
                                            
                                            <!-- Chart area -->
                                            <div class="chart-area">
                                                <!-- Grid lines -->
                                                <div class="grid-lines">
                                                    @for (int i = 0; i <= 10; i += 2)
                                                    {
                                                        <div class="grid-line-horizontal" style="bottom: @(i * 10)%;"></div>
                                                    }
                                                </div>
                                                
                                                <!-- Line chart content -->
                                                <div class="line-chart-content">
                                                    @if (trendData.Count > 1)
                                                    {
                                                        <!-- Background area -->
                                                        <div class="trend-area" style="@GetTrendAreaPath(trendData)"></div>
                                                        
                                                        <!-- Main trend line -->
                                                        <div class="trend-line" style="@GetTrendLinePath(trendData)"></div>
                                                    }
                                                    
                                                    <!-- Data points -->
                                                    @foreach (var (point, index) in trendData.Select((p, i) => (p, i)))
                                                    {
                                                        var leftPosition = trendData.Count > 1 ? (index * 100.0 / (trendData.Count - 1)) : 50;
                                                        var bottomPosition = (point.Score / 10.0) * 100;
                                                        var isRecent = index >= Math.Max(0, trendData.Count - 3);
                                                        var pointClass = point.Score >= 8 ? "excellent" : point.Score >= 6 ? "good" : point.Score >= 4 ? "average" : "poor";
                                                        
                                                        <div class="data-point @pointClass @(isRecent ? "recent" : "") @(selectedTrendPoint == index ? "selected" : "")"
                                                             style="left: @(leftPosition)%; bottom: @(bottomPosition)%;"
                                                             @onclick="() => SelectTrendPoint(index)"
                                                             @onmouseover="() => selectedTrendPoint = index"
                                                             @onmouseleave="() => selectedTrendPoint = null">
                                                            
                                                            <div class="point-circle">
                                                                <div class="point-value">@point.Score.ToString("F1")</div>
                                                            </div>
                                                            
                                                            @if (selectedTrendPoint == index)
                                                            {
                                                                <div class="point-tooltip">
                                                                    <div class="tooltip-header">
                                                                        <strong>@point.Score.ToString("F1") / 10</strong>
                                                                        <span class="score-badge @pointClass">@GetScoreCategory(point.Score)</span>
                                                                    </div>
                                                                    <div class="tooltip-period">@point.Period</div>
                                                                    <div class="tooltip-details">
                                                                        <span>üìä @GetPeriodResponseCount(point.Period) responses</span>
                                                                    </div>
                                                                </div>
                                                            }
                                                        </div>
                                                    }
                                                </div>
                                                
                                                <!-- X-axis labels -->
                                                <div class="x-axis">
                                                    @foreach (var (point, index) in trendData.Select((p, i) => (p, i)))
                                                    {
                                                        var leftPosition = trendData.Count > 1 ? (index * 100.0 / (trendData.Count - 1)) : 50;
                                                        var showLabel = trendData.Count <= 8 || index % Math.Max(1, trendData.Count / 6) == 0;
                                                        
                                                        @if (showLabel)
                                                        {
                                                            <div class="x-label" style="left: @(leftPosition)%;">
                                                                @point.ShortPeriod
                                                            </div>
                                                        }
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                        
                                        <!-- Chart Legend -->
                                        <div class="chart-legend">
                                            <div class="legend-item">
                                                <div class="legend-dot excellent"></div>
                                                <span>Excellent (8-10)</span>
                                            </div>
                                            <div class="legend-item">
                                                <div class="legend-dot good"></div>
                                                <span>Good (6-7.9)</span>
                                            </div>
                                            <div class="legend-item">
                                                <div class="legend-dot average"></div>
                                                <span>Average (4-5.9)</span>
                                            </div>
                                            <div class="legend-item">
                                                <div class="legend-dot poor"></div>
                                                <span>Needs Improvement (0-3.9)</span>
                                            </div>
                                            <div class="legend-item recent-legend">
                                                <div class="legend-dot recent"></div>
                                                <span>Recent Data</span>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                            
                            <!-- Trend Insights -->
                            <div class="trend-insights">
                                <div class="insight-item">
                                    <strong>Trend Analysis:</strong>
                                    @if (isLoadingTrendInsights)
                                    {
                                        <span class="loading-text">ü§ñ AI is analyzing trends...</span>
                                    }
                                    else
                                    {
                                        <span>@(aiTrendAnalysis ?? "Loading AI analysis...")</span>
                                    }
                                </div>
                                @if (GetRecurringChallenges().Any())
                                {
                                    <div class="insight-item">
                                        <strong>Recurring Challenges:</strong>
                                        <span>@string.Join(", ", GetRecurringChallenges())</span>
                                    </div>
                                }
                                <div class="insight-item">
                                    <strong>Service Quality:</strong>
                                    @if (isLoadingTrendInsights)
                                    {
                                        <span class="loading-text">ü§ñ AI is analyzing service quality...</span>
                                    }
                                    else
                                    {
                                        <span>@(aiServiceQualityInsight ?? "Loading AI analysis...")</span>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="no-trend-data">
                        <p>üìä No trend data available yet. Complete more surveys to see satisfaction trends over time!</p>
                    </div>
                }
            </div>

            <!-- AI Predictions Section -->
            <div class="chart-container">
                <div class="trend-chart-container">
                    <div class="visual-trend-chart">
                        <div class="trend-chart-header">
                            <span class="chart-title">üîÆ AI Satisfaction Predictions</span>
                            <span class="chart-range">Next 6 Months Forecast</span>
                        </div>
                        
                        @if (isLoadingForecast)
                        {
                            <div class="loading-forecast">
                                <span class="loading-text">ü§ñ AI is generating forecasts...</span>
                            </div>
                        }
                        else if (forecastData != null && forecastData.Any())
                        {
                            <!-- Forecast Line Chart -->
                            <div class="line-chart-container">
                                <div class="chart-grid">
                                    <!-- Y-axis scale -->
                                    <div class="y-axis">
                                        @for (int i = 10; i >= 0; i -= 2)
                                        {
                                            <div class="y-label" style="bottom: @(i * 10)%;">@i</div>
                                        }
                                    </div>
                                    
                                    <!-- Chart area -->
                                    <div class="chart-area">
                                        <!-- Grid lines -->
                                        <div class="grid-lines">
                                            @for (int i = 0; i <= 10; i += 2)
                                            {
                                                <div class="grid-line-horizontal" style="bottom: @(i * 10)%;"></div>
                                            }
                                        </div>
                                        
                                        <!-- Forecast content -->
                                        <div class="line-chart-content">
                                            <!-- Confidence interval area -->
                                            <div class="forecast-confidence-area" style="@GetForecastAreaPath(forecastData)"></div>
                                            
                                            <!-- Forecast line -->
                                            <div class="forecast-line" style="@GetForecastLinePath(forecastData)"></div>
                                            
                                            <!-- Forecast points -->
                                            @foreach (var (point, index) in forecastData.Select((p, i) => (p, i)))
                                            {
                                                var leftPosition = forecastData.Count > 1 ? (index * 100.0 / (forecastData.Count - 1)) : 50;
                                                var bottomPosition = point.PredictedScore * 10;
                                                
                                                <div class="forecast-point" 
                                                     style="left: @(leftPosition.ToString("F1", System.Globalization.CultureInfo.InvariantCulture))%; bottom: @(bottomPosition.ToString("F1", System.Globalization.CultureInfo.InvariantCulture))%;"
                                                     @onmouseover="() => hoveredForecastPoint = index"
                                                     @onmouseout="() => hoveredForecastPoint = -1">
                                                    <div class="point-dot forecast-dot"></div>
                                                    @if (hoveredForecastPoint == index)
                                                    {
                                                        <div class="point-tooltip forecast-tooltip">
                                                            <strong>@point.Period</strong>
                                                            <div>Predicted: @point.PredictedScore.ToString("F1")/10</div>
                                                            <div>Confidence: ¬±@point.ConfidenceInterval.ToString("F1")</div>
                                                        </div>
                                                    }
                                                </div>
                                            }
                                        </div>
                                        
                                        <!-- X-axis labels -->
                                        <div class="x-axis">
                                            @foreach (var (point, index) in forecastData.Select((p, i) => (p, i)))
                                            {
                                                var leftPosition = forecastData.Count > 1 ? (index * 100.0 / (forecastData.Count - 1)) : 50;
                                                <div class="x-label" style="left: @(leftPosition.ToString("F1", System.Globalization.CultureInfo.InvariantCulture))%;">
                                                    @point.Date.ToString("MMM")
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- AI Insights -->
                            <div class="forecast-insights">
                                <div class="insight-item">
                                    <strong>AI Database Analysis:</strong>
                                    @if (isLoadingDatabaseAnalysis)
                                    {
                                        <span class="loading-text">ü§ñ AI is analyzing entire database...</span>
                                    }
                                    else
                                    {
                                        <div class="database-analysis-content">
                                            @if (!string.IsNullOrEmpty(databaseAnalysis))
                                            {
                                                @foreach (var paragraph in databaseAnalysis.Split('\n', StringSplitOptions.RemoveEmptyEntries))
                                                {
                                                    <p>@paragraph</p>
                                                }
                                            }
                                            else
                                            {
                                                <span>Loading comprehensive AI analysis...</span>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="no-forecast-data">
                                <p>üîÆ AI forecast will be generated once sufficient historical data is available!</p>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Question Performance Chart -->
            <div class="chart-container">
                <h4>üìä Question Performance</h4>
                <div class="question-performance">
                    <div class="question-bars">
                        @for (int q = 1; q <= 9; q++)
                        {
                            var avg = GetQuestionAverage(q);
                            var height = avg / 10 * 100;
                            var questionClass = avg >= 8 ? "excellent" : avg >= 6 ? "good" : avg >= 4 ? "average" : "poor";

                            <div class="question-bar-item @(selectedQuestion == q ? "selected" : "")"
                                 @onclick="() => ToggleQuestion(q)">
                                <div class="question-bar @questionClass" style="height: @(height)%">
                                    <div class="bar-value">@Math.Round(avg, 1)</div>
                                </div>
                                <div class="question-label">Q@(q)</div>
                                <div class="question-tooltip">
                                    @GetQuestionText(q)
                                </div>
                                @if (selectedQuestion == q)
                                {
                                    <div class="question-tooltip" style="top:-80px;">
                                        <strong>@GetQuestionText(q)</strong>
                                        <div class="tooltip-stats">
                                            <span>Average: @Math.Round(avg, 1)/10</span>
                                            <span>@GetQuestionCategory(avg)</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Client Analytics Section -->
            <div class="chart-container" id="clients">
                <div class="chart-header">
                    <h4>üë• Client Analytics</h4>
                    <div class="chart-controls">
                        <button class="view-btn @(clientView == "yearly" ? "active" : "")" @onclick='() => SetClientView("yearly")'>Yearly</button>
                        <button class="view-btn @(clientView == "monthly" ? "active" : "")" @onclick='() => SetClientView("monthly")'>Monthly</button>
                    </div>
                </div>
                
                @if (GetClientAnalytics().Any())
                {
                    <div class="clients-overview">
                        <!-- Client Summary Cards -->
                        <div class="client-summary-cards">
                            @{
                                var totalClients = GetTotalUniqueClients();
                                var newClients = GetNewClientsForPeriod();
                                var repeatedClients = GetRepeatedClientsForPeriod();
                                var retentionRate = totalClients > 0 ? (double)repeatedClients / totalClients * 100 : 0;
                            }
                            
                            <div class="client-card total-clients">
                                <div class="card-icon">üë•</div>
                                <div class="client-value">@totalClients</div>
                                <div class="client-label">Total Unique Clients</div>
                                <div class="client-sublabel">All time</div>
                            </div>
                            
                            <div class="client-card new-clients">
                                <div class="card-icon">üÜï</div>
                                <div class="client-value">@newClients</div>
                                <div class="client-label">New Clients</div>
                                <div class="client-sublabel">This @clientView.TrimEnd('l', 'y')</div>
                            </div>
                            
                            <div class="client-card repeated-clients">
                                <div class="card-icon">üîÑ</div>
                                <div class="client-value">@repeatedClients</div>
                                <div class="client-label">Repeated Clients</div>
                                <div class="client-sublabel">This @clientView.TrimEnd('l', 'y')</div>
                            </div>
                            
                            <div class="client-card retention-rate">
                                <div class="card-icon">üìà</div>
                                <div class="client-value">@(retentionRate.ToString("F1"))%</div>
                                <div class="client-label">Client Retention Rate</div>
                                <div class="client-sublabel">@clientView basis</div>
                            </div>
                        </div>

                        <!-- Client Details Table -->
                        <div class="client-details-section">
                            <h5>üìã Client Details</h5>
                            <div class="client-filters">
                                <select @bind="selectedClientFilter" class="filter-dropdown">
                                    <option value="all">All Clients</option>
                                    <option value="new">New Clients Only</option>
                                    <option value="repeated">Repeated Clients Only</option>
                                </select>
                            </div>
                            
                            <div class="client-table-container">
                                <table class="client-table">
                                    <thead>
                                        <tr>
                                            <th>Client Name</th>
                                            <th>Type</th>
                                            <th>First Survey</th>
                                            <th>Latest Survey</th>
                                            <th>Total Surveys</th>
                                            <th>Avg Satisfaction</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var client in GetFilteredClientDetails())
                                        {
                                            <tr class="client-row">
                                                <td class="client-name">
                                                    <span class="client-icon">üè¢</span>
                                                    @client.ClientName
                                                </td>
                                                <td>
                                                    <span class="client-type-badge @(client.IsRepeatedClient ? "repeated" : "new")">
                                                        @(client.IsRepeatedClient ? "üîÑ Repeated" : "üÜï New")
                                                    </span>
                                                </td>
                                                <td>@client.FirstSurveyDate?.ToString("dd/MM/yyyy")</td>
                                                <td>@client.LatestSurveyDate?.ToString("dd/MM/yyyy")</td>
                                                <td class="survey-count">@client.TotalSurveys</td>
                                                <td>
                                                    <span class="satisfaction-badge @GetClientSatisfactionClass(client.AverageSatisfaction)">
                                                        @client.AverageSatisfaction.ToString("F1")
                                                    </span>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="no-client-data">
                        <p>üìä No client data available yet. Complete more surveys to see client analytics!</p>
                    </div>
                }
            </div>

            <!-- AI Chat -->
            <div class="chart-container ai-chat-section" id="ai-chat">
                
                <style>
                    .ai-chat-section {
                        background: linear-gradient(135deg, #f8fafc 0%, #ffffff 100%);
                        border: 1px solid #e2e8f0;
                        position: relative;
                        overflow: hidden;
                    }

                    .ai-chat-section::before {
                        content: '';
                        position: absolute;
                        top: 0;
                        left: 0;
                        right: 0;
                        height: 4px;
                        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
                    }

                    .chat-header-modern {
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                        padding: 20px 24px;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        color: white;
                        margin: -24px -24px 24px -24px;
                        border-radius: 16px 16px 0 0;
                    }

                    .chat-title-area {
                        display: flex;
                        align-items: center;
                        gap: 16px;
                    }

                    .ai-avatar {
                        position: relative;
                    }

                    .avatar-circle {
                        width: 50px;
                        height: 50px;
                        background: rgba(255, 255, 255, 0.2);
                        border-radius: 50%;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        backdrop-filter: blur(10px);
                        border: 2px solid rgba(255, 255, 255, 0.3);
                    }

                    .ai-icon {
                        font-size: 24px;
                    }

                    .status-indicator {
                        position: absolute;
                        bottom: 2px;
                        right: 2px;
                        width: 12px;
                        height: 12px;
                        border-radius: 50%;
                        border: 2px solid white;
                    }

                    .status-indicator.online {
                        background: #22c55e;
                        animation: pulse 2s infinite;
                    }

                    @@keyframes pulse {
                        0%, 100% { opacity: 1; }
                        50% { opacity: 0.5; }
                    }

                    .chat-title-text h4 {
                        margin: 0;
                        font-size: 1.2rem;
                        font-weight: 600;
                    }

                    .status-text {
                        margin: 0;
                        font-size: 0.9rem;
                        opacity: 0.9;
                    }

                    .chat-actions {
                        display: flex;
                        gap: 12px;
                    }

                    .clear-chat-btn {
                        background: rgba(255, 255, 255, 0.2);
                        color: white;
                        border: none;
                        border-radius: 8px;
                        padding: 8px 12px;
                        cursor: pointer;
                        transition: all 0.2s ease;
                        backdrop-filter: blur(10px);
                    }

                    .clear-chat-btn:hover {
                        background: rgba(255, 255, 255, 0.3);
                        transform: translateY(-1px);
                    }

                    .enhanced-chat-container {
                        min-height: 500px;
                        display: flex;
                        flex-direction: column;
                    }

                    .welcome-section {
                        display: flex;
                        flex-direction: column;
                        align-items: center;
                        padding: 40px 20px;
                        text-align: center;
                        flex: 1;
                        justify-content: center;
                    }

                    .welcome-avatar {
                        margin-bottom: 24px;
                    }

                    .welcome-circle {
                        width: 80px;
                        height: 80px;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        border-radius: 50%;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        margin: 0 auto;
                        box-shadow: 0 8px 32px rgba(102, 126, 234, 0.3);
                    }

                    .welcome-ai-icon {
                        font-size: 40px;
                        color: white;
                    }

                    .welcome-content h5 {
                        margin: 0 0 16px 0;
                        color: #1e293b;
                        font-size: 1.4rem;
                        font-weight: 600;
                    }

                    .welcome-content p {
                        margin: 0 0 32px 0;
                        color: #64748b;
                        font-size: 1rem;
                        line-height: 1.6;
                        max-width: 500px;
                    }

                    .suggestion-chips {
                        display: grid;
                        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                        gap: 12px;
                        width: 100%;
                        max-width: 800px;
                    }

                    .suggestion-chip {
                        background: white;
                        border: 2px solid #e2e8f0;
                        border-radius: 12px;
                        padding: 16px 20px;
                        cursor: pointer;
                        transition: all 0.3s ease;
                        display: flex;
                        align-items: center;
                        gap: 12px;
                        text-align: left;
                        font-size: 0.95rem;
                        font-weight: 500;
                        color: #475569;
                        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
                    }

                    .suggestion-chip:hover {
                        border-color: #667eea;
                        background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
                        transform: translateY(-2px);
                        box-shadow: 0 4px 16px rgba(102, 126, 234, 0.15);
                    }

                    .chip-icon {
                        font-size: 18px;
                        flex-shrink: 0;
                    }

                    .chat-messages-enhanced {
                        flex: 1;
                        padding: 20px 0;
                        overflow-y: auto;
                        scroll-behavior: smooth;
                        max-height: 400px;
                    }

                    .message-wrapper {
                        display: flex;
                        margin-bottom: 20px;
                        animation: slideInMessage 0.3s ease-out;
                    }

                    @@keyframes slideInMessage {
                        from {
                            opacity: 0;
                            transform: translateY(10px);
                        }
                        to {
                            opacity: 1;
                            transform: translateY(0);
                        }
                    }

                    .message-wrapper.user-message {
                        justify-content: flex-end;
                    }

                    .message-wrapper.ai-message {
                        justify-content: flex-start;
                    }

                    .message-avatar {
                        margin: 0 12px;
                        flex-shrink: 0;
                    }

                    .avatar-small {
                        width: 36px;
                        height: 36px;
                        border-radius: 50%;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        font-size: 16px;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        color: white;
                        box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
                    }

                    .avatar-small.user {
                        background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
                    }

                    .avatar-small.thinking {
                        animation: thinking 2s ease-in-out infinite;
                    }

                    @@keyframes thinking {
                        0%, 100% { transform: scale(1); }
                        50% { transform: scale(1.1); }
                    }

                    .message-bubble {
                        max-width: 70%;
                        border-radius: 18px;
                        padding: 0;
                        position: relative;
                        word-wrap: break-word;
                    }

                    .user-bubble {
                        background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
                        color: white;
                        border-bottom-right-radius: 4px;
                    }

                    .ai-bubble {
                        background: white;
                        color: #1e293b;
                        border: 1px solid #e2e8f0;
                        border-bottom-left-radius: 4px;
                        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
                    }

                    .typing-bubble {
                        background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
                    }

                    .message-content-enhanced {
                        padding: 16px 20px;
                    }

                    .message-text-enhanced {
                        line-height: 1.5;
                        margin-bottom: 8px;
                        font-size: 0.95rem;
                    }

                    .message-metadata {
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                        margin-top: 8px;
                    }

                    .message-time-enhanced {
                        font-size: 0.75rem;
                        opacity: 0.7;
                    }

                    .message-actions {
                        display: flex;
                        gap: 8px;
                        opacity: 0;
                        transition: opacity 0.2s ease;
                    }

                    .message-wrapper:hover .message-actions {
                        opacity: 1;
                    }

                    .action-btn {
                        background: none;
                        border: none;
                        padding: 4px 8px;
                        border-radius: 6px;
                        cursor: pointer;
                        font-size: 14px;
                        transition: all 0.2s ease;
                        color: #64748b;
                    }

                    .action-btn:hover {
                        background: rgba(100, 116, 139, 0.1);
                        transform: scale(1.1);
                    }

                    .typing-indicator-enhanced {
                        display: flex;
                        align-items: center;
                        gap: 12px;
                        padding: 16px 20px;
                    }

                    .typing-dots {
                        display: flex;
                        gap: 4px;
                    }

                    .typing-dots span {
                        width: 8px;
                        height: 8px;
                        border-radius: 50%;
                        background: #667eea;
                        animation: typingDot 1.4s infinite ease-in-out;
                    }

                    .typing-dots span:nth-child(1) { animation-delay: -0.32s; }
                    .typing-dots span:nth-child(2) { animation-delay: -0.16s; }

                    @@keyframes typingDot {
                        0%, 80%, 100% {
                            transform: scale(0.8);
                            opacity: 0.5;
                        }
                        40% {
                            transform: scale(1);
                            opacity: 1;
                        }
                    }

                    .typing-text {
                        color: #64748b;
                        font-size: 0.85rem;
                        font-style: italic;
                    }

                    .chat-input-area {
                        border-top: 1px solid #e2e8f0;
                        background: #f8fafc;
                        padding: 20px;
                        margin: 0 -24px -24px -24px;
                        border-radius: 0 0 16px 16px;
                    }

                    .input-container-enhanced {
                        max-width: 100%;
                    }

                    .input-wrapper {
                        display: flex;
                        align-items: flex-end;
                        gap: 12px;
                        background: white;
                        border: 2px solid #e2e8f0;
                        border-radius: 24px;
                        padding: 8px 8px 8px 20px;
                        transition: all 0.2s ease;
                        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
                    }

                    .input-wrapper:focus-within {
                        border-color: #667eea;
                        box-shadow: 0 4px 16px rgba(102, 126, 234, 0.15);
                    }

                    .chat-input-enhanced {
                        flex: 1;
                        border: none;
                        outline: none;
                        padding: 12px 0;
                        font-size: 0.95rem;
                        line-height: 1.4;
                        background: transparent;
                        resize: none;
                        min-height: 20px;
                        max-height: 120px;
                        overflow-y: auto;
                        font-family: inherit;
                    }

                    .chat-input-enhanced::placeholder {
                        color: #94a3b8;
                    }

                    .input-actions {
                        display: flex;
                        align-items: center;
                        gap: 8px;
                    }

                    .action-button {
                        background: none;
                        border: none;
                        padding: 8px;
                        border-radius: 50%;
                        cursor: pointer;
                        font-size: 16px;
                        transition: all 0.2s ease;
                        color: #64748b;
                    }

                    .action-button:hover:not(:disabled) {
                        background: #f1f5f9;
                        transform: scale(1.1);
                    }

                    .action-button:disabled {
                        opacity: 0.5;
                        cursor: not-allowed;
                    }

                    .send-button {
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        color: white;
                        border: none;
                        border-radius: 50%;
                        width: 44px;
                        height: 44px;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        cursor: pointer;
                        transition: all 0.3s ease;
                        box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
                    }

                    .send-button:hover:not(:disabled) {
                        transform: scale(1.05);
                        box-shadow: 0 4px 16px rgba(102, 126, 234, 0.4);
                    }

                    .send-button:disabled,
                    .send-button.disabled {
                        opacity: 0.5;
                        cursor: not-allowed;
                        transform: none;
                        box-shadow: 0 2px 8px rgba(102, 126, 234, 0.2);
                    }

                    .send-icon {
                        font-size: 18px;
                    }

                    .spinner-small {
                        width: 16px;
                        height: 16px;
                        border: 2px solid rgba(255, 255, 255, 0.3);
                        border-top: 2px solid white;
                        border-radius: 50%;
                        animation: spin 1s linear infinite;
                    }

                    @@keyframes spin {
                        0% { transform: rotate(0deg); }
                        100% { transform: rotate(360deg); }
                    }

                    .input-footer {
                        display: flex;
                        justify-content: flex-end;
                        margin-top: 8px;
                    }

                    .char-count {
                        font-size: 0.75rem;
                        color: #94a3b8;
                    }

                    @@media (max-width: 768px) {
                        .chat-header-modern {
                            padding: 16px 20px;
                        }
                        
                        .chat-title-text h4 {
                            font-size: 1.1rem;
                        }
                        
                        .avatar-circle {
                            width: 40px;
                            height: 40px;
                        }
                        
                        .ai-icon {
                            font-size: 20px;
                        }
                        
                        .suggestion-chips {
                            grid-template-columns: 1fr;
                        }
                        
                        .message-bubble {
                            max-width: 85%;
                        }
                        
                        .chat-input-area {
                            padding: 16px;
                        }
                        
                        .welcome-content p {
                            font-size: 0.9rem;
                        }
                    }
                </style>
                <div class="chat-header-modern">
                    <div class="chat-title-area">
                        <div class="ai-avatar">
                            <div class="avatar-circle">
                                <span class="ai-icon">ü§ñ</span>
                                <div class="status-indicator online"></div>
                            </div>
                        </div>
                        <div class="chat-title-text">
                            <h4>AI Assistant</h4>
                            <p class="status-text">Ready to analyze your survey data</p>
                        </div>
                    </div>
                    <div class="chat-actions">
                        <button class="clear-chat-btn" @onclick="ClearChatHistory" title="Clear chat history">
                            <span class="icon">üóëÔ∏è</span>
                        </button>
                    </div>
                </div>
                
                <div class="enhanced-chat-container">
                    <!-- Welcome Message when no chat history -->
                    @if (!chatHistory.Any() && !isProcessingChat)
                    {
                        <div class="welcome-section">
                            <div class="welcome-avatar">
                                <div class="welcome-circle">
                                    <span class="welcome-ai-icon">ü§ñ</span>
                                </div>
                            </div>
                            <div class="welcome-content">
                                <h5>Hello! I'm your AI Survey Assistant</h5>
                                <p>I can help you analyze your survey data and provide insights. Here are some things you can ask me:</p>
                                <div class="suggestion-chips">
                                    <button class="suggestion-chip" @onclick='() => SendSuggestionMessage("Which sector has the lowest satisfaction?")'>
                                        <span class="chip-icon">üìä</span>
                                        Sector performance
                                    </button>
                                    <button class="suggestion-chip" @onclick='() => SendSuggestionMessage("What are the main issues in my survey data?")'>
                                        <span class="chip-icon">‚ö†Ô∏è</span>
                                        Main issues
                                    </button>
                                    <button class="suggestion-chip" @onclick='() => SendSuggestionMessage("Give me recommendations to improve satisfaction")'>
                                        <span class="chip-icon">üí°</span>
                                        Recommendations
                                    </button>
                                    <button class="suggestion-chip" @onclick='() => SendSuggestionMessage("What trends do you see in my data?")'>
                                        <span class="chip-icon">üìà</span>
                                        Trends analysis
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                    
                    <!-- Chat Messages -->
                    <div class="chat-messages-enhanced" id="chatMessages">
                        @foreach (var message in chatHistory)
                        {
                            <div class="message-wrapper @(message.IsUser ? "user-message" : "ai-message")">
                                @if (!message.IsUser)
                                {
                                    <div class="message-avatar">
                                        <div class="avatar-small">
                                            <span>ü§ñ</span>
                                        </div>
                                    </div>
                                }
                                <div class="message-bubble @(message.IsUser ? "user-bubble" : "ai-bubble")">
                                    <div class="message-content-enhanced">
                                        <div class="message-text-enhanced">@message.Text</div>
                                        <div class="message-metadata">
                                            <span class="message-time-enhanced">@message.Timestamp.ToString("HH:mm")</span>
                                            @if (!message.IsUser)
                                            {
                                                <div class="message-actions">
                                                    <button class="action-btn copy-btn" @onclick="() => CopyMessageToClipboard(message.Text)" title="Copy response">
                                                        <span>üìã</span>
                                                    </button>
                                                    <button class="action-btn thumbs-btn" title="Helpful response">
                                                        <span>üëç</span>
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                                @if (message.IsUser)
                                {
                                    <div class="message-avatar user-avatar">
                                        <div class="avatar-small user">
                                            <span>üë§</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        
                        @if (isProcessingChat)
                        {
                            <div class="message-wrapper ai-message">
                                <div class="message-avatar">
                                    <div class="avatar-small thinking">
                                        <span>ü§ñ</span>
                                    </div>
                                </div>
                                <div class="message-bubble ai-bubble typing-bubble">
                                    <div class="typing-indicator-enhanced">
                                        <div class="typing-dots">
                                            <span></span>
                                            <span></span>
                                            <span></span>
                                        </div>
                                        <span class="typing-text">AI is thinking...</span>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    
                    <!-- Enhanced Input Area -->
                    <div class="chat-input-area">
                        <div class="input-container-enhanced">
                            <div class="input-wrapper">
                                <textarea @bind="chatInput" 
                                         @onkeydown="HandleChatKeyDown"
                                         @oninput="HandleInputChange"
                                         placeholder="Ask me anything about your survey data..." 
                                         class="chat-input-enhanced" 
                                         disabled="@isProcessingChat"
                                         rows="1"></textarea>
                                <div class="input-actions">
                                    <button class="action-button emoji-btn" title="Add emoji" disabled="@isProcessingChat">
                                        <span>üòä</span>
                                    </button>
                                    <button class="send-button @(string.IsNullOrWhiteSpace(chatInput) ? "disabled" : "")" 
                                            @onclick="SendChatMessage" 
                                            disabled="@(isProcessingChat || string.IsNullOrWhiteSpace(chatInput))"
                                            title="Send message">
                                        @if (isProcessingChat)
                                        {
                                            <div class="spinner-small"></div>
                                        }
                                        else
                                        {
                                            <span class="send-icon">üì§</span>
                                        }
                                    </button>
                                </div>
                            </div>
                            @if (!string.IsNullOrWhiteSpace(chatInput))
                            {
                                <div class="input-footer">
                                    <span class="char-count">@chatInput.Length characters</span>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Hierarchical Navigation Section -->
            <div class="sector-details" id="sectors">
                <div class="section-header">
                    <h3>
                        @if (currentNavigationLevel == "sectors")
                        {
                            <span>üè¢ Select Sector for Detailed Analysis</span>
                        }
                        else if (currentNavigationLevel == "customers")
                        {
                            <span>üè¨ Customers in @selectedSector Sector</span>
                        }
                        else if (currentNavigationLevel == "projects")
                        {
                            <span>üìã Projects for @selectedCustomer</span>
                        }
                        else if (currentNavigationLevel == "analysis")
                        {
                            <span>üìä Detailed Analysis: @selectedProject</span>
                        }
                    </h3>
                    
                    @if (currentNavigationLevel != "sectors")
                    {
                        <button class="toggle-btn" @onclick="NavigateBack">‚Üê Back</button>
                    }
                </div>

                @if (currentNavigationLevel == "sectors")
                {
                    <!-- Sector Selection - Show all sectors for all roles in main overview -->
                    <div class="navigation-grid">
                        @foreach (var sectorKvp in sectorCounts)
                        {
                            var sector = sectorKvp.Key;
                            var count = sectorKvp.Value;
                            var sectorResponses = surveyResponses.Where(r => r.Sector == sector).ToList();
                            var avgSat = sectorResponses.Count > 0 ? Math.Round(sectorResponses.Average(r => r.Question1), 1) : 0;
                            var completedCount = sectorResponses.Count(r => r.DateCompleted.HasValue);
                            var completionRate = count > 0 ? (double)completedCount / count * 100 : 0;
                            
                            <div class="navigation-card sector-card" @onclick="() => NavigateToCustomers(sector)">
                                <div class="card-icon">@GetSectorIcon(sector)</div>
                                <h4>@sector</h4>
                                <div class="card-stats">
                                    <div class="stat-item">
                                        <span class="stat-number">@count</span>
                                        <span class="stat-label">Total Surveys</span>
                                    </div>
                                    <div class="stat-item">
                                        <span class="stat-number">@avgSat</span>
                                        <span class="stat-label">Avg. Score</span>
                                    </div>
                                </div>
                                <div class="completion-stats">
                                    <div class="completion-bar">
                                        <div class="completion-fill" style="width: @(completionRate)%"></div>
                                    </div>
                                    <span class="completion-text">@completedCount/@count completed (@(completionRate.ToString("F0"))%)</span>
                                </div>
                                <div class="card-arrow">‚Üí</div>
                            </div>
                        }
                    </div>
                }
                else if (currentNavigationLevel == "customers")
                {
                    <!-- Customer Selection - Now role-filtered for detailed analysis -->
                    <div class="navigation-grid">
                        @foreach (var customer in GetCustomersForSector(selectedSector!))
                        {
                            var customerResponses = GetRoleBasedResponses().Where(r => r.Sector == selectedSector && r.CustomerName == customer).ToList();
                            
                            @if (customerResponses.Any()) // Only show if user has access to this data
                            {
                                var avgSat = customerResponses.Count > 0 ? Math.Round(customerResponses.Average(r => r.Question1), 1) : 0;
                                var projectCount = customerResponses.Select(r => r.ProjectName).Distinct().Count();
                                
                                <div class="navigation-card customer-card" @onclick="() => NavigateToProjects(customer)">
                                    <div class="card-icon">üè¨</div>
                                    <h4>@customer</h4>
                                    <div class="card-stats">
                                        <div class="stat-item">
                                            <span class="stat-number">@projectCount</span>
                                            <span class="stat-label">Projects</span>
                                        </div>
                                        <div class="stat-item">
                                            <span class="stat-number">@avgSat</span>
                                            <span class="stat-label">Avg. Score</span>
                                        </div>
                                    </div>
                                    <div class="card-arrow">‚Üí</div>
                                </div>
                            }
                        }
                    </div>
                }
                else if (currentNavigationLevel == "projects")
                {
                    <!-- Project Selection -->
                    <div class="navigation-grid">
                        @foreach (var project in GetProjectsForCustomer(selectedSector!, selectedCustomer!))
                        {
                            var projectResponses = GetProjectResponses(selectedSector!, selectedCustomer!, project);
                            var avgSat = projectResponses.Count > 0 ? Math.Round(projectResponses.Average(r => r.Question1), 1) : 0;
                            var duration = projectResponses.FirstOrDefault()?.ProjectDuration ?? "N/A";
                            
                            <div class="navigation-card project-card" @onclick="() => NavigateToAnalysis(project)">
                                <div class="card-icon">üìã</div>
                                <h4>@project</h4>
                                <div class="card-stats">
                                    <div class="stat-item">
                                        <span class="stat-number">@projectResponses.Count</span>
                                        <span class="stat-label">Responses</span>
                                    </div>
                                    <div class="stat-item">
                                        <span class="stat-number">@avgSat</span>
                                        <span class="stat-label">Score</span>
                                    </div>
                                </div>
                                <div class="card-arrow">‚Üí</div>
                            </div>
                        }
                    </div>
                }
                else if (currentNavigationLevel == "analysis")
                {
                    <!-- Detailed Analysis -->
                    var analysisResponses = GetProjectResponses(selectedSector!, selectedCustomer!, selectedProject!);
                    
                    <div class="detailed-analysis-container">
                        <div class="analysis-header">
                            <div class="project-info">
                                <h4>@selectedProject</h4>
                                <p><strong>Customer:</strong> @selectedCustomer</p>
                                <p><strong>Sector:</strong> @selectedSector</p>
                                <p><strong>Total Responses:</strong> @analysisResponses.Count</p>
                                @if (analysisResponses.Any())
                                {
                                    <p><strong>Response Period:</strong> 
                                       @analysisResponses.Min(r => r.DateCompleted?.ToString("dd/MM/yyyy") ?? "N/A") - 
                                       @analysisResponses.Max(r => r.DateCompleted?.ToString("dd/MM/yyyy") ?? "N/A")
                                    </p>
                                }
                            </div>
                        </div>

                        <!-- Question Breakdown for this specific project -->
                        <div class="analysis-charts">
                            <div class="chart-container">
                                <h5>üìä Question Breakdown</h5>
                                <div class="question-analysis-grid">
                                    @for (int q = 1; q <= 9; q++)
                                    {
                                        var scores = analysisResponses.Select(r => GetQuestionScore(r, q)).Where(s => s > 0);
                                        var avg = scores.Any() ? Math.Round(scores.Average(), 1) : 0;
                                        var count = scores.Count();
                                        var questionClass = avg >= 8 ? "excellent" : avg >= 6 ? "good" : avg >= 4 ? "average" : "poor";
                                        
                                        <div class="question-analysis-item">
                                            <div class="question-header">
                                                <span class="question-number">Q@(q)</span>
                                                <span class="question-score @questionClass">@avg</span>
                                            </div>
                                            <div class="question-text">@GetQuestionText(q)</div>
                                            <div class="question-bar-container">
                                                <div class="question-bar-bg"></div>
                                                <div class="question-bar-fill @questionClass" style="width: @(avg * 10)%"></div>
                                            </div>
                                            <div class="question-stats">
                                                <span>@count responses</span>
                                                <span>@GetQuestionCategory(avg)</span>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                            
                            <!-- Individual Response Details -->
                            <div class="chart-container">
                                <h5>üìã Individual Survey Responses</h5>
                                <div class="responses-table">
                                    <table class="table table-striped">
                                        <thead>
                                            <tr>
                                                <th>Survey ID</th>
                                                <th>Date Sent</th>
                                                <th>Date Completed</th>
                                                <th>Project Duration</th>
                                                <th>Overall Score</th>
                                                <th>Status</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var response in analysisResponses.OrderByDescending(r => r.DateCompleted))
                                            {
                                                <tr>
                                                    <td><code>@response.SurveyId.Substring(0, 8)...</code></td>
                                                    <td>@(response.DateSent?.ToString("dd/MM/yyyy HH:mm") ?? "N/A")</td>
                                                    <td>@(response.DateCompleted?.ToString("dd/MM/yyyy HH:mm") ?? "N/A")</td>
                                                    <td>@(response.ProjectDuration ?? "N/A")</td>
                                                    <td>
                                                        <span class="badge @(response.Question1 >= 8 ? "bg-success" : response.Question1 >= 6 ? "bg-info" : response.Question1 >= 4 ? "bg-warning" : "bg-danger")">
                                                            @response.Question1/10
                                                        </span>
                                                    </td>
                                                    <td>
                                                        @if (response.DateCompleted.HasValue)
                                                        {
                                                            <span class="badge bg-success">‚úì Completed</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-warning">‚è≥ Pending</span>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

<style>
    .dashboard-container {
        max-width: 1400px;
        margin: 20px auto;
        padding: 20px;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 20px;
        box-shadow: 0 10px 40px rgba(0,0,0,0.1);
        position: relative;
        overflow: hidden;
    }

    .dashboard-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #007bff, #28a745, #ffc107, #dc3545);
        z-index: 1;
    }

    .dashboard-container h2 {
        text-align: center;
        color: #0056b3;
        font-weight: 700;
        margin-bottom: 30px;
        letter-spacing: 1px;
        font-size: 2.5rem;
        text-shadow: 0 2px 4px rgba(0,0,0,0.1);
        background: linear-gradient(135deg, #007bff, #0056b3);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .dashboard-header {
        display: flex;
        align-items: center;
        gap: 24px;
        margin-bottom: 32px;
        padding: 0 0 16px 0;
        border-bottom: 2px solid #e9ecef;
        background: none;
    }
    .dashboard-logo {
        width: 60px;
        height: 60px;
        border-radius: 12px;
        object-fit: contain;
        box-shadow: 0 2px 12px rgba(0,0,0,0.07);
        background: #fff;
    }
    .dashboard-title-group {
        display: flex;
        flex-direction: column;
        gap: 4px;
    }
    .dashboard-title {
        font-size: 2.2rem;
        font-weight: 800;
        color: #212529;
        margin: 0;
        letter-spacing: 1px;
    }
    .dashboard-subtitle {
        font-size: 1.1rem;
        color: #007bff;
        font-weight: 500;
        opacity: 0.8;
        margin-left: 2px;
    }

    .dashboard-footer {
        text-align: right;
        font-size: 0.95rem;
        color: #888;
        margin-top: 24px;
        opacity: 0.7;
    }

    .summary-cards {
        display: flex;
        gap: 32px;
        margin-bottom: 40px;
        justify-content: center;
    }
    .card {
        background: linear-gradient(135deg, #f8f9fa 80%, #e9ecef 100%);
        padding: 32px 24px;
        border-radius: 18px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.10);
        text-align: center;
        border-left: 6px solid #007bff;
        min-width: 220px;
        transition: box-shadow 0.3s, transform 0.3s;
        position: relative;
    }

    .card, .chart-container, .navigation-card, .satisfaction-card {
        transition: box-shadow 0.3s, transform 0.3s;
    }
    .card.clickable:hover, .chart-container:hover, .navigation-card:hover, .satisfaction-card:hover {
        box-shadow: 0 16px 48px rgba(0,0,0,0.18);
        transform: translateY(-6px) scale(1.03);
    }

    .card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, transparent 0%, rgba(0,123,255,0.02) 100%);
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .card.clickable {
        cursor: pointer;
    }

    .card.clickable:hover {
        box-shadow: 0 16px 48px rgba(0,0,0,0.18);
        border-left-color: #28a745;
        transform: translateY(-6px) scale(1.03);
    }

    .card.clickable:hover::before {
        opacity: 1;
    }

    .card-icon {
        font-size: 2.7rem;
        margin-bottom: 14px;
        color: #007bff;
    }

    .card h3 {
        font-size: 3rem;
        color: #007bff;
        margin: 0 0 8px 0;
        font-weight: 700;
        transition: all 0.3s ease;
    }

    .card.clickable:hover h3 {
        color: #28a745;
        transform: scale(1.1);
    }

    .card p {
        color: #666;
        margin: 0 0 16px 0;
        font-size: 1rem;
        font-weight: 500;
    }

    .card-arrow {
        font-size: 1.7rem;
        color: #28a745;
        opacity: 0.7;
    }

    .card.clickable:hover .card-arrow {
        opacity: 1;
        transform: translateX(8px);
        color: #28a745;
    }

    .satisfaction-bar {
        height: 8px;
        background: #e9ecef;
        border-radius: 4px;
        margin-top: 12px;
        overflow: hidden;
        position: relative;
    }

    .satisfaction-fill {
        height: 100%;
        background: linear-gradient(90deg, #dc3545 0%, #ffc107 50%, #28a745 100%);
        border-radius: 4px;
        transition: width 1s ease;
    }

    .section-header {
        display: flex;
        align-items: center;
        gap: 18px;
        margin-bottom: 24px;
        border-bottom: 1px solid #e9ecef;
        padding-bottom: 8px;
    }
    .section-header h3 {
        font-size: 1.5rem;
        font-weight: 700;
        color: #212529;
        margin: 0;
    }

    .filter-buttons, .chart-controls, .view-toggles, .performance-controls {
        display: flex;
        gap: 8px;
        flex-wrap: wrap;
    }

    .filter-btn, .view-btn, .toggle-btn, .perf-btn {
        padding: 8px 16px;
        border: 2px solid #dee2e6;
        background: white;
        border-radius: 20px;
        cursor: pointer;
        font-size: 0.9rem;
        font-weight: 500;
        transition: all 0.3s ease;
        color: #6c757d;
    }

    .filter-btn:hover, .view-btn:hover, .toggle-btn:hover, .perf-btn:hover {
        border-color: #007bff;
        color: #007bff;
        transform: translateY(-2px);
    }

    .filter-btn.active, .view-btn.active, .toggle-btn.active, .perf-btn.active {
        background: #007bff;
        color: white;
        border-color: #007bff;
        box-shadow: 0 4px 12px rgba(0,123,255,0.3);
    }

    .filter-controls {
        display: flex;
        flex-wrap: wrap;
        gap: 16px;
        align-items: flex-end;
    }

    .filter-section {
        display: flex;
        flex-direction: column;
        gap: 6px;
        min-width: 180px;
    }

    .filter-label {
        font-weight: 600;
        color: #495057;
        font-size: 0.85rem;
        margin: 0;
    }

    .filter-dropdown {
        padding: 8px 12px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        background: white;
        color: #495057;
        font-size: 0.9rem;
        transition: all 0.2s ease;
        cursor: pointer;
    }

    .filter-dropdown:hover {
        border-color: #007bff;
    }

    .filter-dropdown:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
    }

    .clear-filters-btn {
        padding: 8px 16px;
        background: #dc3545;
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 0.85rem;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .clear-filters-btn:hover {
        background: #c82333;
        transform: translateY(-1px);
    }

    .active-filters {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        gap: 8px;
        margin-top: 12px;
        padding: 12px;
        background: #f8f9fa;
        border-radius: 8px;
        border-left: 4px solid #007bff;
    }

    .filter-indicator {
        font-weight: 600;
        color: #495057;
        font-size: 0.85rem;
    }

    .filter-badge {
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        color: white;
        display: flex;
        align-items: center;
        gap: 4px;
    }

    .filter-badge.sector {
        background: linear-gradient(135deg, #007bff, #0056b3);
    }

    .filter-badge.company-size {
        background: linear-gradient(135deg, #28a745, #1e7e34);
    }

    .satisfaction-details {
        margin-top: 8px;
        text-align: center;
    }

    .satisfaction-details small {
        color: #6c757d;
        font-size: 0.75rem;
    }

    .chart-container {
        background: #fff;
        padding: 32px 24px;
        margin-bottom: 32px;
        border-radius: 18px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.10);
        border-top: 5px solid #007bff;
        transition: box-shadow 0.3s, transform 0.3s;
    }
    .chart-container:hover {
        box-shadow: 0 16px 48px rgba(0,0,0,0.18);
        transform: translateY(-4px);
    }

    .chart-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 24px;
        flex-wrap: wrap;
        gap: 16px;
    }

    .chart-header h4 {
        color: #333;
        margin: 0;
        font-size: 1.4rem;
        font-weight: 600;
    }

    .interactive-bar-chart {
        margin-top: 20px;
    }

    .interactive-bar-item {
        margin-bottom: 20px;
        padding: 16px;
        border-radius: 12px;
        transition: all 0.3s ease;
        cursor: pointer;
        border: 2px solid transparent;
    }

    .interactive-bar-item:hover, .interactive-bar-item.hovered {
        background: rgba(0,123,255,0.05);
        border-color: #007bff;
        transform: translateX(8px);
    }

    .bar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }

    .bar-label {
        display: flex;
        align-items: center;
        gap: 8px;
        font-weight: 600;
        color: #333;
        font-size: 1rem;
    }

    .sector-icon {
        font-size: 1.2rem;
    }

    .bar-value-display {
        font-weight: 700;
        color: #007bff;
        font-size: 1.1rem;
    }

    .bar-wrapper {
        position: relative;
        height: 12px;
        background: #e9ecef;
        border-radius: 6px;
        overflow: hidden;
    }

    .completion-progress-bg {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 100%;
        background: rgba(0,0,0,0.1);
        border-radius: 6px;
    }

    .completion-progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #28a745, #20c997);
        border-radius: 6px;
        transition: width 0.8s ease;
    }

    .completion-bar {
        height: 6px;
        background: #e9ecef;
        border-radius: 3px;
        margin: 8px 0 4px 0;
        overflow: hidden;
    }

    .completion-fill {
        height: 100%;
        background: linear-gradient(90deg, #28a745, #20c997);
        border-radius: 3px;
        transition: width 0.8s ease;
    }

    .completion-stats {
        margin-top: 12px;
        padding-top: 12px;
        border-top: 1px solid #e9ecef;
    }

    .completion-text {
        font-size: 0.85rem;
        color: #666;
        font-weight: 500;
        text-align: center;
        display: block;
        margin-top: 4px;
    }

    .interactive-bar {
        height: 100%;
        border-radius: 6px;
        position: relative;
        animation: slideIn 0.8s ease;
        transition: all 0.3s ease;
    }

    .interactive-bar-item:hover .interactive-bar {
        transform: scaleY(1.2);
    }

    .bar-shine {
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
        animation: shine 2s ease-in-out infinite;
    }

    .slideIn {
        animation: slideIn 0.8s ease;
    }

    .shine {
        animation: shine 2s ease-in-out infinite;
    }

    .sector-dropdown {
        margin-top: 16px;
        padding: 16px;
        background: rgba(0,123,255,0.05);
        border-radius: 8px;
        animation: slideDown 0.3s ease;
    }

    .dropdown-stats {
        display: flex;
        gap: 24px;
        flex-wrap: wrap;
    }

    .mini-stat {
        text-align: center;
    }

    .mini-stat-value {
        display: block;
        font-size: 1.4rem;
        font-weight: 700;
        color: #007bff;
    }

    .mini-stat-label {
        font-size: 0.8rem;
        color: #666;
    }

    .satisfaction-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 24px;
        margin-top: 20px;
    }

    .satisfaction-card {
        background: white;
        padding: 24px;
        border-radius: 16px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        border-left: 4px solid #007bff;
        transition: all 0.4s ease;
        cursor: pointer;
        position: relative;
        overflow: hidden;
    }

    .satisfaction-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: radial-gradient(circle at 50% 50%, rgba(0,123,255,0.05) 0%, transparent 70%);
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .satisfaction-card:hover::before, .satisfaction-card.selected::before {
        opacity: 1;
    }

    .satisfaction-card:hover, .satisfaction-card.selected {
        transform: translateY(-8px) scale(1.02);
        box-shadow: 0 12px 40px rgba(0,0,0,0.15);
    }

    .satisfaction-card.excellent { border-left-color: #28a745; }
    .satisfaction-card.good { border-left-color: #17a2b8; }
    .satisfaction-card.average { border-left-color: #ffc107; }
    .satisfaction-card.poor { border-left-color: #dc3545; }

    .satisfaction-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 20px;
    }

    .satisfaction-header h5 {
        margin: 0;
        color: #333;
        font-size: 1.1rem;
        font-weight: 600;
    }

    .satisfaction-score-big {
        font-size: 2rem;
        font-weight: 700;
        color: #007bff;
    }

    .satisfaction-meter {
        position: relative;
        margin-bottom: 16px;
    }

    .meter-track {
        height: 8px;
        background: #e9ecef;
        border-radius: 4px;
    }

    .meter-fill {
        height: 8px;
        background: linear-gradient(90deg, #dc3545, #ffc107, #28a745);
        border-radius: 4px;
        transition: width 1s ease;
        position: absolute;
        top: 0;
    }

    .meter-labels {
        display: flex;
        justify-content: space-between;
        margin-top: 4px;
    }

    .meter-label {
        font-size: 0.7rem;
        color: #999;
    }

    .satisfaction-emotion {
        text-align: center;
        font-size: 2rem;
        margin-top: 12px;
    }

    /* Question Performance */
    .question-bars {
        display: flex;
        gap: 16px;
        margin-top: 20px;
        flex-wrap: wrap;
        justify-content: center;
    }

    .question-bar-item {
        position: relative;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .question-bar {
        width: 60px;
        max-height: 200px;
        min-height: 20px;
        border-radius: 30px 30px 4px 4px;
        position: relative;
        display: flex;
        align-items: flex-end;
        justify-content: center;
        transition: all 0.4s ease;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }

    .question-bar.excellent { background: linear-gradient(180deg, #28a745, #20c997); }
    .question-bar.good { background: linear-gradient(180deg, #17a2b8, #20c997); }
    .question-bar.average { background: linear-gradient(180deg, #ffc107, #ffcd39); }
    .question-bar.poor { background: linear-gradient(180deg, #dc3545, #e55a5a); }

    .question-bar-item:hover .question-bar, .question-bar-item.selected .question-bar {
        transform: scale(1.1);
        box-shadow: 0 8px 24px rgba(0,0,0,0.2);
    }

    .bar-value {
        color: white;
        font-weight: 700;
        font-size: 0.9rem;
        padding: 4px;
        text-shadow: 0 1px 2px rgba(0,0,0,0.3);
    }

    .question-label {
        text-align: center;
        margin-top: 8px;
        font-weight: 600;
        color: #333;
        font-size: 0.9rem;
    }

    .point-tooltip, .question-tooltip {
        background: #212529;
        color: #fff;
        border-radius: 10px;
        font-size: 1rem;
        box-shadow: 0 4px 24px rgba(0,0,0,0.18);
        border: none;
        padding: 12px 18px;
    }

    .question-tooltip {
        position: absolute;
        top: -48px;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(0,0,0,0.92);
        color: #fff;
        padding: 8px 14px;
        border-radius: 8px;
        font-size: 0.95rem;
        font-weight: 500;
        white-space: nowrap;
        z-index: 10;
        pointer-events: none;
        opacity: 0;
        transition: opacity 0.2s;
    }
    .question-bar-item:hover .question-tooltip {
        opacity: 1;
    }


    .tooltip-stats {
        margin-top: 4px;
        font-size: 0.7rem;
        opacity: 0.8;
    }

    .interactive-line-chart {
        position: relative;
        height: 350px;
        margin: 20px 0;
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        border-radius: 12px;
        padding: 24px;
        overflow: hidden;
    }

    .chart-point {
        position: absolute;
        transform: translateX(-50%);
        cursor: pointer;
        z-index: 5;
    }

    .point {
        width: 14px;
        height: 14px;
        background: #007bff;
        border: 3px solid white;
        border-radius: 50%;
        cursor: pointer;
        box-shadow: 0 3px 8px rgba(0,0,0,0.2);
        transition: all 0.3s ease;
    }

    .point:hover, .point.selected {
        transform: scale(1.4);
        background: #28a745;
        box-shadow: 0 6px 16px rgba(0,0,0,0.3);
    }

    .chart-point.hovered .point {
        transform: scale(1.2);
        transition: transform 0.3s ease;
    }

    .point-tooltip {
        position: absolute;
        bottom: 130%;
        left: 50%;
        transform: translateX(-50%) scale(0.95);
        background: linear-gradient(135deg, #007bff 60%, #28a745 100%);
        color: #fff;
        padding: 16px 22px;
        border-radius: 14px;
        font-size: 1rem;
        font-weight: 500;
        white-space: nowrap;
        z-index: 20;
        box-shadow: 0 8px 32px rgba(0,0,0,0.25);
        border: 2px solid #fff;
        opacity: 0;
        pointer-events: none;
        transition: opacity 0.25s, transform 0.25s;
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    .data-point:hover .point-tooltip,
    .data-point.selected .point-tooltip {
        opacity: 1;
        transform: translateX(-50%) scale(1.05);
    }

    .point-tooltip::after {
        content: '';
        position: absolute;
        top: 100%;
        left: 50%;
        transform: translateX(-50%);
        border: 10px solid transparent;
        border-top-color: #007bff;
        filter: drop-shadow(0 2px 2px rgba(0,0,0,0.1));
    }

    .point-tooltip .tooltip-header {
        font-size: 1.1rem;
        font-weight: 700;
        margin-bottom: 4px;
        color: #fff;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .point-tooltip .score-badge {
        padding: 4px 10px;
        border-radius: 8px;
        font-size: 0.9rem;
        font-weight: 600;
        margin-left: 6px;
    }

    .point-tooltip .tooltip-period {
        color: #e0e0e0;
        font-size: 0.95rem;
        margin-bottom: 4px;
    }

    .point-tooltip .tooltip-details {
        font-size: 0.9rem;
        color: #f8f9fa;
        margin-top: 2px;
        display: flex;
        flex-direction: column;
        gap: 2px;
        align-items: center;
    }

    .point-tooltip .recent-indicator {
        color: #ffc107 !important;
        font-weight: 700;
        font-size: 0.95rem;
        margin-top: 2px;
    }

    .sector-cards-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
        gap: 24px;
        margin-top: 20px;
    }

    .enhanced-sector-card {
        background: white;
        padding: 24px;
        border-radius: 16px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.08);
        border-left: 4px solid #007bff;
        transition: all 0.4s ease;
        cursor: pointer;
        position: relative;
        overflow: hidden;
    }

    .enhanced-sector-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, transparent, rgba(0,123,255,0.03));
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .enhanced-sector-card:hover::before, .enhanced-sector-card.selected::before {
        opacity: 1;
    }

    .enhanced-sector-card:hover, .enhanced-sector-card.selected {
        transform: translateY(-8px);
        box-shadow: 0 16px 48px rgba(0,0,0,0.15);
    }

    .sector-card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .sector-title {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .sector-icon-large {
        font-size: 1.8rem;
    }

    .sector-title h4 {
        margin: 0;
        color: #333;
        font-size: 1.3rem;
        font-weight: 600;
    }

    .expand-icon {
        font-size: 1.5rem;
        color: #999;
        transition: transform 0.3s ease;
    }

    .expand-icon.expanded {
        transform: rotate(180deg);
    }

    .sector-quick-stats {
        display: flex;
        justify-content: space-around;
        margin-bottom: 20px;
    }

    .quick-stat {
        text-align: center;
    }

    .stat-circle {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 8px;
        background: conic-gradient(var(--color) var(--fill), #e9ecef var(--fill));
        position: relative;
    }

    .stat-circle::before {
        content: '';
        position: absolute;
        inset: 6px;
        border-radius: 50%;
        background: white;
    }

    .stat-circle span {
        font-weight: 700;
        color: #333;
        font-size: 1rem;
        position: relative;
        z-index: 1;
    }

    .stat-number {
        font-size: 2rem;
        font-weight: 700;
        color: #007bff;
        margin-bottom: 8px;
        display: block;
    }

    .quick-stat label {
        font-size: 0.8rem;
        color: #666;
        font-weight: 500;
    }

    .sector-expanded-content {
        opacity: 1;
        max-height: 500px;
        transition: opacity 0.4s ease, max-height 0.4s ease;
        border-top: 1px solid #e9ecef;
        padding-top: 20px;
        margin-top: 20px;
    }

    .trend-indicators {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 16px;
        margin-bottom: 20px;
    }

    .trend-item {
        padding: 12px;
        background: rgba(0,123,255,0.05);
        border-radius: 8px;
        border-left: 3px solid #007bff;
    }

    .trend-label {
        font-size: 0.8rem;
        color: #666;
        display: block;
        margin-bottom: 4px;
    }

    .trend-value {
        font-weight: 600;
        color: #333;
        font-size: 0.9rem;
    }

    .mini-bars-interactive {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 12px;
        margin-top: 12px;
    }

    .mini-bar-interactive {
        position: relative;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .mini-bar-interactive:hover {
        transform: translateY(-2px);
    }

    .mini-bar-container {
        position: relative;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .mini-bar-bg {
        height: 8px;
        background: #e9ecef;
        border-radius: 4px;
        flex: 1;
    }

    .mini-bar-fill {
        position: absolute;
        height: 8px;
        border-radius: 4px;
        transition: width 0.8s ease;
        left: 20px;
        right: 0;
    }

    .mini-bar-fill.excellent { background: #28a745; }
    .mini-bar-fill.good { background: #17a2b8; }
    .mini-bar-fill.average { background: #ffc107; }
    .mini-bar-fill.poor { background: #dc3545; }

    .mini-bar-label {
        font-size: 0.8rem;
        color: #666;
        min-width: 20px;
        font-weight: 500;
    }

    .mini-bar-tooltip {
        position: absolute;
        top: -30px;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(0,0,0,0.9);
        color: white;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.7rem;
        white-space: nowrap;
        z-index: 10;
    }

    .sector-table {
        margin-top: 20px;
        overflow-x: auto;
    }

    .interactive-table {
        width: 100%;
        border-collapse: collapse;
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);
    }

    .interactive-table th {
        background: linear-gradient(135deg, #007bff, #0056b3);
        color: white;
        padding: 16px 12px;
        text-align: left;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        user-select: none;
        position: relative;
    }

    .interactive-table th:hover {
        background: linear-gradient(135deg, #0056b3, #004085);
    }

    .table-row {
        transition: all 0.2s ease;
        cursor: pointer;
        border-bottom: 1px solid #e9ecef;
    }

    .table-row:hover, .table-row.selected {
        background: rgba(0,123,255,0.05);
        transform: scale(1.01);
    }

    .table-row td {
        padding: 16px 12px;
        color: #333;
    }

    .table-sector {
        display: flex;
        align-items: center;
        gap: 8px;
        font-weight: 500;
    }

    .table-sector-icon {
        font-size: 1.1rem;
    }

    .response-count {
        background: #007bff;
        color: white;
        padding: 4px 12px;
        border-radius: 12px;
        font-weight: 600;
        font-size: 0.9rem;
    }

    .responses-table th, .responses-table td {
        font-size: 1rem;
        padding: 16px 14px;
    }

    .score-cell {
        font-weight: 600;
        color: #333;
        padding: 6px 12px;
        border-radius: 8px;
        background: rgba(0,123,255,0.1);
    }

    .loading-spinner {
        text-align: center;
        padding: 80px;
    }

    .spinner {
        width: 50px;
        height: 50px;
        border: 5px solid #f3f3f3;
        border-top: 5px solid #007bff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 20px;
    }

    .no-data {
        text-align: center;
        padding: 80px;
        color: #666;
        font-size: 1.2rem;
    }

    .dashboard-responsive {
    }

    .summary-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
    }

    .sector-cards-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
    }

    html {
        scroll-behavior: smooth;
    }

    .navigation-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 24px;
        margin-top: 20px;
    }

    .navigation-card {
        background: white;
        padding: 24px;
        border-radius: 16px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        cursor: pointer;
        transition: all 0.3s ease;
        border: 2px solid transparent;
        position: relative;
        overflow: hidden;
    }

    .navigation-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, transparent, rgba(0,123,255,0.02) 100%);
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .navigation-card:hover {
        transform: translateY(-8px) scale(1.02);
        box-shadow: 0 12px 40px rgba(0,0,0,0.15);
        border-color: #007bff;
    }

    .navigation-card:hover::before {
        opacity: 1;
    }

    .navigation-card .card-icon {
        font-size: 3rem;
        margin-bottom: 16px;
        text-align: center;
    }

    .navigation-card h4 {
        text-align: center;
        margin: 0 0 16px 0;
        color: #333;
        font-size: 1.4rem;
        font-weight: 600;
    }

    .navigation-card .card-stats {
        display: flex;
        justify-content: space-around;
        margin-bottom: 16px;
    }

    .navigation-card .stat-item {
        text-align: center;
    }

    .navigation-card .stat-number {
        display: block;
        font-size: 1.8rem;
        font-weight: 700;
        color: #007bff;
        margin-bottom: 4px;
    }

    .navigation-card .stat-label {
        font-size: 0.9rem;
        color: #666;
        font-weight: 500;
    }

    .navigation-card .card-meta {
        text-align: center;
        color: #666;
        font-size: 0.9rem;
        margin-bottom: 8px;
    }

    .navigation-card .card-arrow {
        text-align: center;
        font-size: 2rem;
        color: #007bff;
        opacity: 0;
        transition: all 0.3s ease;
    }

    .navigation-card:hover .card-arrow {
        opacity: 1;
        transform: translateX(8px);
        color: #28a745;
    }

    /* Detailed Analysis */
    .detailed-analysis-container {
        background: white;
        border-radius: 16px;
        padding: 24px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.08);
        margin-top: 20px;
    }

    .analysis-header {
        margin-bottom: 24px;
        padding-bottom: 16px;
        border-bottom: 2px solid #e9ecef;
    }

    .project-info h4 {
        color: #007bff;
        margin: 0 0 12px 0;
        font-size: 1.6rem;
    }

    .project-info p {
        margin: 4px 0;
        color: #666;
    }

    .question-analysis-grid {
        display: grid;
        gap: 20px;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    }

    .question-analysis-item {
        background: #f8f9fa;
        padding: 16px;
        border-radius: 12px;
        border-left: 4px solid #007bff;
    }

    .question-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }

    .question-number {
        font-weight: 600;
        color: #007bff;
        font-size: 1.1rem;
    }

    .question-score {
        font-weight: 700;
        font-size: 1.2rem;
        padding: 4px 8px;
        border-radius: 6px;
        color: white;
    }

    .question-score.excellent { background: #28a745; }
    .question-score.good { background: #17a2b8; }
    .question-score.average { background: #ffc107; color: #333; }
    .question-score.poor { background: #dc3545; }

    .question-text {
        margin-bottom: 12px;
        font-size: 0.9rem;
        color: #555;
        font-weight: 500;
    }

    .question-bar-container {
        position: relative;
        height: 8px;
        background: #dee2e6;
        border-radius: 4px;
        margin-bottom: 8px;
        overflow: hidden;
    }

    .question-bar-fill {
        height: 100%;
        border-radius: 4px;
        transition: width 0.8s ease;
    }

    .question-bar-fill.excellent { background: #28a745; }
    .question-bar-fill.good { background: #17a2b8; }
    .question-bar-fill.average { background: #ffc107; }
    .question-bar-fill.poor { background: #dc3545; }

    .question-stats {
        display: flex;
        justify-content: space-between;
        font-size: 0.8rem;
        color: #666;
    }

    .responses-table {
        margin-top: 16px;
    }

    .responses-table table {
        width: 100%;
        border-collapse: collapse;
    }

    .responses-table th,
    .responses-table td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid #dee2e6;
    }

    .responses-table th {
        background-color: #f8f9fa;
        font-weight: 600;
        color: #333;
    }

    .responses-table tr:hover {
        background-color: #f8f9fa;
    }

    .responses-table code {
        background: #f1f3f4;
        padding: 2px 6px;
        border-radius: 4px;
        font-family: 'Courier New', monospace;
        font-size: 0.9rem;
    }

    .responses-table .badge {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .bg-success { background-color: #28a745 !important; color: white; }
    .bg-info { background-color: #17a2b8 !important; color: white; }
    .bg-warning { background-color: #ffc107 !important; color: #333; }
    .bg-danger { background-color: #dc3545 !important; color: white; }

    .trends-container {
        margin-top: 20px;
    }

    .trend-summary-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 16px;
        margin-bottom: 30px;
    }

    .trend-card {
        background: white;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 4px 16px rgba(0,0,0,0.08);
        text-align: center;
        transition: all 0.3s ease;
        border-left: 4px solid #007bff;
    }

    .trend-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 24px rgba(0,0,0,0.12);
    }

    .trend-icon {
        font-size: 2rem;
        margin-bottom: 8px;
    }

    .trend-value {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 4px;
        color: #007bff;
    }

    .trend-value.positive {
        color: #28a745;
    }

    .trend-value.negative {
        color: #dc3545;
    }

    .trend-value.neutral {
        color: #6c757d;
    }

    .trend-label {
        font-size: 0.9rem;
        font-weight: 600;
        color: #333;
        margin-bottom: 4px;
    }

    .trend-period {
        font-size: 0.8rem;
        color: #666;
    }

    .simple-trend-chart {
        background: #f8f9fa;
        border-radius: 12px;
        padding: 24px;
        margin-bottom: 20px;
    }

    .visual-trend-chart {
        background: white;
        border-radius: 16px;
        padding: 24px;
        margin-bottom: 20px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        border: 1px solid #e9ecef;
    }

    .line-chart-container {
        margin-top: 20px;
        position: relative;
        background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
        border-radius: 12px;
        padding: 20px;
        border: 1px solid #dee2e6;
    }

    .chart-grid {
        display: flex;
        height: 300px;
        position: relative;
    }

    .y-axis {
        width: 40px;
        position: relative;
        border-right: 2px solid #333;
        margin-right: 10px;
    }

    .y-label {
        position: absolute;
        right: 50px;
        transform: translateY(50%);
        font-size: 0.9rem;
        font-weight: 600;
        color: #666;
        background: white;
        padding: 2px 6px;
        border-radius: 4px;
        border: 1px solid #e9ecef;
    }

    .chart-area {
        flex: 1;
        position: relative;
        border-bottom: 2px solid #333;
        margin-left: 10px;
    }

    .grid-lines {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
    }

    .grid-line-horizontal {
        position: absolute;
        left: 0;
        right: 0;
        height: 1px;
        background: #e9ecef;
        opacity: 0.7;
    }

    .line-chart-content {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
    }

    .trend-area {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        opacity: 0.2;
        background: linear-gradient(to bottom, #007bff, transparent);
        border-radius: 4px 4px 0 0;
    }

    .trend-line {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(90deg, #007bff, #28a745, #007bff);
        height: 3px;
        border-radius: 2px;
        box-shadow: 0 2px 8px rgba(0,123,255,0.3);
        z-index: 1;
    }

    .data-point {
        position: absolute;
        transform: translate(-50%, 50%);
        z-index: 2;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .data-point:hover {
        transform: translate(-50%, 50%) scale(1.2);
        z-index: 10;
    }

    .data-point.selected {
        transform: translate(-50%, 50%) scale(1.3);
        z-index: 10;
    }

    .point-circle {
        width: 16px;
        height: 16px;
        border-radius: 50%;
        border: 3px solid white;
        position: relative;
        box-shadow: 0 3px 12px rgba(0,0,0,0.2);
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .data-point.excellent .point-circle {
        background: #28a745;
        border-color: #1e7e34;
    }

    .data-point.good .point-circle {
        background: #17a2b8;
        border-color: #117a8b;
    }

    .data-point.average .point-circle {
        background: #ffc107;
        border-color: #d39e00;
    }

    .data-point.poor .point-circle {
        background: #dc3545;
        border-color: #bd2130;
    }

    .data-point.recent .point-circle {
        border-width: 4px;
        border-color: #007bff;
        box-shadow: 0 3px 12px rgba(0,0,0,0.2), 0 0 0 4px rgba(0,123,255,0.3);
    }

    .point-value {
        font-size: 0.7rem;
        font-weight: 700;
        color: white;
        text-shadow: 0 1px 2px rgba(0,0,0,0.5);
        position: absolute;
        white-space: nowrap;
    }

    .point-tooltip {
        position: absolute;
        bottom: 120%;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(0,0,0,0.95);
        color: white;
        padding: 12px 16px;
        border-radius: 12px;
        font-size: 0.85rem;
        white-space: nowrap;
        z-index: 20;
        box-shadow: 0 8px 32px rgba(0,0,0,0.3);
        border: 1px solid rgba(255,255,255,0.1);
    }

    .point-tooltip::after {
        content: '';
        position: absolute;
        top: 100%;
        left: 50%;
        transform: translateX(-50%);
        border: 5px solid transparent;
        border-top-color: rgba(0,0,0,0.9);
    }

    .tooltip-header {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 6px;
    }

    .tooltip-header strong {
        font-size: 1.1rem;
        color: #fff;
    }

    .score-badge {
        padding: 2px 6px;
        border-radius: 6px;
        font-size: 0.7rem;
        font-weight: 600;
        text-transform: uppercase;
    }

    .score-badge.excellent {
        background: #28a745;
        color: white;
    }

    .score-badge.good {
        background: #17a2b8;
        color: white;
    }

    .score-badge.average {
        background: #ffc107;
        color: #333;
    }

    .score-badge.poor {
        background: #dc3545;
        color: white;
    }

    .tooltip-period {
        color: #ccc;
        margin-bottom: 6px;
        font-size: 0.8rem;
    }

    .tooltip-details {
        display: flex;
        flex-direction: column;
        gap: 4px;
        font-size: 0.75rem;
        color: #ddd;
    }

    .recent-indicator {
        color: #ffc107 !important;
        font-weight: 600;
    }

    .forecast-line {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(90deg, #6f42c1, #e83e8c, #6f42c1);
        height: 3px;
        border-radius: 2px;
        box-shadow: 0 2px 8px rgba(111,66,193,0.4);
        z-index: 1;
        border: 1px dashed rgba(111,66,193,0.3);
    }

    .forecast-confidence-area {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        opacity: 0.15;
        background: linear-gradient(to bottom, #6f42c1, transparent);
        border-radius: 4px 4px 0 0;
        z-index: 0;
    }

    .forecast-point {
        position: absolute;
        transform: translate(-50%, 50%);
        z-index: 2;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .forecast-point:hover {
        transform: translate(-50%, 50%) scale(1.2);
        z-index: 10;
    }

    .forecast-dot {
        width: 14px;
        height: 14px;
        border-radius: 50%;
        background: #6f42c1;
        border: 3px solid white;
        box-shadow: 0 3px 12px rgba(111,66,193,0.3);
        transition: all 0.3s ease;
        position: relative;
    }

    .forecast-tooltip {
        position: absolute;
        bottom: 120%;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(111,66,193,0.95);
        color: white;
        padding: 10px 14px;
        border-radius: 10px;
        font-size: 0.8rem;
        white-space: nowrap;
        z-index: 20;
        box-shadow: 0 6px 24px rgba(111,66,193,0.4);
        border: 1px solid rgba(255,255,255,0.2);
    }

    .forecast-tooltip::after {
        content: '';
        position: absolute;
        top: 100%;
        left: 50%;
        transform: translateX(-50%);
        border: 4px solid transparent;
        border-top-color: rgba(111,66,193,0.95);
    }

    .loading-forecast {
        text-align: center;
        padding: 60px 20px;
        color: #6c757d;
    }

    .no-forecast-data {
        text-align: center;
        padding: 40px 20px;
        color: #6c757d;
        font-style: italic;
    }

    .forecast-insights {
        margin-top: 20px;
        padding: 20px;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 12px;
        border-left: 4px solid #6f42c1;
    }

    .database-analysis-content {
        line-height: 1.6;
        color: #495057;
    }

    .database-analysis-content p {
        margin: 0 0 12px 0;
        text-align: justify;
    }

    .x-axis {
        position: absolute;
        bottom: -25px;
        left: 0;
        right: 0;
        height: 20px;
    }

    .x-label {
        position: absolute;
        transform: translateX(-50%);
        font-size: 0.8rem;
        color: #666;
        font-weight: 500;
        background: white;
        padding: 2px 4px;
        border-radius: 4px;
        border: 1px solid #e9ecef;
    }

    .chart-legend {
        display: flex;
        justify-content: center;
        gap: 24px;
        margin-top: 30px;
        padding-top: 20px;
        border-top: 1px solid #e9ecef;
        flex-wrap: wrap;
    }

    .legend-item {
        display: flex;
        align-items: center;
        gap: 6px;
        font-size: 0.85rem;
        color: #666;
    }

    .legend-dot {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        border: 2px solid white;
        box-shadow: 0 1px 4px rgba(0,0,0,0.2);
    }

    .legend-dot.excellent {
        background: #28a745;
    }

    .legend-dot.good {
        background: #17a2b8;
    }

    .legend-dot.average {
        background: #ffc107;
    }

    .legend-dot.poor {
        background: #dc3545;
    }

    .legend-dot.recent {
        background: #007bff;
        border-color: #0056b3;
        box-shadow: 0 0 0 2px rgba(0,123,255,0.3);
    }

    .recent-legend {
        font-weight: 600;
        color: #007bff;
    }

    .trend-chart-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 12px;
        border-bottom: 2px solid #e9ecef;
    }

    .chart-title {
        font-size: 1.2rem;
        font-weight: 600;
        color: #333;
    }

    .chart-range {
        font-size: 0.9rem;
        color: #666;
        background: #e9ecef;
        padding: 4px 8px;
        border-radius: 8px;
    }

    .trend-bars-container {
        display: flex;
        gap: 8px;
        align-items: end;
        min-height: 200px;
        padding: 20px 0;
        overflow-x: auto;
    }

    .trend-bar-item {
        flex: 1;
        min-width: 60px;
        display: flex;
        flex-direction: column;
        align-items: center;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
    }

    .trend-bar-item:hover, .trend-bar-item.selected {
        transform: scale(1.05);
    }

    .trend-bar {
        width: 100%;
        max-width: 40px;
        min-height: 20px;
        border-radius: 8px 8px 4px 4px;
        display: flex;
        align-items: flex-end;
        justify-content: center;
        padding: 4px;
        position: relative;
        transition: all 0.4s ease;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .trend-bar.excellent {
        background: linear-gradient(180deg, #28a745, #20c997);
        border-left: 3px solid #1e7e34;
    }

    .trend-bar.good {
        background: linear-gradient(180deg, #17a2b8, #20c997);
        border-left: 3px solid #117a8b;
    }

    .trend-bar.average {
        background: linear-gradient(180deg, #ffc107, #ffcd39);
        border-left: 3px solid #d39e00;
    }

    .trend-bar.poor {
        background: linear-gradient(180deg, #dc3545, #e55a5a);
        border-left: 3px solid #bd2130;
    }

    .trend-bar.recent {
        border: 2px solid #007bff;
        box-shadow: 0 4px 16px rgba(0,123,255,0.3);
    }

    .trend-bar-value {
        color: white;
        font-weight: 700;
        font-size: 0.8rem;
        text-shadow: 0 1px 2px rgba(0,0,0,0.3);
        margin-bottom: 2px;
    }

    .trend-bar-label {
        font-size: 0.75rem;
        color: #666;
        font-weight: 500;
        margin-top: 8px;
        text-align: center;
        transform: rotate(-45deg);
        transform-origin: center;
        white-space: nowrap;
    }

    .trend-tooltip-simple {
        position: absolute;
        bottom: 100%;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(0,0,0,0.9);
        color: white;
        padding: 8px 12px;
        border-radius: 8px;
        font-size: 0.8rem;
        white-space: nowrap;
        z-index: 10;
        margin-bottom: 8px;
        text-align: center;
    }

    .trend-tooltip-simple::after {
        content: '';
        position: absolute;
        top: 100%;
        left: 50%;
        transform: translateX(-50%);
        border: 5px solid transparent;
        border-top-color: rgba(0,0,0,0.9);
    }

    .trend-insights {
        background: white;
        padding: 20px;
        border-radius: 12px;
        border-left: 4px solid #17a2b8;
        margin-bottom: 20px;
    }

    .insight-item {
        margin-bottom: 12px;
        font-size: 0.9rem;
        line-height: 1.5;
    }

    .insight-item:last-child {
        margin-bottom: 0;
    }

    .insight-item strong {
        color: #333;
        margin-right: 8px;
    }

    .insight-item span {
        color: #666;
    }

    .no-trend-data {
        text-align: center;
        padding: 40px;
        color: #666;
        font-size: 1.1rem;
        background: #f8f9fa;
        border-radius: 12px;
        border: 2px dashed #dee2e6;
    }

    .clients-overview {
        margin-top: 20px;
    }

    .client-summary-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .client-card {
        background: white;
        padding: 20px;
        border-radius: 12px;
        text-align: center;
        box-shadow: 0 4px 16px rgba(0,0,0,0.08);
        transition: all 0.3s ease;
        border-left: 4px solid #007bff;
    }

    .client-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 24px rgba(0,0,0,0.12);
    }

    .client-card.total-clients {
        border-left-color: #007bff;
    }

    .client-card.new-clients {
        border-left-color: #28a745;
    }

    .client-card.repeated-clients {
        border-left-color: #17a2b8;
    }

    .client-card.retention-rate {
        border-left-color: #ffc107;
    }

    .client-card .card-icon {
        font-size: 2.5rem;
        margin-bottom: 12px;
        opacity: 0.8;
    }

    .client-value {
        font-size: 2.2rem;
        font-weight: 700;
        color: #333;
        margin-bottom: 8px;
    }

    .client-label {
        font-size: 1rem;
        font-weight: 600;
        color: #333;
        margin-bottom: 4px;
    }

    .client-sublabel {
        font-size: 0.85rem;
        color: #666;
        opacity: 0.8;
    }

    .client-trend-container {
        background: #f8f9fa;
        padding: 24px;
        border-radius: 12px;
        margin-bottom: 30px;
    }

    .client-chart-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        flex-wrap: wrap;
        gap: 16px;
    }

    .client-chart-header h5 {
        margin: 0;
        color: #333;
        font-size: 1.2rem;
    }

    .client-bars-container {
        display: flex;
        gap: 16px;
        align-items: end;
        min-height: 200px;
        padding: 20px 0;
        overflow-x: auto;
        justify-content: center;
    }

    .client-bar-group {
        display: flex;
        flex-direction: column;
        align-items: center;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
        min-width: 80px;
    }

    .client-bar-group:hover {
        transform: scale(1.05);
    }

    .client-stacked-bar {
        width: 50px;
        min-height: 20px;
        border-radius: 6px 6px 0 0;
        position: relative;
        transition: all 0.4s ease;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        display: flex;
        flex-direction: column;
        margin-bottom: 8px;
        background: #f8f9fa;
        border: 1px solid #dee2e6;
    }

    .client-stacked-bar:hover {
        transform: scale(1.05);
        box-shadow: 0 4px 16px rgba(0,0,0,0.15);
    }

    .bar-segment {
        width: 100%;
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
        border-radius: inherit;
    }

    .new-segment {
        background: linear-gradient(180deg, #28a745, #20c997);
        border-top-left-radius: 6px;
        border-top-right-radius: 6px;
    }

    .repeated-segment {
        background: linear-gradient(180deg, #17a2b8, #138496);
    }

    .segment-value {
        color: white;
        font-weight: 700;
        font-size: 0.75rem;
        text-shadow: 0 1px 2px rgba(0,0,0,0.5);
        position: absolute;
        white-space: nowrap;
    }

    .bar-total-count {
        position: absolute;
        top: -20px;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(0,0,0,0.8);
        color: white;
        padding: 2px 6px;
        border-radius: 4px;
        font-size: 0.7rem;
        font-weight: 600;
        white-space: nowrap;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .client-bar-group:hover .bar-total-count {
        opacity: 1;
    }

    .client-bar-label {
        font-size: 0.8rem;
        color: #666;
        font-weight: 500;
        text-align: center;
        margin-top: 8px;
    }

    .client-period-tooltip {
        position: absolute;
        bottom: 100%;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(0,0,0,0.9);
        color: white;
        padding: 12px 16px;
        border-radius: 8px;
        font-size: 0.85rem;
        white-space: nowrap;
        z-index: 10;
        margin-bottom: 8px;
    }

    .client-period-tooltip::after {
        content: '';
        position: absolute;
        top: 100%;
        left: 50%;
        transform: translateX(-50%);
        border: 5px solid transparent;
        border-top-color: rgba(0,0,0,0.9);
    }

    .tooltip-header {
        font-weight: 600;
        margin-bottom: 8px;
        text-align: center;
    }

    .tooltip-stats {
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

    .stat-row {
        display: flex;
        align-items: center;
        gap: 6px;
        font-size: 0.8rem;
    }

    .stat-icon {
        width: 16px;
    }

    .legend-dot.new-client {
        background: #28a745;
    }

    .legend-dot.repeated-client {
        background: #17a2b8;
    }

    .client-details-section {
        background: white;
        padding: 24px;
        border-radius: 12px;
        box-shadow: 0 4px 16px rgba(0,0,0,0.08);
    }

    .client-details-section h5 {
        margin: 0 0 20px 0;
        color: #333;
        font-size: 1.2rem;
    }

    .client-filters {
        margin-bottom: 20px;
        display: flex;
        gap: 12px;
        align-items: center;
    }

    .client-table-container {
        overflow-x: auto;
    }

    .client-table {
        width: 100%;
        border-collapse: collapse;
        background: white;
    }

    .client-table th,
    .client-table td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid #dee2e6;
    }

    .client-table th {
        background-color: #f8f9fa;
        font-weight: 600;
        color: #333;
        position: sticky;
        top: 0;
    }

    .client-row {
        transition: background-color 0.2s ease;
    }

    .client-row:hover {
        background-color: #f8f9fa;
    }

    .client-name {
        display: flex;
        align-items: center;
        gap: 8px;
        font-weight: 500;
    }

    .client-icon {
        opacity: 0.7;
    }

    .client-type-badge {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        gap: 4px;
    }

    .client-type-badge.new {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .client-type-badge.repeated {
        background-color: #d1ecf1;
        color: #0c5460;
        border: 1px solid #bee5eb;
    }

    .survey-count {
        font-weight: 600;
        color: #007bff;
    }

    .satisfaction-badge {
        padding: 4px 8px;
        border-radius: 8px;
        font-size: 0.85rem;
        font-weight: 600;
        color: white;
    }

    .satisfaction-badge.excellent {
        background-color: #28a745;
    }

    .satisfaction-badge.good {
        background-color: #17a2b8;
    }

    .satisfaction-badge.average {
        background-color: #ffc107;
        color: #333;
    }

    .satisfaction-badge.poor {
        background-color: #dc3545;
    }

    .no-client-data {
        text-align: center;
        padding: 40px;
        color: #666;
        font-size: 1.1rem;
        background: #f8f9fa;
        border-radius: 12px;
        border: 2px dashed #dee2e6;
    }
</style>

<!--
.goal-line {
    z-index: 3;
    border-radius: 3px;
    width: 4px !important;
    background: #00e676 !important;
    box-shadow: 0 0 10px 2px #00e676, 0 0 2px 1px #fff;
    opacity: 1 !important;
} -->

@code {
    List<SurveyResponse> surveyResponses = new List<SurveyResponse>();
    bool isLoading = true;
    Dictionary<string, int> sectorCounts = new Dictionary<string, int>();
    Dictionary<string, int> companySizeCounts = new Dictionary<string, int>();
    Dictionary<string, double> sectorAverages = new Dictionary<string, double>();
    Dictionary<string, double> companySizeAverages = new Dictionary<string, double>();
    double avgSatisfaction = 0;
    
    private string aiView = "insights";
    private bool isLoadingAI = false;
    private AIInsights? currentAIInsights;
    private AIRecommendations? currentAIRecommendations;
    private AIPredictions? currentAIPredictions;
    
    // Chat
    private List<ChatMessage> chatHistory = new();
    private string chatInput = "";
    private bool isProcessingChat = false;
    
    // Trend insights
    private string? aiTrendAnalysis;
    private string? aiServiceQualityInsight;
    private bool isLoadingTrendInsights = false;
    
    // AI Predictions
    private List<ForecastDataPoint>? forecastData;
    private string? databaseAnalysis;
    private bool isLoadingForecast = false;
    private bool isLoadingDatabaseAnalysis = false;
    private int hoveredForecastPoint = -1;
    
    public class ChatMessage
    {
        public string Text { get; set; } = "";
        public bool IsUser { get; set; }
        public DateTime Timestamp { get; set; }
    }

    public class ForecastDataPoint
    {
        public DateTime Date { get; set; }
        public double PredictedScore { get; set; }
        public double ConfidenceInterval { get; set; }
        public string Period { get; set; } = string.Empty;
    }

    string selectedSectorFilter = "all";
    string selectedCompanySizeFilter = "all";
    string chartView = "count";
    string detailView = "cards";
    string? selectedSector = null;
    string? selectedTableRow = null;
    string? hoveredSector = null;
    string? hoveredMiniBar = null;
    int? selectedQuestion = null;
    int? hoveredPoint = null;
    
    // Trends
    string trendsView = "monthly";
    int? selectedTrendPoint = null;
    
    // Client analytics
    string clientView = "yearly";
    string? selectedClientPeriod = null;
    string selectedClientFilter = "all";
    
    string? selectedCustomer = null;
    string? selectedProject = null;
    string currentNavigationLevel = "sectors";
    
    HashSet<string> expandedSectors = new HashSet<string>();
    HashSet<string> expandedSectorCards = new HashSet<string>();
    
    string sortColumn = "sector";
    bool sortAscending = true;
    
    string userRole = "";

    DateTime? GetLastUpdatedDate()
    {
        var dates = surveyResponses
            .SelectMany(r => new[] { r.DateCompleted, r.DateSent })
            .Where(d => d.HasValue)
            .Select(d => d.Value)
            .ToList();

        return dates.Any() ? dates.Max() : (DateTime?)null;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            var roleClaim = authState.User.FindFirst("Role");
            userRole = roleClaim?.Value ?? "";
        }
        
        await LoadSurveyData();
        InitializeAIState();
    }

    async Task LoadSurveyData()
    {
        isLoading = true;
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<SurveyResponse>>("api/survey/responses");
            surveyResponses = response ?? new List<SurveyResponse>();
            
            CalculateStatistics();
            
            await LoadTrendInsights();
            await LoadForecastData();
            await LoadDatabaseAnalysis();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading survey data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    // AI Methods
    private void SetAIView(string view)
    {
        aiView = view;
        StateHasChanged();
    }
    
    private async Task LoadAIAnalysis()
    {
        isLoadingAI = true;
        StateHasChanged();
        
        try
        {
            using var client = new HttpClient();
            client.BaseAddress = new Uri("http://localhost:5123/");
            
            var insightsResponse = await client.GetFromJsonAsync<AIInsights>("api/ai/insights");
            currentAIInsights = insightsResponse;
            
            var recommendationsResponse = await client.GetFromJsonAsync<AIRecommendations>("api/ai/recommendations");
            currentAIRecommendations = recommendationsResponse;
            
            var predictionsResponse = await client.GetFromJsonAsync<AIPredictions>("api/ai/predictions");
            currentAIPredictions = predictionsResponse;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"AI Analysis error: {ex.Message}");
        }
        finally
        {
            isLoadingAI = false;
            StateHasChanged();
        }
    }
    
    private async Task RefreshAIAnalysis()
    {
        await LoadAIAnalysis();
    }
    
    private void InitializeAIState()
    {
        currentAIInsights = null;
        currentAIRecommendations = null;
        currentAIPredictions = null;
        chatHistory = new List<ChatMessage>
        {
            new ChatMessage
            {
                Text = "üëã Hi! I'm your AI assistant. I can help analyze your survey data, provide insights, and answer questions. Try asking me something like 'What sectors have the lowest satisfaction?' or click 'Refresh AI Analysis' to get started!",
                IsUser = false,
                Timestamp = DateTime.Now
            }
        };
    }
    
    private async Task LoadTrendInsights()
    {
        if (isLoadingTrendInsights) return;
        
        isLoadingTrendInsights = true;
        StateHasChanged();
        
        try
        {
            using var client = new HttpClient();
            client.BaseAddress = new Uri("http://localhost:5123/");
            
            // Load trend analysis from AI
            var trendTask = client.GetStringAsync("api/ai/trend-analysis");
            
            // Load service quality insight from AI
            var qualityTask = client.GetStringAsync("api/ai/service-quality");
            
            await Task.WhenAll(trendTask, qualityTask);
            
            aiTrendAnalysis = await trendTask;
            aiServiceQualityInsight = await qualityTask;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading trend insights: {ex.Message}");
            aiTrendAnalysis = "Unable to load AI trend analysis at this time.";
            aiServiceQualityInsight = "Unable to load AI service quality insight at this time.";
        }
        finally
        {
            isLoadingTrendInsights = false;
            StateHasChanged();
        }
    }
    
    private async Task LoadForecastData()
    {
        if (isLoadingForecast) return;
        
        isLoadingForecast = true;
        StateHasChanged();
        
        try
        {
            using var client = new HttpClient();
            client.BaseAddress = new Uri("http://localhost:5123/");
            
            var response = await client.GetFromJsonAsync<List<ForecastDataPoint>>("api/ai/forecast?monthsAhead=6");
            forecastData = response ?? new List<ForecastDataPoint>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading forecast data: {ex.Message}");
            forecastData = new List<ForecastDataPoint>();
        }
        finally
        {
            isLoadingForecast = false;
            StateHasChanged();
        }
    }
    
    private async Task LoadDatabaseAnalysis()
    {
        if (isLoadingDatabaseAnalysis) return;
        
        isLoadingDatabaseAnalysis = true;
        StateHasChanged();
        
        try
        {
            using var client = new HttpClient();
            client.BaseAddress = new Uri("http://localhost:5123/");
            
            databaseAnalysis = await client.GetStringAsync("api/ai/database-analysis");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading database analysis: {ex.Message}");
            databaseAnalysis = "Unable to load comprehensive database analysis at this time.";
        }
        finally
        {
            isLoadingDatabaseAnalysis = false;
            StateHasChanged();
        }
    }
    
    private async Task SendChatMessage()
    {
        if (string.IsNullOrWhiteSpace(chatInput)) return;
        
        var userMessage = new ChatMessage
        {
            Text = chatInput,
            IsUser = true,
            Timestamp = DateTime.Now
        };
        
        chatHistory.Add(userMessage);
        var queryText = chatInput;
        chatInput = "";
        isProcessingChat = true;
        StateHasChanged();
        
        try
        {
            using var client = new HttpClient();
            client.BaseAddress = new Uri("http://localhost:5123/");
            
            var query = new ChatQuery { Query = queryText };
            var response = await client.PostAsJsonAsync("api/ai/chat", query);
            var chatResponse = await response.Content.ReadFromJsonAsync<ChatResponse>();
            
            var aiMessage = new ChatMessage
            {
                Text = chatResponse?.Response ?? "Sorry, I couldn't process your request.",
                IsUser = false,
                Timestamp = DateTime.Now
            };
            
            chatHistory.Add(aiMessage);
        }
        catch (Exception ex)
        {
            var errorMessage = new ChatMessage
            {
                Text = "Sorry, I'm having trouble processing your request right now.",
                IsUser = false,
                Timestamp = DateTime.Now
            };
            chatHistory.Add(errorMessage);
        }
        finally
        {
            isProcessingChat = false;
            StateHasChanged();
        }
    }
    
    private async Task HandleChatKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendChatMessage();
        }
    }
    
    // AI Helper Methods
    private string GetSentimentIcon(string sentiment)
    {
        return sentiment.ToLower() switch
        {
            "positive" => "üòä",
            "negative" => "üòü",
            "neutral" => "üòê",
            _ => "ü§î"
        };
    }
    
    private string GetTrendClass(string trend)
    {
        return trend.ToLower() switch
        {
            "upward" => "trend-up",
            "downward" => "trend-down",
            "stable" => "trend-stable",
            _ => "trend-neutral"
        };
    }
    
    private string GetTrendIcon(string trend)
    {
        return trend.ToLower() switch
        {
            "upward" => "üìà",
            "downward" => "üìâ", 
            "stable" => "‚û°Ô∏è",
            _ => "‚ùì"
        };
    }

    void CalculateStatistics()
    {
        if (!surveyResponses.Any()) return;

        // Calculate sector counts
        sectorCounts = surveyResponses
            .GroupBy(r => r.Sector)
            .ToDictionary(g => g.Key, g => g.Count());

        // Calculate company size counts
        companySizeCounts = surveyResponses
            .Where(r => !string.IsNullOrEmpty(r.CompanySize))
            .GroupBy(r => r.CompanySize)
            .ToDictionary(g => g.Key, g => g.Count());

        // Calculate sector averages for overall satisfaction
        sectorAverages = surveyResponses
            .GroupBy(r => r.Sector)
            .ToDictionary(g => g.Key, g => g.Average(r => r.Question1));

        // Calculate company size averages for overall satisfaction
        companySizeAverages = surveyResponses
            .Where(r => !string.IsNullOrEmpty(r.CompanySize))
            .GroupBy(r => r.CompanySize)
            .ToDictionary(g => g.Key, g => g.Average(r => r.Question1));

        // Calculate overall average satisfaction
        avgSatisfaction = surveyResponses.Average(r => r.Question1);
    }

    List<string> GetUniqueSectors()
    {
        return surveyResponses
            .Select(r => r.Sector)
            .Where(s => !string.IsNullOrEmpty(s))
            .Distinct()
            .OrderBy(s => s)
            .ToList();
    }

    List<string> GetUniqueCompanySizes()
    {
        return surveyResponses
            .Select(r => r.CompanySize)
            .Where(s => !string.IsNullOrEmpty(s))
            .Distinct()
            .OrderBy(s => s)
            .ToList();
    }

    void SetFilter(string filter)
    {
        StateHasChanged();
    }

    void SetChartView(string view)
    {
        chartView = view;
        StateHasChanged();
    }

    void SetDetailView(string view)
    {
        detailView = view;
        StateHasChanged();
    }

    void SetTrendsView(string view)
    {
        trendsView = view;
        selectedTrendPoint = null;
        StateHasChanged();
    }

    void SelectSector(string sector)
    {
        selectedSector = selectedSector == sector ? null : sector;
        StateHasChanged();
    }

    void SelectTableRow(string sector)
    {
        selectedTableRow = selectedTableRow == sector ? null : sector;
        StateHasChanged();
    }

    void ToggleSectorDetails(string sector)
    {
        if (expandedSectors.Contains(sector))
            expandedSectors.Remove(sector);
        else
            expandedSectors.Add(sector);
        StateHasChanged();
    }

    void ToggleSectorCard(string sector)
    {
        if (expandedSectorCards.Contains(sector))
            expandedSectorCards.Remove(sector);
        else
            expandedSectorCards.Add(sector);
        StateHasChanged();
    }

    void NavigateToCustomers(string sector)
    {
        // Check roles for detailed analysis access
        if (userRole != "Admin")
        {
            var allowedSectors = GetRoleBasedSectors().Keys;
            if (!allowedSectors.Contains(sector))
            {
                // User doesn't have access to this sector in detailed analysis
                return; 
            }
        }
        
        selectedSector = sector;
        currentNavigationLevel = "customers";
        selectedCustomer = null;
        selectedProject = null;
        StateHasChanged();
    }

    void NavigateToProjects(string customer)
    {
        selectedCustomer = customer;
        currentNavigationLevel = "projects";
        selectedProject = null;
        StateHasChanged();
    }

    void NavigateToAnalysis(string project)
    {
        selectedProject = project;
        currentNavigationLevel = "analysis";
        StateHasChanged();
    }

    void NavigateBack()
    {
        if (currentNavigationLevel == "analysis")
        {
            currentNavigationLevel = "projects";
            selectedProject = null;
        }
        else if (currentNavigationLevel == "projects")
        {
            currentNavigationLevel = "customers";
            selectedCustomer = null;
        }
        else if (currentNavigationLevel == "customers")
        {
            currentNavigationLevel = "sectors";
            selectedSector = null;
        }
        StateHasChanged();
    }

    void ToggleQuestion(int question)
    {
        selectedQuestion = selectedQuestion == question ? null : question;
        StateHasChanged();
    }

    void SelectQuestionPoint(int question)
    {
        selectedQuestion = selectedQuestion == question ? null : question;
        StateHasChanged();
    }

    void SelectTrendPoint(int index)
    {
        selectedTrendPoint = selectedTrendPoint == index ? null : index;
        StateHasChanged();
    }

    void HandleLineChartClick()
    {
    }

    void ScrollToSection(string sectionId)
    {
        // Maybe I should add some javascript later???
        StateHasChanged();
    }

    void SortTable(string column)
    {
        if (sortColumn == column)
            sortAscending = !sortAscending;
        else
        {
            sortColumn = column;
            sortAscending = true;
        }
        StateHasChanged();
    }

    Dictionary<string, int> GetFilteredSectors()
    {
        return sectorCounts;
    }

    Dictionary<string, int> GetRoleBasedSectors()
    {
        if (userRole == "Admin")
            return sectorCounts;

        if (userRole == "Health")
            return sectorCounts.Where(kvp => kvp.Key == "Health").ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
        else if (userRole == "Tech")
            return sectorCounts.Where(kvp => kvp.Key == "Tech").ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
        else if (userRole == "Energy")
            return sectorCounts.Where(kvp => kvp.Key == "Energy").ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
        
        return sectorCounts;
    }

    int GetCompletedCountForSector(string sector)
    {
        return surveyResponses.Count(r => r.Sector == sector && r.DateCompleted.HasValue);
    }

    int GetCompletedCountForCompanySize(string companySize)
    {
        return surveyResponses.Count(r => r.CompanySize == companySize && r.DateCompleted.HasValue);
    }

    Dictionary<string, int> GetFilteredCompanySizes()
    {
        return companySizeCounts;
    }

    double GetCompanySizeAverage(string companySize)
    {
        var responses = surveyResponses.Where(r => r.CompanySize == companySize).ToList();
        if (!responses.Any()) return 0;
        return responses.Average(r => r.Question1);
    }

    Dictionary<string, double> GetCombinedFilteredSatisfactionData()
    {
        var filteredResponses = GetCombinedFilteredResponses();
        
        var groupedData = new Dictionary<string, List<SurveyResponse>>();
        
        if (selectedSectorFilter != "all" && selectedCompanySizeFilter != "all")
        {
            var key = $"{selectedSectorFilter} - {selectedCompanySizeFilter}";
            groupedData[key] = filteredResponses.ToList();
        }
        else if (selectedSectorFilter != "all")
        {
            groupedData = filteredResponses
                .Where(r => !string.IsNullOrEmpty(r.CompanySize))
                .GroupBy(r => $"{selectedSectorFilter} - {r.CompanySize}")
                .ToDictionary(g => g.Key, g => g.ToList());
        }
        else if (selectedCompanySizeFilter != "all")
        {
            groupedData = filteredResponses
                .Where(r => !string.IsNullOrEmpty(r.Sector))
                .GroupBy(r => $"{r.Sector} - {selectedCompanySizeFilter}")
                .ToDictionary(g => g.Key, g => g.ToList());
        }
        else
        {
            groupedData = filteredResponses
                .Where(r => !string.IsNullOrEmpty(r.Sector))
                .GroupBy(r => r.Sector)
                .ToDictionary(g => g.Key, g => g.ToList());
        }
        
        return groupedData
            .Where(kvp => kvp.Value.Any())
            .ToDictionary(kvp => kvp.Key, kvp => kvp.Value.Average(r => r.Question1));
    }

    List<SurveyResponse> GetCombinedFilteredResponses()
    {
        var responses = GetRoleBasedResponses();

        if (selectedSectorFilter != "all")
        {
            responses = responses.Where(r => r.Sector == selectedSectorFilter).ToList();
        }

        if (selectedCompanySizeFilter != "all")
        {
            responses = responses.Where(r => r.CompanySize == selectedCompanySizeFilter).ToList();
        }

        return responses;
    }

    List<SurveyResponse> GetRoleBasedResponses()
    {
        // Admin can see all responses
        if (userRole == "Admin")
            return surveyResponses;
        
        // Filter responses by user role
        if (userRole == "Health" || userRole == "Tech" || userRole == "Energy")
            return surveyResponses.Where(r => r.Sector == userRole).ToList();
        
        return surveyResponses;
    }

    List<string> GetCustomersForSector(string sector)
    {
        return GetRoleBasedResponses()
            .Where(r => r.Sector == sector)
            .Select(r => r.CustomerName)
            .Distinct()
            .OrderBy(c => c)
            .ToList();
    }

    List<string> GetProjectsForCustomer(string sector, string customer)
    {
        return GetRoleBasedResponses()
            .Where(r => r.Sector == sector && r.CustomerName == customer)
            .Select(r => r.ProjectName)
            .Distinct()
            .OrderBy(p => p)
            .ToList();
    }

    List<SurveyResponse> GetProjectResponses(string sector, string customer, string project)
    {
        return GetRoleBasedResponses()
            .Where(r => r.Sector == sector && r.CustomerName == customer && r.ProjectName == project)
            .ToList();
    }

    int GetQuestionScore(SurveyResponse response, int questionNumber)
    {
        return questionNumber switch
        {
            1 => response.Question1,
            2 => response.Question2,
            3 => response.Question3,
            4 => response.Question4,
            5 => response.Question5,
            6 => response.Question6,
            7 => response.Question7,
            8 => response.Question8,
            9 => response.Question9,
            _ => 0
        };
    }

    IEnumerable<string> GetSortedSectors()
    {
        var sectors = sectorCounts.Keys.AsEnumerable();
        
        sectors = sortColumn switch
        {
            "sector" => sortAscending ? sectors.OrderBy(s => s) : sectors.OrderByDescending(s => s),
            "responses" => sortAscending ? sectors.OrderBy(s => sectorCounts[s]) : sectors.OrderByDescending(s => sectorCounts[s]),
            "satisfaction" => sortAscending ? sectors.OrderBy(s => GetSectorAverage(s, "satisfaction")) : sectors.OrderByDescending(s => GetSectorAverage(s, "satisfaction")),
            "professionalism" => sortAscending ? sectors.OrderBy(s => GetSectorAverage(s, "professionalism")) : sectors.OrderByDescending(s => GetSectorAverage(s, "professionalism")),
            "growth" => sortAscending ? sectors.OrderBy(s => GetSectorAverage(s, "growth")) : sectors.OrderByDescending(s => GetSectorAverage(s, "growth")),
            "value" => sortAscending ? sectors.OrderBy(s => GetSectorAverage(s, "value")) : sectors.OrderByDescending(s => GetSectorAverage(s, "value")),
            "likelihood" => sortAscending ? sectors.OrderBy(s => GetSectorAverage(s, "likelihood")) : sectors.OrderByDescending(s => GetSectorAverage(s, "likelihood")),
            _ => sectors
        };
        
        return sectors;
    }

    string GetSortIcon(string column)
    {
        if (sortColumn != column) return "‚ÜïÔ∏è";
        return sortAscending ? "‚¨ÜÔ∏è" : "‚¨áÔ∏è";
    }

    double GetSectorAverage(string sector, string type)
    {
        var sectorResponses = surveyResponses.Where(r => r.Sector == sector);
        if (!sectorResponses.Any()) return 0;
        
        return type switch
        {
            "satisfaction" => sectorResponses.Average(r => r.Question1),
            "professionalism" => sectorResponses.Average(r => r.Question2),
            "growth" => sectorResponses.Average(r => r.Question3),
            "value" => sectorResponses.Average(r => r.Question4),
            "likelihood" => sectorResponses.Average(r => r.Question9),
            _ => 0
        };
    }

    int GetBestQuestion(string sector)
    {
        var sectorResponses = surveyResponses.Where(r => r.Sector == sector).ToList();
        if (!sectorResponses.Any()) return 1;
        
        var averages = new Dictionary<int, double>();
        for (int q = 1; q <= 9; q++)
        {
            averages[q] = GetSectorQuestionAverage(sector, q);
        }
        
        return averages.OrderByDescending(kvp => kvp.Value).First().Key;
    }

    double GetBestQuestionScore(string sector)
    {
        return GetSectorQuestionAverage(sector, GetBestQuestion(sector));
    }

    int GetWorstQuestion(string sector)
    {
        var sectorResponses = surveyResponses.Where(r => r.Sector == sector).ToList();
        if (!sectorResponses.Any()) return 1;
        
        var averages = new Dictionary<int, double>();
        for (int q = 1; q <= 9; q++)
        {
            averages[q] = GetSectorQuestionAverage(sector, q);
        }
        
        return averages.OrderBy(kvp => kvp.Value).First().Key;
    }

    double GetWorstQuestionScore(string sector)
    {
        return GetSectorQuestionAverage(sector, GetWorstQuestion(sector));
    }

    string GetSectorShortName(string sector)
    {
        return sector switch
        {
            "Tech & Digitalization" => "Tech",
            "Health" => "Health",
            "Energy" => "Energy",
            _ => sector
        };
    }

    string GetSectorIcon(string sector)
    {
        return sector switch
        {
            "Health" => "üè•",
            "Tech & Digitalization" => "üíª",
            "Energy" => "‚ö°",
            _ => "üè¢"
        };
    }

    string GetSatisfactionEmoji(double satisfaction)
    {
        return satisfaction switch
        {
            >= 9 => "ü§©",
            >= 8 => "üòç",
            >= 7 => "üòä",
            >= 6 => "üôÇ",
            >= 5 => "üòê",
            >= 4 => "üòï",
            >= 3 => "üòû",
            _ => "üò¢"
        };
    }

    string GetQuestionText(int question)
    {
        return question switch
        {
            1 => "Overall Satisfaction",
            2 => "Professionalism",
            3 => "Growth Impact",
            4 => "Value for Money",
            5 => "Solution Fit",
            6 => "Communication",
            7 => "Timeliness",
            8 => "Advisor Expertise",
            9 => "Future Use Likelihood",
            _ => $"Question {question}"
        };
    }

    string GetQuestionCategory(double avg)
    {
        return avg switch
        {
            >= 8 => "Excellent",
            >= 6 => "Good",
            >= 4 => "Average",
            _ => "Needs Improvement"
        };
    }

    string GetSectorColor(string sector)
    {
        return sector switch
        {
            "Health" => "#ff6b6b",
            "Tech & Digitalization" => "#4ecdc4",
            "Energy" => "#45b7d1",
            _ => "#95a5a6"
        };
    }

    string GetSectorColorDark(string sector)
    {
        return sector switch
        {
            "Health" => "#e74c3c",
            "Tech & Digitalization" => "#16a085",
            "Energy" => "#2980b9",
            _ => "#7f8c8d"
        };
    }

    string GetCompanySizeIcon(string companySize)
    {
        return companySize switch
        {
            "Micro" => "üè™",
            "SME" => "üè¢",
            "Large" => "üè≠",
            _ => "üë•"
        };
    }

    string GetCompanySizeColor(string companySize)
    {
        return companySize switch
        {
            "Micro" => "#f39c12",
            "SME" => "#3498db", 
            "Large" => "#9b59b6",
            _ => "#95a5a6"
        };
    }

    string GetCompanySizeColorDark(string companySize)
    {
        return companySize switch
        {
            "Micro" => "#e67e22",
            "SME" => "#2980b9",
            "Large" => "#8e44ad",
            _ => "#7f8c8d"
        };
    }

    double GetQuestionAverage(int questionNumber)
    {
        if (!surveyResponses.Any()) return 0;
        
        return questionNumber switch
        {
            1 => surveyResponses.Average(r => r.Question1),
            2 => surveyResponses.Average(r => r.Question2),
            3 => surveyResponses.Average(r => r.Question3),
            4 => surveyResponses.Average(r => r.Question4),
            5 => surveyResponses.Average(r => r.Question5),
            6 => surveyResponses.Average(r => r.Question6),
            7 => surveyResponses.Average(r => r.Question7),
            8 => surveyResponses.Average(r => r.Question8),
            9 => surveyResponses.Average(r => r.Question9),
            _ => 0
        };
    }

    double GetSectorQuestionAverage(string sector, int questionNumber)
    {
        var sectorResponses = surveyResponses.Where(r => r.Sector == sector);
        if (!sectorResponses.Any()) return 0;
        
        return questionNumber switch
        {
            1 => sectorResponses.Average(r => r.Question1),
            2 => sectorResponses.Average(r => r.Question2),
            3 => sectorResponses.Average(r => r.Question3),
            4 => sectorResponses.Average(r => r.Question4),
            5 => sectorResponses.Average(r => r.Question5),
            6 => sectorResponses.Average(r => r.Question6),
            7 => sectorResponses.Average(r => r.Question7),
            8 => sectorResponses.Average(r => r.Question8),
            9 => sectorResponses.Average(r => r.Question9),
            _ => 0
        };
    }

    string GetLinePoints()
    {
        var points = new List<string>();
        for (int q = 1; q <= 9; q++)
        {
            var x = (q - 1) * 12.5;
            var y = 100 - (GetQuestionAverage(q) / 10 * 100);
            points.Add($"{x},{y}");
        }
        return string.Join(" ", points);
    }

    // Trend Analysis Methods
    public class TrendDataPoint
    {
        public double Score { get; set; }
        public string Period { get; set; } = "";
        public string ShortPeriod { get; set; } = "";
        public DateTime Date { get; set; }
        public int ResponseCount { get; set; }
    }

    IEnumerable<TrendDataPoint> GetTrendData()
    {
        var completedResponses = surveyResponses.Where(r => r.DateCompleted.HasValue).ToList();
        
        if (!completedResponses.Any()) return new List<TrendDataPoint>();

        var groupedData = trendsView switch
        {
            "quarterly" => GroupByQuarters(completedResponses),
            "yearly" => GroupByYears(completedResponses),
            _ => GroupByMonths(completedResponses) // default = monthly
        };

        return groupedData.OrderBy(t => t.Date);
    }

    IEnumerable<TrendDataPoint> GroupByMonths(List<SurveyResponse> responses)
    {
        return responses
            .GroupBy(r => new { r.DateCompleted!.Value.Year, r.DateCompleted!.Value.Month })
            .Select(g => new TrendDataPoint
            {
                Score = Math.Round(g.Average(r => r.Question1), 1),
                Period = $"{GetMonthName(g.Key.Month)} {g.Key.Year}",
                ShortPeriod = $"{GetMonthName(g.Key.Month).Substring(0, 3)} '{g.Key.Year.ToString().Substring(2)}",
                Date = new DateTime(g.Key.Year, g.Key.Month, 1),
                ResponseCount = g.Count()
            })
            .OrderBy(t => t.Date);
    }

    IEnumerable<TrendDataPoint> GroupByQuarters(List<SurveyResponse> responses)
    {
        return responses
            .GroupBy(r => new { r.DateCompleted!.Value.Year, Quarter = (r.DateCompleted!.Value.Month - 1) / 3 + 1 })
            .Select(g => new TrendDataPoint
            {
                Score = Math.Round(g.Average(r => r.Question1), 1),
                Period = $"Q{g.Key.Quarter} {g.Key.Year}",
                ShortPeriod = $"Q{g.Key.Quarter} '{g.Key.Year.ToString().Substring(2)}",
                Date = new DateTime(g.Key.Year, (g.Key.Quarter - 1) * 3 + 1, 1),
                ResponseCount = g.Count()
            })
            .OrderBy(t => t.Date);
    }

    IEnumerable<TrendDataPoint> GroupByYears(List<SurveyResponse> responses)
    {
        return responses
            .GroupBy(r => r.DateCompleted!.Value.Year)
            .Select(g => new TrendDataPoint
            {
                Score = Math.Round(g.Average(r => r.Question1), 1),
                Period = g.Key.ToString(),
                ShortPeriod = g.Key.ToString(),
                Date = new DateTime(g.Key, 1, 1),
                ResponseCount = g.Count()
            })
            .OrderBy(t => t.Date);
    }

    IEnumerable<TrendDataPoint> GetSectorTrendData(string sector)
    {
        var sectorResponses = surveyResponses.Where(r => r.Sector == sector && r.DateCompleted.HasValue).ToList();
        
        if (!sectorResponses.Any()) return new List<TrendDataPoint>();

        var groupedData = trendsView switch
        {
            "quarterly" => GroupByQuarters(sectorResponses),
            "yearly" => GroupByYears(sectorResponses),
            _ => GroupByMonths(sectorResponses)
        };

        return groupedData.OrderBy(t => t.Date);
    }

    string GetTrendDirection()
    {
        var data = GetTrendData().ToList();
        if (data.Count < 2) return "stable";

        // Compare latest with previous data point
        var latestScore = data.Last().Score;
        var previousScore = data[data.Count - 2].Score;

        var diff = latestScore - previousScore;
        return diff > 0.2 ? "up" : diff < -0.2 ? "down" : "stable";
    }

    double GetTrendPercentage()
    {
        var data = GetTrendData().ToList();
        if (data.Count < 2) return 0;

        // Get the latest and previous data points
        var latestScore = data.Last().Score;
        var previousScore = data[data.Count - 2].Score;

        if (previousScore == 0) return 0;
        return Math.Round(((latestScore - previousScore) / previousScore) * 100, 1);
    }

    TrendDataPoint GetHighestPeriod()
    {
        var data = GetTrendData().ToList();
        return data.Any() ? data.OrderByDescending(t => t.Score).First() : new TrendDataPoint();
    }

    TrendDataPoint GetLowestPeriod()
    {
        var data = GetTrendData().ToList();
        return data.Any() ? data.OrderBy(t => t.Score).First() : new TrendDataPoint();
    }

    string GetTrendAnalysis()
    {
        var data = GetTrendData().ToList();
        if (data.Count < 2) return "Insufficient data for trend analysis.";

        var direction = GetTrendDirection();
        var percentage = Math.Abs(GetTrendPercentage());

        return direction switch
        {
            "up" => $"Your satisfaction scores are trending upward by {percentage}%, indicating improving service quality and customer relationships.",
            "down" => $"Your satisfaction scores are declining by {percentage}%. Consider reviewing recent service delivery and customer feedback.",
            _ => "Your satisfaction scores remain stable. Maintain current service standards to ensure continued customer satisfaction."
        };
    }

    List<string> GetRecurringChallenges()
    {
        var challenges = new List<string>();
        var data = GetTrendData().ToList();
        
        if (data.Count < 3) return challenges;

        var lowPeriods = data.Where(t => t.Score < 6).Count();
        if (lowPeriods > data.Count * 0.3)
        {
            challenges.Add("Recurring low satisfaction periods");
        }

        var recentData = data.TakeLast(5).ToList();
        if (recentData.Count >= 3)
        {
            var isDeclinig = true;
            for (int i = 1; i < recentData.Count; i++)
            {
                if (recentData[i].Score >= recentData[i - 1].Score)
                {
                    isDeclinig = false;
                    break;
                }
            }
            if (isDeclinig) challenges.Add("Recent declining trend");
        }

        return challenges;
    }

    string GetServiceQualityInsight()
    {
        var avgScore = GetTrendData().Any() ? GetTrendData().Average(t => t.Score) : 0;
        
        return avgScore switch
        {
            >= 8.5 => "Outstanding service quality - customers are highly satisfied!",
            >= 7.5 => "Good service quality - customers are generally satisfied.",
            >= 6.5 => "Acceptable service quality - room for improvement exists.",
            >= 5.5 => "Below average service quality - attention needed.",
            _ => "Service quality needs significant improvement - priority action required."
        };
    }

    int GetPeriodResponseCount(string period)
    {
        var data = GetTrendData().FirstOrDefault(t => t.Period == period);
        return data?.ResponseCount ?? 0;
    }

    string GetMonthName(int month)
    {
        return new DateTime(2000, month, 1).ToString("MMMM");
    }

    string GetTrendLinePath(List<TrendDataPoint> data)
    {
        if (data.Count < 2) return "";
        
        var points = data.Select((point, index) => {
            var x = data.Count > 1 ? (index * 100.0 / (data.Count - 1)) : 50;
            var y = 100 - (point.Score / 10.0) * 100;
            return $"{x}% {y}%";
        });
        
        return $"clip-path: polygon({string.Join(", ", points)});";
    }

    string GetTrendAreaPath(List<TrendDataPoint> data)
    {
        if (data.Count < 2) return "";
        
        var topPoints = data.Select((point, index) => {
            var x = data.Count > 1 ? (index * 100.0 / (data.Count - 1)) : 50;
            var y = 100 - (point.Score / 10.0) * 100;
            return $"{x}% {y}%";
        });
        
        var bottomPoints = data.Select((point, index) => {
            var x = data.Count > 1 ? (index * 100.0 / (data.Count - 1)) : 50;
            return $"{x}% 100%";
        }).Reverse();
        
        return $"clip-path: polygon({string.Join(", ", topPoints)}, {string.Join(", ", bottomPoints)});";
    }

    string GetScoreCategory(double score)
    {
        return score switch
        {
            >= 8 => "Excellent",
            >= 6 => "Good", 
            >= 4 => "Average",
            _ => "Poor"
        };
    }

    // Forecast chart methods
    string GetForecastLinePath(List<ForecastDataPoint> data)
    {
        if (data.Count < 2) return "";
        
        var points = data.Select((point, index) => {
            var x = data.Count > 1 ? (index * 100.0 / (data.Count - 1)) : 50;
            var y = 100 - (point.PredictedScore / 10.0) * 100;
            return $"{x}% {y}%";
        });
        
        return $"clip-path: polygon({string.Join(", ", points)});";
    }

    string GetForecastAreaPath(List<ForecastDataPoint> data)
    {
        if (data.Count < 2) return "";
        
        var topPoints = data.Select((point, index) => {
            var x = data.Count > 1 ? (index * 100.0 / (data.Count - 1)) : 50;
            var y = 100 - ((point.PredictedScore + point.ConfidenceInterval) / 10.0) * 100;
            return $"{x}% {y}%";
        });
        
        var bottomPoints = data.Select((point, index) => {
            var x = data.Count > 1 ? (index * 100.0 / (data.Count - 1)) : 50;
            var y = 100 - ((point.PredictedScore - point.ConfidenceInterval) / 10.0) * 100;
            return $"{x}% {y}%";
        }).Reverse();
        
        return $"clip-path: polygon({string.Join(", ", topPoints)}, {string.Join(", ", bottomPoints)});";
    }

    void ClearAllFilters()
    {
        selectedSectorFilter = "all";
        selectedCompanySizeFilter = "all";
        StateHasChanged();
    }

    void SelectItem(string itemKey)
    {
        selectedSector = itemKey;
        StateHasChanged();
    }

    string GetItemIcon(string itemKey)
    {
        if (itemKey.Contains(" - "))
        {
            var parts = itemKey.Split(" - ");
            if (parts.Length == 2)
            {
                return "üè¢üè≠";
            }
        }
        
        var sectors = GetUniqueSectors();
        if (sectors.Contains(itemKey))
        {
            return GetSectorIcon(itemKey);
        }
        
        var companySizes = GetUniqueCompanySizes();
        if (companySizes.Contains(itemKey))
        {
            return GetCompanySizeIcon(itemKey);
        }
        
        return "üìä";
    }

    string GetItemColor(string itemKey)
    {
        if (itemKey.Contains(" - "))
        {
            var parts = itemKey.Split(" - ");
            if (parts.Length == 2)
            {
                return GetSectorColor(parts[0]);
            }
        }
        
        var sectors = GetUniqueSectors();
        if (sectors.Contains(itemKey))
        {
            return GetSectorColor(itemKey);
        }
        
        var companySizes = GetUniqueCompanySizes();
        if (companySizes.Contains(itemKey))
        {
            return GetCompanySizeColor(itemKey);
        }
        
        return "#95a5a6";
    }

    int GetFilteredResponseCount(string itemKey)
    {
        var responses = GetCombinedFilteredResponses();
        
        if (itemKey.Contains(" - "))
        {
            return responses.Count();
        }
        
        var sectors = GetUniqueSectors();
        var companySizes = GetUniqueCompanySizes();
        
        if (sectors.Contains(itemKey))
        {
            return responses.Where(r => r.Sector == itemKey).Count();
        }
        
        if (companySizes.Contains(itemKey))
        {
            return responses.Where(r => r.CompanySize == itemKey).Count();
        }
        
        return responses.Count();
    }

    // Client Analytics Methods
    public class ClientAnalyticsData
    {
        public string Period { get; set; } = "";
        public string ShortPeriod { get; set; } = "";
        public DateTime Date { get; set; }
        public int NewClients { get; set; }
        public int RepeatedClients { get; set; }
    }

    public class ClientDetail
    {
        public string ClientName { get; set; } = "";
        public bool IsRepeatedClient { get; set; }
        public DateTime? FirstSurveyDate { get; set; }
        public DateTime? LatestSurveyDate { get; set; }
        public int TotalSurveys { get; set; }
        public double AverageSatisfaction { get; set; }
    }

    void SetClientView(string view)
    {
        clientView = view;
        selectedClientPeriod = null;
        StateHasChanged();
    }

    void SelectClientPeriod(string period)
    {
        selectedClientPeriod = selectedClientPeriod == period ? null : period;
        StateHasChanged();
    }

    IEnumerable<ClientAnalyticsData> GetClientAnalytics()
    {
        var completedResponses = surveyResponses.Where(r => r.DateCompleted.HasValue).ToList();
        
        if (!completedResponses.Any()) return new List<ClientAnalyticsData>();

        return clientView switch
        {
            "monthly" => GroupClientsByMonths(completedResponses),
            _ => GroupClientsByYears(completedResponses)
        };
    }

    IEnumerable<ClientAnalyticsData> GroupClientsByYears(List<SurveyResponse> responses)
    {
        var yearGroups = responses.GroupBy(r => r.DateCompleted!.Value.Year);
        
        foreach (var yearGroup in yearGroups.OrderBy(g => g.Key))
        {
            var year = yearGroup.Key;
            var yearResponses = yearGroup.ToList();
            
            // Get all clients who had surveys in this year
            var clientsThisYear = yearResponses.Where(r => !string.IsNullOrEmpty(r.CustomerName)).Select(r => r.CustomerName).Distinct().ToList();
            
            // Which clients are new vs repeated?
            var newClients = 0;
            var repeatedClients = 0;
            
            foreach (var client in clientsThisYear)
            {
                // Find the first survey for this client (ever)
                var firstSurvey = surveyResponses
                    .Where(r => !string.IsNullOrEmpty(r.CustomerName) && r.CustomerName == client && r.DateCompleted.HasValue)
                    .OrderBy(r => r.DateCompleted!.Value)
                    .FirstOrDefault();
                
                if (firstSurvey != null)
                {
                    // Client is "new" only in the year of their first survey
                    if (firstSurvey.DateCompleted!.Value.Year == year)
                        newClients++;
                    else
                        repeatedClients++;
                }
            }
            
            yield return new ClientAnalyticsData
            {
                Period = year.ToString(),
                ShortPeriod = year.ToString(),
                Date = new DateTime(year, 1, 1),
                NewClients = newClients,
                RepeatedClients = repeatedClients
            };
        }
    }

    IEnumerable<ClientAnalyticsData> GroupClientsByMonths(List<SurveyResponse> responses)
    {
        var monthGroups = responses.GroupBy(r => new { r.DateCompleted!.Value.Year, r.DateCompleted!.Value.Month });
        
        foreach (var monthGroup in monthGroups.OrderBy(g => g.Key.Year).ThenBy(g => g.Key.Month))
        {
            var year = monthGroup.Key.Year;
            var month = monthGroup.Key.Month;
            var monthResponses = monthGroup.ToList();
            
            // Get all clients who had surveys in this month
            var clientsThisMonth = monthResponses.Where(r => !string.IsNullOrEmpty(r.CustomerName)).Select(r => r.CustomerName).Distinct().ToList();
            
            // Which clients are new vs repeated?
            var newClients = 0;
            var repeatedClients = 0;
            
            foreach (var client in clientsThisMonth)
            {
                // Find the first survey for this client (ever)
                var firstSurvey = surveyResponses
                    .Where(r => !string.IsNullOrEmpty(r.CustomerName) && r.CustomerName == client && r.DateCompleted.HasValue)
                    .OrderBy(r => r.DateCompleted!.Value)
                    .FirstOrDefault();
                
                if (firstSurvey != null)
                {
                    // Client is "new" only in the month of their first survey
                    if (firstSurvey.DateCompleted!.Value.Year == year && firstSurvey.DateCompleted.Value.Month == month)
                        newClients++;
                    else
                        repeatedClients++;
                }
            }
            
            yield return new ClientAnalyticsData
            {
                Period = $"{GetMonthName(month)} {year}",
                ShortPeriod = $"{GetMonthName(month).Substring(0, 3)} '{year.ToString().Substring(2)}",
                Date = new DateTime(year, month, 1),
                NewClients = newClients,
                RepeatedClients = repeatedClients
            };
        }
    }

    int GetTotalUniqueClients()
    {
        return surveyResponses.Where(r => !string.IsNullOrEmpty(r.CustomerName))
                            .Select(r => r.CustomerName)
                            .Distinct()
                            .Count();
    }

    int GetNewClientsForPeriod()
    {
        var currentDate = DateTime.Now;
        
        if (clientView == "yearly")
        {
            var currentYear = currentDate.Year;
            
            // Get all clients with surveys in current year and their survey counts
            var clientSurveyCounts = surveyResponses
                .Where(r => !string.IsNullOrEmpty(r.CustomerName) && r.DateCompleted.HasValue && r.DateCompleted.Value.Year == currentYear)
                .GroupBy(r => r.CustomerName)
                .ToDictionary(g => g.Key, g => g.Count());
            
            // Count clients with only 1 survey in current year as "new"
            return clientSurveyCounts.Count(kvp => kvp.Value == 1);
        }
        else // monthly
        {
            var currentMonth = currentDate.Month;
            var currentYear = currentDate.Year;
            
            // Get all clients with surveys in current month and their survey counts
            var clientSurveyCounts = surveyResponses
                .Where(r => !string.IsNullOrEmpty(r.CustomerName) && r.DateCompleted.HasValue && 
                           r.DateCompleted.Value.Year == currentYear && 
                           r.DateCompleted.Value.Month == currentMonth)
                .GroupBy(r => r.CustomerName)
                .ToDictionary(g => g.Key, g => g.Count());
            
            // Count clients with only 1 survey in current month as "new"
            return clientSurveyCounts.Count(kvp => kvp.Value == 1);
        }
    }

    int GetRepeatedClientsForPeriod()
    {
        var currentDate = DateTime.Now;
        
        if (clientView == "yearly")
        {
            var currentYear = currentDate.Year;
            
            // Get all clients with surveys in current year and their survey counts
            var clientSurveyCounts = surveyResponses
                .Where(r => !string.IsNullOrEmpty(r.CustomerName) && r.DateCompleted.HasValue && r.DateCompleted.Value.Year == currentYear)
                .GroupBy(r => r.CustomerName)
                .ToDictionary(g => g.Key, g => g.Count());
            
            // Count clients with more than 1 survey in current year as "repeated"
            return clientSurveyCounts.Count(kvp => kvp.Value > 1);
        }
        else // monthly
        {
            var currentMonth = currentDate.Month;
            var currentYear = currentDate.Year;
            
            // Get all clients with surveys in current month and their survey counts
            var clientSurveyCounts = surveyResponses
                .Where(r => !string.IsNullOrEmpty(r.CustomerName) && r.DateCompleted.HasValue && 
                           r.DateCompleted.Value.Year == currentYear && 
                           r.DateCompleted.Value.Month == currentMonth)
                .GroupBy(r => r.CustomerName)
                .ToDictionary(g => g.Key, g => g.Count());
            
            // Count clients with more than 1 survey in current month as "repeated"
            return clientSurveyCounts.Count(kvp => kvp.Value > 1);
        }
    }

    IEnumerable<ClientDetail> GetFilteredClientDetails()
    {
        var allClients = GetAllClientDetails();
        
        return selectedClientFilter switch
        {
            "new" => allClients.Where(c => !c.IsRepeatedClient),
            "repeated" => allClients.Where(c => c.IsRepeatedClient),
            _ => allClients
        };
    }

    IEnumerable<ClientDetail> GetAllClientDetails()
    {
        var clientGroups = surveyResponses
            .Where(r => !string.IsNullOrEmpty(r.CustomerName) && r.DateCompleted.HasValue)
            .GroupBy(r => r.CustomerName);
        
        foreach (var clientGroup in clientGroups.OrderBy(g => g.Key))
        {
            var clientName = clientGroup.Key;
            var clientSurveys = clientGroup.OrderBy(r => r.DateCompleted).ToList();
            
            var firstSurvey = clientSurveys.First();
            var latestSurvey = clientSurveys.Last();
            
            // A client is considered repeated if they have more than one completed survey
            var isRepeated = clientSurveys.Count > 1;
            
            var avgSatisfaction = clientSurveys.Average(r => r.Question1);
            
            yield return new ClientDetail
            {
                ClientName = clientName,
                IsRepeatedClient = isRepeated,
                FirstSurveyDate = firstSurvey.DateCompleted,
                LatestSurveyDate = latestSurvey.DateCompleted,
                TotalSurveys = clientSurveys.Count,
                AverageSatisfaction = avgSatisfaction
            };
        }
    }

    string GetClientSatisfactionClass(double satisfaction)
    {
        return satisfaction switch
        {
            >= 8 => "excellent",
            >= 6 => "good",
            >= 4 => "average",
            _ => "poor"
        };
    }

    // Chat Methods
    async Task SendSuggestionMessage(string message)
    {
        chatInput = message;
        await SendChatMessage();
    }

    async Task ClearChatHistory()
    {
        chatHistory.Clear();
        StateHasChanged();
    }

    async Task CopyMessageToClipboard(string text)
    {
        try 
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        }
        catch
        {
            
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        
        if (chatHistory.Any() || isProcessingChat)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("scrollChatToBottom");
            }
            catch
            {
                // Maybe add javascript???
            }
        }
    }

    async Task HandleChatKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            if (!string.IsNullOrWhiteSpace(chatInput))
            {
                await SendChatMessage();
            }
        }
    }

    void HandleInputChange(ChangeEventArgs e)
    {
        chatInput = e.Value?.ToString() ?? "";
        StateHasChanged();
    }
}