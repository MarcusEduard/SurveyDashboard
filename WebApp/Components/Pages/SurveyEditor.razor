@page "/survey-editor"
@attribute [Authorize(Policy = "MustBeAdmin")]
@using WebAPI.Models
@inject HttpClient httpClient

<div class="editor-container">
    <h2>üìù Survey Editor</h2>
    <p class="editor-subtitle">Manage customer names, project names, durations, and delete survey responses</p>
    
    @if (isLoading)
    {
        <div class="loading-spinner">
            <div class="spinner"></div>
            <p>Loading survey data...</p>
        </div>
    }
    else if (surveyResponses.Count == 0)
    {
        <div class="no-data">
            <p>No survey responses available to edit.</p>
        </div>
    }
    else
    {
        <!-- Filter and Search Controls -->
        <div class="editor-controls">
            <div class="search-controls" style="flex: 1; min-width: 180px; max-width: 300px;">
                <input type="text" @bind="searchFilter" @oninput="FilterSurveys" @onkeydown="HandleSearchKeyDown"
                       class="form-control search-input" 
                       placeholder="üîç Search customer, project, or sector..." style="font-size:0.95rem; padding:7px 12px;" />
            </div>
            <div class="filter-controls">
                <select @bind="sectorFilter" @bind:after="FilterSurveys" class="form-select">
                    <option value="">All Sectors</option>
                    @foreach (var sector in GetUniqueSectors())
                    {
                        <option value="@sector">@sector</option>
                    }
                </select>
                <select @bind="companySizeFilter" @bind:after="FilterSurveys" class="form-select">
                    <option value="">All Company Sizes</option>
                    <option value="Micro">Micro (1-9 employees)</option>
                    <option value="SME">SME (10-249 employees)</option>
                    <option value="Large">Large (250+ employees)</option>
                </select>
                <select @bind="durationFilter" @bind:after="FilterSurveys" class="form-select">
                    <option value="">All Durations</option>
                    @foreach (var duration in GetUniqueDurations())
                    {
                        <option value="@duration">@duration</option>
                    }
                </select>
                <select @bind="statusFilter" @bind:after="FilterSurveys" class="form-select">
                    <option value="">All Status</option>
                    <option value="completed">Completed</option>
                    <option value="pending">Pending</option>
                </select>
                <input type="date" value="@dateFilter" @oninput="OnDateFilterChanged" class="form-select" style="min-width:140px;" />
            </div>
        </div>

        <!-- Survey Responses Table -->
        <div class="editor-table-container">
            <table class="editor-table">
                <thead>
                    <tr>
                        <th>Survey ID</th>
                        <th>Customer Name</th>
                        <th>Project Name</th>
                        <th>Sector</th>
                        <th>Company Size</th>
                        <th>Duration</th>
                        <th>Date Sent</th>
                        <th>Date Completed</th>
                        <th>Status</th>
                        <th>Score</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var response in filteredResponses.OrderByDescending(r => r.DateSent))
                    {
                        <tr class="@(editingId == response.SurveyResponseId ? "editing-row" : "")">
                            <td>
                                <code class="survey-id">@GetShortSurveyId(response.SurveyId)</code>
                            </td>
                            
                            <!-- Customer Name -->
                            <td>
                                @if (editingId == response.SurveyResponseId && editingField == "customer")
                                {
                                    <input type="text" @bind="editValue" @onkeypress="@(async (e) => await HandleKeyPress(e, response))" 
                                           class="edit-input" />
                                }
                                else
                                {
                                    <span class="editable" @onclick="() => StartEdit(response.SurveyResponseId, CUSTOMER_FIELD, response.CustomerName)">
                                        @response.CustomerName
                                    </span>
                                }
                            </td>
                            
                            <!-- Project Name -->
                            <td>
                                @if (editingId == response.SurveyResponseId && editingField == "project")
                                {
                                    <input type="text" @bind="editValue" @onkeypress="@(async (e) => await HandleKeyPress(e, response))" 
                                           class="edit-input" />
                                }
                                else
                                {
                                    <span class="editable" @onclick="() => StartEdit(response.SurveyResponseId, PROJECT_FIELD, response.ProjectName)">
                                        @response.ProjectName
                                    </span>
                                }
                            </td>
                            
                            <!-- Sector -->
                            <td>
                                <span class="sector-badge @GetSectorClass(response.Sector)">
                                    @GetSectorIcon(response.Sector) @response.Sector
                                </span>
                            </td>
                            
                            <!-- Company Size -->
                            <td>
                                @if (editingId == response.SurveyResponseId && editingField == "companysize")
                                {
                                    <select @bind="editValue" @onkeypress="@(async (e) => await HandleKeyPress(e, response))" 
                                            class="edit-select">
                                        <option value="">Select Size</option>
                                        <option value="Micro">Micro (1-9 employees)</option>
                                        <option value="SME">SME (10-249 employees)</option>
                                        <option value="Large">Large (250+ employees)</option>
                                    </select>
                                }
                                else
                                {
                                    <span class="editable company-size-badge @GetCompanySizeClass(response.CompanySize)" 
                                          @onclick="() => StartEdit(response.SurveyResponseId, COMPANY_SIZE_FIELD, response.CompanySize)">
                                        @GetCompanySizeIcon(response.CompanySize) @(response.CompanySize ?? "Not set")
                                    </span>
                                }
                            </td>
                            
                            <!-- Duration -->
                            <td>
                                @if (editingId == response.SurveyResponseId && editingField == "duration")
                                {
                                    <input type="text" @bind="editValue" @onkeypress="@(async (e) => await HandleKeyPress(e, response))" 
                                           class="edit-input" />
                                }
                                else
                                {
                                    <span class="editable" @onclick="() => StartEdit(response.SurveyResponseId, DURATION_FIELD, response.ProjectDuration)">
                                        @(response.ProjectDuration ?? "N/A")
                                    </span>
                                }
                            </td>
                            
                            <!-- Date Sent -->
                            <td>
                                @if (editingId == response.SurveyResponseId && editingField == "datesent")
                                {
                                    <div class="date-edit-container">
                                        <input type="datetime-local" value="@editValue" @onchange="@((e) => editValue = e.Value?.ToString() ?? "")" 
                                               @onkeypress="@(async (e) => await HandleKeyPress(e, response))" 
                                               class="edit-input date-input" />
                                        <button type="button" @onclick="() => ClearDate(DATE_SENT_FIELD)" class="btn-clear-date" title="Clear date">‚úï</button>
                                    </div>
                                }
                                else
                                {
                                    <span class="editable date-text" @onclick="() => StartEditDate(response.SurveyResponseId, DATE_SENT_FIELD, response.DateSent)">
                                        @(response.DateSent?.ToString("dd/MM/yyyy HH:mm") ?? "Click to set date")
                                    </span>
                                }
                            </td>
                            
                            <!-- Date Completed -->
                            <td>
                                @if (editingId == response.SurveyResponseId && editingField == "datecompleted")
                                {
                                    <div class="date-edit-container">
                                        <input type="datetime-local" value="@editValue" @onchange="@((e) => editValue = e.Value?.ToString() ?? "")" 
                                               @onkeypress="@(async (e) => await HandleKeyPress(e, response))" 
                                               class="edit-input date-input" />
                                        <button type="button" @onclick="() => ClearDate(DATE_COMPLETED_FIELD)" class="btn-clear-date" title="Clear date">‚úï</button>
                                    </div>
                                }
                                else
                                {
                                    <span class="editable date-text" @onclick="() => StartEditDate(response.SurveyResponseId, DATE_COMPLETED_FIELD, response.DateCompleted)">
                                        @(response.DateCompleted?.ToString("dd/MM/yyyy HH:mm") ?? "Click to set completion date")
                                    </span>
                                }
                            </td>
                            
                            <!-- Status -->
                            <td>
                                @if (response.DateCompleted.HasValue)
                                {
                                    <span class="badge status-completed">‚úì Completed</span>
                                }
                                else
                                {
                                    <span class="badge status-pending">‚è≥ Pending</span>
                                }
                            </td>
                            
                            <!-- Score -->
                            <td>
                                @if (response.DateCompleted.HasValue)
                                {
                                    <span class="score-badge score-@GetScoreClass(response.Question1)">
                                        @response.Question1/10
                                    </span>
                                }
                                else
                                {
                                    <span class="score-na">N/A</span>
                                }
                            </td>
                            
                            <!-- Actions -->
                            <td>
                                <div class="action-buttons">
                                    @if (editingId == response.SurveyResponseId)
                                    {
                                        <button class="btn-save" @onclick="() => SaveEdit(response)" title="Save changes">
                                            üíæ
                                        </button>
                                        <button class="btn-cancel" @onclick="CancelEdit" title="Cancel editing">
                                            ‚ùå
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn-delete" @onclick="() => ConfirmDelete(response)" title="Delete response">
                                            üóëÔ∏è
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        @if (filteredResponses.Count > pageSize)
        {
            <div class="pagination-controls">
                <button class="btn-page" @onclick="PreviousPage" disabled="@(currentPage <= 1)">
                    ‚Üê Previous
                </button>
                <span class="page-info">
                    Page @currentPage of @((int)Math.Ceiling((double)filteredResponses.Count / pageSize))
                    (@filteredResponses.Count total responses)
                </span>
                <button class="btn-page" @onclick="NextPage" disabled="@(currentPage >= Math.Ceiling((double)filteredResponses.Count / pageSize))">
                    Next ‚Üí
                </button>
            </div>
        }
    }
</div>

<!-- Delete Confirmation Modal -->
@if (showDeleteModal && responseToDelete != null)
{
    <div class="modal-overlay" @onclick="CancelDelete">
        <div class="modal-content" @onclick:stopPropagation="true">
            <h3>‚ö†Ô∏è Confirm Deletion</h3>
            <p>Are you sure you want to delete this survey response?</p>
            <div class="modal-details">
                <p><strong>Customer:</strong> @responseToDelete.CustomerName</p>
                <p><strong>Project:</strong> @responseToDelete.ProjectName</p>
                <p><strong>Survey ID:</strong> <code>@GetShortSurveyId(responseToDelete.SurveyId)</code></p>
            </div>
            <div class="modal-actions">
                <button class="btn-confirm-delete" @onclick="DeleteResponse">
                    üóëÔ∏è Delete Response
                </button>
                <button class="btn-cancel-modal" @onclick="CancelDelete">
                    Cancel
                </button>
            </div>
        </div>
    </div>
}

<style>
    body {
        background: #fff !important;
    }

    .editor-container {
        max-width: 1600px;
        margin: 20px auto;
        padding: 24px;
        background: #f8f9fa;
        border-radius: 16px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
    }

    .editor-container h2 {
        color: #0056b3;
        text-align: center;
        margin-bottom: 8px;
        font-weight: 700;
        font-size: 2.2rem;
    }

    .editor-subtitle {
        text-align: center;
        color: #666;
        margin-bottom: 32px;
        font-size: 1.1rem;
    }

    /* Controls */
    .editor-controls {
        display: flex;
        gap: 20px;
        margin-bottom: 24px;
        align-items: center;
        flex-wrap: wrap;
    }

    .search-controls {
        flex: 1;
        min-width: 180px;
        max-width: 300px;
    }

    .filter-controls {
        display: flex;
        gap: 16px;
        flex: 3;
        min-width: 0;
    }

    .search-input {
        width: 100%;
        padding: 10px 16px;
        border: 2px solid #dee2e6;
        border-radius: 8px;
        font-size: 1rem;
        transition: border-color 0.2s ease;
    }

    .search-input:focus {
        border-color: #007bff;
        outline: none;
        box-shadow: 0 0 0 3px rgba(0,123,255,0.1);
    }

    .form-select {
        padding: 8px 12px;
        border: 2px solid #dee2e6;
        border-radius: 6px;
        font-size: 0.9rem;
        background: white;
        cursor: pointer;
    }

    /* Table Styles */
    .editor-table-container {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        margin-bottom: 24px;
    }

    .editor-table {
        width: 100%;
        border-collapse: collapse;
        font-size: 0.9rem;
    }

    .editor-table th {
        background: linear-gradient(135deg, #007bff, #0056b3);
        color: white;
        padding: 16px 12px;
        text-align: left;
        font-weight: 600;
        font-size: 0.85rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .editor-table td {
        padding: 12px;
        border-bottom: 1px solid #e9ecef;
        vertical-align: middle;
        color: #222;
    }

    .editor-table tr:hover {
        background-color: #f8f9fa;
    }

    .editing-row {
        background-color: #fff3cd !important;
        border-left: 4px solid #ffc107;
    }

    /* Editable Elements */
    .editable {
        cursor: pointer;
        padding: 4px 8px;
        border-radius: 4px;
        transition: all 0.2s ease;
        display: inline-block;
        min-width: 80px;
    }

    .editable:hover {
        background-color: #e7f3ff;
        border: 1px dashed #007bff;
    }

    .edit-input {
        width: 100%;
        padding: 6px 8px;
        border: 2px solid #007bff;
        border-radius: 4px;
        font-size: 0.9rem;
        background: white;
        color: #111 !important;
    }

    .edit-input:focus {
        outline: none;
        box-shadow: 0 0 0 3px rgba(0,123,255,0.2);
    }

    .edit-select {
        width: 100%;
        padding: 6px 8px;
        border: 2px solid #007bff;
        border-radius: 4px;
        font-size: 0.9rem;
        background: white;
        color: #111 !important;
        cursor: pointer;
    }

    .edit-select:focus {
        outline: none;
        box-shadow: 0 0 0 3px rgba(0,123,255,0.2);
    }

    .date-input {
        min-width: 180px;
        font-size: 0.85rem;
        color: #111 !important;
    }

    .date-edit-container {
        display: flex;
        align-items: center;
        gap: 4px;
    }

    .btn-clear-date {
        background: #dc3545;
        color: white;
        border: none;
        border-radius: 4px;
        width: 24px;
        height: 24px;
        font-size: 0.7rem;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
    }

    .btn-clear-date:hover {
        background: #c82333;
        transform: scale(1.1);
    }

    /* Survey ID */
    .survey-id {
        background: #f1f3f4;
        padding: 4px 8px;
        border-radius: 4px;
        font-family: 'Courier New', monospace;
        font-size: 0.8rem;
        color: #333;
    }

    /* Badges */
    .sector-badge {
        padding: 4px 12px;
        border-radius: 12px;
        font-size: 0.8rem;
        font-weight: 600;
        display: inline-flex;
        align-items: center;
        gap: 4px;
    }

    .sector-badge.health { background: #ffe6e6; color: #c03; }
    .sector-badge.tech { background: #e6f7f7; color: #167; }
    .sector-badge.energy { background: #e6f3ff; color: #059; }

    .company-size-badge {
        padding: 4px 12px;
        border-radius: 12px;
        font-size: 0.8rem;
        font-weight: 600;
        display: inline-flex;
        align-items: center;
        gap: 4px;
    }

    .company-size-badge.micro { background: #fff3cd; color: #856404; }
    .company-size-badge.sme { background: #cce5ff; color: #0066cc; }
    .company-size-badge.large { background: #e6ccff; color: #6f42c1; }
    .company-size-badge.not-set { background: #e2e3e5; color: #6c757d; }

    .badge {
        padding: 4px 8px;
        border-radius: 8px;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .status-completed {
        background: #d4edda;
        color: #155724;
    }

    .status-pending {
        background: #fff3cd;
        color: #856404;
    }

    .score-badge {
        padding: 4px 8px;
        border-radius: 6px;
        font-weight: 600;
        font-size: 0.8rem;
        color: white;
    }

    .score-excellent { background: #28a745; }
    .score-good { background: #17a2b8; }
    .score-average { background: #ffc107; color: #333; }
    .score-poor { background: #dc3545; }

    .score-na {
        color: #999;
        font-style: italic;
    }

    .date-text {
        color: #666;
        font-size: 0.85rem;
        padding: 4px 8px;
        border-radius: 4px;
        transition: all 0.2s ease;
    }

    .date-text.editable:hover {
        background-color: #e7f3ff;
        border: 1px dashed #007bff;
        color: #333;
    }

    /* Action Buttons */
    .action-buttons {
        display: flex;
        gap: 8px;
        justify-content: center;
    }

    .btn-save, .btn-cancel, .btn-delete {
        padding: 6px 8px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 1rem;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 32px;
        height: 32px;
    }

    .btn-save {
        background: #28a745;
        color: white;
    }

    .btn-save:hover {
        background: #218838;
        transform: scale(1.1);
    }

    .btn-cancel {
        background: #6c757d;
        color: white;
    }

    .btn-cancel:hover {
        background: #5a6268;
        transform: scale(1.1);
    }

    .btn-delete {
        background: #dc3545;
        color: white;
    }

    .btn-delete:hover {
        background: #c82333;
        transform: scale(1.1);
    }

    /* Modal Styles */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        padding: 24px;
        border-radius: 12px;
        max-width: 500px;
        width: 90%;
        box-shadow: 0 8px 32px rgba(0,0,0,0.2);
    }

    .modal-content h3 {
        margin: 0 0 16px 0;
        color: #dc3545;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .modal-details {
        background: #f8f9fa;
        padding: 16px;
        border-radius: 8px;
        margin: 16px 0;
    }

    .modal-details p {
        margin: 4px 0;
        color: #555;
    }

    .modal-actions {
        display: flex;
        gap: 12px;
        justify-content: flex-end;
        margin-top: 20px;
    }

    .btn-confirm-delete {
        background: #dc3545;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-weight: 600;
        transition: background 0.2s ease;
    }

    .btn-confirm-delete:hover {
        background: #c82333;
    }

    .btn-cancel-modal {
        background: #6c757d;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-weight: 600;
        transition: background 0.2s ease;
    }

    .btn-cancel-modal:hover {
        background: #5a6268;
    }

    /* Pagination */
    .pagination-controls {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 20px;
        margin-top: 24px;
    }

    .btn-page {
        padding: 8px 16px;
        background: #007bff;
        color: white;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-weight: 500;
        transition: background 0.2s ease;
    }

    .btn-page:hover:not(:disabled) {
        background: #0056b3;
    }

    .btn-page:disabled {
        background: #6c757d;
        cursor: not-allowed;
    }

    .page-info {
        color: #666;
        font-size: 0.9rem;
    }

    /* Loading and No Data */
    .loading-spinner {
        text-align: center;
        padding: 60px;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #007bff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 20px;
    }

    .no-data {
        text-align: center;
        padding: 60px;
        color: #666;
        font-size: 1.1rem;
    }
</style>

@code {
    List<SurveyResponse> surveyResponses = new List<SurveyResponse>();
    List<SurveyResponse> filteredResponses = new List<SurveyResponse>();
    bool isLoading = true;
    
    // Filtering
    string searchFilter = "";
    string sectorFilter = "";
    string companySizeFilter = "";
    string durationFilter = "";
    string statusFilter = "";
    string dateFilter = "";
    
    // Pagination
    int currentPage = 1;
    int pageSize = 20;
    
    // Editing
    int editingId = 0;
    string editingField = "";
    string editValue = "";
    
    // Delete confirmation
    bool showDeleteModal = false;
    SurveyResponse? responseToDelete = null;

    // Field constants for editing
    const string CUSTOMER_FIELD = "customer";
    const string PROJECT_FIELD = "project";
    const string DURATION_FIELD = "duration";
    const string COMPANY_SIZE_FIELD = "companysize";
    const string DATE_SENT_FIELD = "datesent";
    const string DATE_COMPLETED_FIELD = "datecompleted";

    protected override async Task OnInitializedAsync()
    {
        await LoadSurveyData();
    }

    async Task LoadSurveyData()
    {
        isLoading = true;
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<SurveyResponse>>("http://localhost:5555/api/survey/responses");
            surveyResponses = response ?? new List<SurveyResponse>();
            FilterSurveys();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading survey data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    void FilterSurveys()
    {
        filteredResponses = surveyResponses.Where(r =>
            (string.IsNullOrEmpty(searchFilter) || 
             r.CustomerName.Contains(searchFilter, StringComparison.OrdinalIgnoreCase) ||
             r.ProjectName.Contains(searchFilter, StringComparison.OrdinalIgnoreCase) ||
             r.Sector.Contains(searchFilter, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(sectorFilter) || r.Sector == sectorFilter) &&
            (string.IsNullOrEmpty(companySizeFilter) || (r.CompanySize ?? "") == companySizeFilter) &&
            (string.IsNullOrEmpty(durationFilter) || (r.ProjectDuration ?? "") == durationFilter) &&
            (string.IsNullOrEmpty(statusFilter) || 
             (statusFilter == "completed" && r.DateCompleted.HasValue) ||
             (statusFilter == "pending" && !r.DateCompleted.HasValue)) &&
            (string.IsNullOrEmpty(dateFilter) || (r.DateSent.HasValue && r.DateSent.Value.ToString("yyyy-MM-dd") == dateFilter))
        ).ToList();
        
        currentPage = 1; // Reset to first page when filtering
        StateHasChanged();
    }
    List<string> GetUniqueDurations()
    {
        return surveyResponses.Select(r => r.ProjectDuration ?? "N/A").Where(d => !string.IsNullOrWhiteSpace(d)).Distinct().OrderBy(d => d).ToList();
    }

    void StartEdit(int id, string field, string? currentValue)
    {
        editingId = id;
        editingField = field;
        editValue = currentValue ?? "";
        StateHasChanged();
    }

    void StartEditDate(int id, string field, DateTime? currentValue)
    {
        editingId = id;
        editingField = field;
        editValue = currentValue?.ToString("yyyy-MM-ddTHH:mm") ?? "";
        StateHasChanged();
    }

    void CancelEdit()
    {
        editingId = 0;
        editingField = "";
        editValue = "";
        StateHasChanged();
    }

    void ClearDate()
    {
        editValue = "";
        StateHasChanged();
    }

    async Task SaveEdit(SurveyResponse response)
    {
        try
        {
            // Update the response object
            switch (editingField)
            {
                case "customer":
                    response.CustomerName = editValue;
                    break;
                case "project":
                    response.ProjectName = editValue;
                    break;
                case "duration":
                    response.ProjectDuration = editValue;
                    break;
                case "companysize":
                    response.CompanySize = editValue;
                    break;
                case "datesent":
                    if (DateTime.TryParse(editValue, out DateTime dateSent))
                    {
                        response.DateSent = dateSent;
                    }
                    else
                    {
                        response.DateSent = null;
                    }
                    break;
                case "datecompleted":
                    if (DateTime.TryParse(editValue, out DateTime dateCompleted))
                    {
                        response.DateCompleted = dateCompleted;
                        response.SubmittedAt = dateCompleted; // Keep legacy field in sync
                    }
                    else
                    {
                        response.DateCompleted = null;
                        response.SubmittedAt = DateTime.MinValue;
                    }
                    break;
            }

            // Save to API
            var apiResponse = await httpClient.PutAsJsonAsync($"http://localhost:5555/api/survey/{response.SurveyResponseId}", response);
            
            if (apiResponse.IsSuccessStatusCode)
            {
                CancelEdit();
                await LoadSurveyData(); // Refresh data
            }
            else
            {
                Console.WriteLine($"Error saving changes: {apiResponse.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving changes: {ex.Message}");
        }
    }

    async Task HandleKeyPress(KeyboardEventArgs e, SurveyResponse response)
    {
        if (e.Key == "Enter")
        {
            await SaveEdit(response);
        }
        else if (e.Key == "Escape")
        {
            CancelEdit();
        }
    }

    void ConfirmDelete(SurveyResponse response)
    {
        responseToDelete = response;
        showDeleteModal = true;
        StateHasChanged();
    }

    void CancelDelete()
    {
        showDeleteModal = false;
        responseToDelete = null;
        StateHasChanged();
    }

    async Task DeleteResponse()
    {
        if (responseToDelete == null) return;

        try
        {
            var response = await httpClient.DeleteAsync($"http://localhost:5555/api/survey/{responseToDelete.SurveyResponseId}");
            
            if (response.IsSuccessStatusCode)
            {
                CancelDelete();
                await LoadSurveyData(); // Refresh data
            }
            else
            {
                Console.WriteLine($"Error deleting response: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting response: {ex.Message}");
        }
    }

    void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            StateHasChanged();
        }
    }

    void NextPage()
    {
        if (currentPage < Math.Ceiling((double)filteredResponses.Count / pageSize))
        {
            currentPage++;
            StateHasChanged();
        }
    }

    // Helper Methods
    List<string> GetUniqueSectors()
    {
        return surveyResponses.Select(r => r.Sector).Distinct().OrderBy(s => s).ToList();
    }

    string GetShortSurveyId(string surveyId)
    {
        if (string.IsNullOrEmpty(surveyId))
            return "N/A";
            
        if (surveyId.Length <= 8)
            return surveyId;
            
        return surveyId.Substring(0, 8) + "...";
    }

    string GetSectorIcon(string sector)
    {
        return sector switch
        {
            "Health" => "üè•",
            "Tech & Digitalization" => "üíª",
            "Energy" => "‚ö°",
            _ => "üè¢"
        };
    }

    string GetSectorClass(string sector)
    {
        return sector switch
        {
            "Health" => "health",
            "Tech & Digitalization" => "tech",
            "Energy" => "energy",
            _ => "other"
        };
    }

    string GetCompanySizeClass(string companySize)
    {
        return companySize switch
        {
            "Micro" => "micro",
            "SME" => "sme",
            "Large" => "large",
            _ => "not-set"
        };
    }

    string GetCompanySizeIcon(string companySize)
    {
        return companySize switch
        {
            "Micro" => "üè™",
            "SME" => "üè¢",
            "Large" => "üè≠",
            _ => "üë•"
        };
    }

    string GetScoreClass(int score)
    {
        return score switch
        {
            >= 8 => "excellent",
            >= 6 => "good",
            >= 4 => "average",
            _ => "poor"
        };
    }


    void ClearDate(string field)
    {
        editValue = "";
        StateHasChanged();
    }

    // Handle Enter key in search bar
    void HandleSearchKeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            FilterSurveys();
        }
    }

    void OnDateFilterChanged(ChangeEventArgs e)
    {
        dateFilter = e.Value?.ToString() ?? "";
        FilterSurveys();
    }
}
