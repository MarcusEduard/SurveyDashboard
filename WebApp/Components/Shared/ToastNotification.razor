@using Microsoft.AspNetCore.Components
@inject IJSRuntime JS

<div class="toast-container" id="toast-container">
    @foreach (var toast in toasts)
    {
        <div class="toast @GetToastClass(toast.Type) @(toast.IsVisible ? "show" : "")" 
             style="animation-delay: @(toast.Id * 100)ms">
            <div class="toast-header">
                <span class="toast-icon">@GetToastIcon(toast.Type)</span>
                <strong class="toast-title">@GetToastTitle(toast.Type)</strong>
                <button type="button" class="toast-close" @onclick="() => RemoveToast(toast.Id)">×</button>
            </div>
            <div class="toast-body">
                @toast.Message
            </div>
        </div>
    }
</div>

@code {
    private List<ToastModel> toasts = new List<ToastModel>();
    private int nextId = 1;

    public void ShowSuccess(string message)
    {
        ShowToast(ToastType.Success, message);
    }

    public void ShowError(string message)
    {
        ShowToast(ToastType.Error, message);
    }

    public void ShowWarning(string message)
    {
        ShowToast(ToastType.Warning, message);
    }

    public void ShowInfo(string message)
    {
        ShowToast(ToastType.Info, message);
    }

    private void ShowToast(ToastType type, string message)
    {
        var toast = new ToastModel
        {
            Id = nextId++,
            Type = type,
            Message = message,
            IsVisible = true
        };

        toasts.Add(toast);
        StateHasChanged();

        // Auto remove after 5 seconds
        _ = Task.Run(async () =>
        {
            await Task.Delay(5000);
            await InvokeAsync(() => RemoveToast(toast.Id));
        });
    }

    private void RemoveToast(int id)
    {
        var toast = toasts.FirstOrDefault(t => t.Id == id);
        if (toast != null)
        {
            toasts.Remove(toast);
            StateHasChanged();
        }
    }

    private string GetToastClass(ToastType type) => type switch
    {
        ToastType.Success => "toast-success",
        ToastType.Error => "toast-error",
        ToastType.Warning => "toast-warning",
        ToastType.Info => "toast-info",
        _ => "toast-info"
    };

    private string GetToastIcon(ToastType type) => type switch
    {
        ToastType.Success => "✅",
        ToastType.Error => "❌",
        ToastType.Warning => "⚠️",
        ToastType.Info => "ℹ️",
        _ => "ℹ️"
    };

    private string GetToastTitle(ToastType type) => type switch
    {
        ToastType.Success => "Success",
        ToastType.Error => "Error",
        ToastType.Warning => "Warning",
        ToastType.Info => "Info",
        _ => "Info"
    };

    public enum ToastType
    {
        Success,
        Error,
        Warning,
        Info
    }

    public class ToastModel
    {
        public int Id { get; set; }
        public ToastType Type { get; set; }
        public string Message { get; set; } = "";
        public bool IsVisible { get; set; }
    }
}

