@page "/addData"
@using Domain.Models
@using System.Text.Json
@inject HttpClient httpClient
@attribute [Authorize("MustBeTeacher")]

@page "/editEdata"
@using WebAPI.Models

<PageTitle>Add / Edit data</PageTitle>

<h3 class="centered-headline centered-headline kaescher-headline">
    <img src="images/Logo_Nilfisk.jpg" alt="Kaerscher Logo" style="width: 500px; height: auto;" />
</h3>

<h3 class="centered-headline">Edit Energy Consumption</h3>

<div class="bordered-section">
    @if (edataList == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <table class="edata-table">
            <thead>
                <tr>
                    <th>Data Indicator</th>
                    <th>Unit</th>
                    @foreach (var edata in edataList)
                    {
                        <th class="centered-header">@edata.Year.Year <button @onclick="() => DeleteEdata(edata.Environmentid)">Delete</button></th>
                    }
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Total Energy Consumption</td>
                    <td>@edataList.FirstOrDefault()?.Unit</td>
                    @foreach (var edata in edataList)
                    {
                        <td><input type="number" @bind="edata.TotalEnergy" /></td>
                    }
                </tr>
                <tr>
                    <td>Crude Fuel</td>
                    <td>@edataList.FirstOrDefault()?.Unit</td>
                    @foreach (var edata in edataList)
                    {
                        <td><input type="number" @bind="edata.CrudeFuel" /></td>
                    }
                </tr>
                <tr>
                    <td>Gas Fuel</td>
                    <td>@edataList.FirstOrDefault()?.Unit</td>
                    @foreach (var edata in edataList)
                    {
                        <td><input type="number" @bind="edata.GasFuel" /></td>
                    }
                </tr>
                <tr>
                    <td>Purchased Electricity</td>
                    <td>@edataList.FirstOrDefault()?.Unit</td>
                    @foreach (var edata in edataList)
                    {
                        <td><input type="number" @bind="edata.PurchElec" /></td>
                    }
                </tr>
                <tr>
                    <td>Renewable Energy</td>
                    <td>@edataList.FirstOrDefault()?.Unit</td>
                    @foreach (var edata in edataList)
                    {
                        <td><input type="number" @bind="edata.RenewEnergy" /></td>
                    }
                </tr>
                <tr>
                    <td>Fossil Energy</td>
                    <td>@edataList.FirstOrDefault()?.Unit</td>
                    @foreach (var edata in edataList)
                    {
                        <td><input type="number" @bind="edata.FossilEnergy" /></td>
                    }
                </tr>
            </tbody>
        </table>
        <button class="apply-button" @onclick="ApplyEdataChanges">Apply</button>
    }
</div>

<h3 class="centered-headline">Add New Energy Consumption Data</h3>

<div class="bordered-section">
    <div class="add-data-form">
        <div>
            <label>Year:</label>
            <input type="number" @bind="newYear" />
        </div>
        <div>
            <label>Total Energy:</label>
            <input type="number" @bind="newEdata.TotalEnergy" />
        </div>
        <div>
            <label>Crude Fuel:</label>
            <input type="number" @bind="newEdata.CrudeFuel" />
        </div>
        <div>
            <label>Gas Fuel:</label>
            <input type="number" @bind="newEdata.GasFuel" />
        </div>
        <div>
            <label>Purchased Electricity:</label>
            <input type="number" @bind="newEdata.PurchElec" />
        </div>
        <div>
            <label>Renewable Energy:</label>
            <input type="number" @bind="newEdata.RenewEnergy" />
        </div>
        <div>
            <label>Fossil Energy:</label>
            <input type="number" @bind="newEdata.FossilEnergy" />
        </div>
        <button class="add-button" @onclick="AddEdata">Add Data</button>
    </div>
</div>

<h3 class="centered-headline">Edit Greenhouse Gas (GHG) Emissions</h3>

<div class="bordered-section">
    @if (greenHouseList == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <table class="edata-table">
            <thead>
                <tr>
                    <th>Data Indicator</th>
                    <th>Unit</th>
                    @foreach (var greenhouse in greenHouseList)
                    {
                        <th class="centered-header">@greenhouse.Year.Year <button @onclick="() => DeleteGreenhouse(greenhouse.GreenHouseId)">Delete</button></th>
                    }
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Total scope 1 and 2 - market-based</td>
                    <td>@greenHouseList.FirstOrDefault()?.Unit</td>
                    @foreach (var greenhouse in greenHouseList)
                    {
                        <td><input type="number" @bind="greenhouse.scope12Market" /></td>
                    }
                </tr>
                <tr>
                    <td>Total scope 1 and 2 - location-based</td>
                    <td>@greenHouseList.FirstOrDefault()?.Unit</td>
                    @foreach (var greenhouse in greenHouseList)
                    {
                        <td><input type="number" @bind="greenhouse.scope12location" /></td>
                    }
                </tr>
                <tr>
                    <td>Scope 3 - use of sold products</td>
                    <td>@greenHouseList.FirstOrDefault()?.Unit</td>
                    @foreach (var greenhouse in greenHouseList)
                    {
                        <td><input type="number" @bind="greenhouse.scope3soldproducts" /></td>
                    }
                </tr>
            </tbody>
        </table>
        <button class="apply-button" @onclick="ApplyGreenHouseChanges">Apply</button>
    }
</div>

<h3 class="centered-headline">Add New Greenhouse Gas (GHG) Emissions Data</h3>

<div class="bordered-section">
    <div class="add-data-form">
        <div>
            <label>Year:</label>
            <input type="number" @bind="newYear" />
        </div>
        <div>
            <label>Total scope 1 and 2 - market-based:</label>
            <input type="number" @bind="newGreenhouse.scope12Market" />
        </div>
        <div>
            <label>Total scope 1 and 2 - location-based:</label>
            <input type="number" @bind="newGreenhouse.scope12location" />
        </div>
        <div>
            <label>Scope 3 - use of sold products:</label>
            <input type="number" @bind="newGreenhouse.scope3soldproducts" />
        </div>
        <button class="add-button" @onclick="AddGreenhouse">Add Data</button>
    </div>
</div>

<h3 class="centered-headline">Edit Water Data</h3>

<div class="bordered-section">
    @if (waterList == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <table class="edata-table">
            <thead>
                <tr>
                    <th>Data Indicator</th>
                    <th>Unit</th>
                    @foreach (var water in waterList)
                    {
                        <th class="centered-header">@water.Year.Year <button @onclick="() => DeleteWater(water.WaterId)">Delete</button></th>
                    }
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Water Consumption</td>
                    <td>@waterList.FirstOrDefault()?.Unit</td>
                    @foreach (var water in waterList)
                    {
                        <td><input type="number" @bind="water.WaterConsumption" /></td>
                    }
                </tr>
                <tr>
                    <td>Water Recycled</td>
                    <td>@waterList.FirstOrDefault()?.Unit</td>
                    @foreach (var water in waterList)
                    {
                        <td><input type="number" @bind="water.WaterRecycled" /></td>
                    }
                </tr>
            </tbody>
        </table>
        <button class="apply-button" @onclick="ApplyWaterChanges">Apply</button>
    }
</div>

<h3 class="centered-headline">Add New Water Data</h3>

<div class="bordered-section">
    <div class="add-data-form">
        <div>
            <label>Year:</label>
            <input type="number" @bind="newYear" />
        </div>
        <div>
            <label>Water Consumption:</label>
            <input type="number" @bind="newWater.WaterConsumption" />
        </div>
        <div>
            <label>Water Recycled:</label>
            <input type="number" @bind="newWater.WaterRecycled" />
        </div>
        <button class="add-button" @onclick="AddWater">Add Data</button>
    </div>
</div>

<h3 class="centered-headline">Edit Waste Data</h3>

<div class="bordered-section">
    @if (waterList == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <table class="edata-table">
            <thead>
                <tr>
                    <th>Data Indicator</th>
                    <th>Unit</th>
                    @foreach (var waste in wasteList)
                    {
                        <th class="centered-header">@waste.Year.Year <button @onclick="() => DeleteWaste(waste.WasteId)">Delete</button></th>
                    } 
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Total Waste</td>
                    <td>@wasteList.FirstOrDefault()?.Unit</td>
                    @foreach (var waste in wasteList)
                    {
                        <td><input type="number" @bind="waste.TotalWaste" /></td>
                    }
                </tr>
            </tbody>
        </table>
        <button class="apply-button" @onclick="ApplyWasteChanges">Apply</button>
    }
</div>

<h3 class="centered-headline">Add New Waste Data</h3>

<div class="bordered-section">
    <div class="add-data-form">
        <div>
            <label>Year:</label>
            <input type="number" @bind="newYear" />
        </div>
        <div>
            <label>Total Waste:</label>
            <input type="number" @bind="newWaste.TotalWaste" />
        </div>
        <button class="add-button" @onclick="AddWaste">Add Data</button>
    </div>
</div>


<hr class="section-divider" />

<h3 class="centered-headline centered-headline kaescher-headline">
    <img src="images/Kaercher_Logo_2015_CO.png" alt="Kaerscher Logo" style="width: 500px; height: auto;" />
</h3>

<h3 class="centered-headline">Edit Energy Consumption</h3>

<div class="bordered-section">
    @if (edataKList == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <table class="edata-table">
            <thead>
                <tr>
                    <th>Data Indicator</th>
                    <th>Unit</th>
                    @foreach (var edataK in edataKList)
                    {
                        <th class="centered-header">@edataK.Year.Year <button @onclick="() => DeleteEdataK(edataK.Environmentid)">Delete</button></th>
                    }
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Total Energy Consumption</td>
                    <td>@edataKList.FirstOrDefault()?.Unit</td>
                    @foreach (var edataK in edataKList)
                    {
                        <td><input type="number" @bind="edataK.TotalEnergy" /></td>
                    }
                </tr>
                <tr>
                    <td>Crude Fuel</td>
                    <td>@edataKList.FirstOrDefault()?.Unit</td>
                    @foreach (var edataK in edataKList)
                    {
                        <td><input type="number" @bind="edataK.CrudeFuel" /></td>
                    }
                </tr>
                <tr>
                    <td>Gas Fuel</td>
                    <td>@edataKList.FirstOrDefault()?.Unit</td>
                    @foreach (var edataK in edataKList)
                    {
                        <td><input type="number" @bind="edataK.GasFuel" /></td>
                    }
                </tr>
                <tr>
                    <td>Purchased Electricity</td>
                    <td>@edataKList.FirstOrDefault()?.Unit</td>
                    @foreach (var edataK in edataKList)
                    {
                        <td><input type="number" @bind="edataK.PurchElec" /></td>
                    }
                </tr>
                <tr>
                    <td>Fossil Energy</td>
                    <td>@edataKList.FirstOrDefault()?.Unit</td>
                    @foreach (var edataK in edataKList)
                    {
                        <td><input type="number" @bind="edataK.FossilEnergy" /></td>
                    }
                </tr>
            </tbody>
        </table>
        <button class="apply-button" @onclick="ApplyEdataKChanges">Apply</button>
    }
</div>

<h3 class="centered-headline">Add New Energy Consumption Data</h3>

<div class="bordered-section">
    <div class="add-data-form">
        <div>
            <label>Year:</label>
            <input type="number" @bind="newYear" />
        </div>
        <div>
            <label>Total Energy:</label>
            <input type="number" @bind="newEdataK.TotalEnergy" />
        </div>
        <div>
            <label>Crude Fuel:</label>
            <input type="number" @bind="newEdataK.CrudeFuel" />
        </div>
        <div>
            <label>Gas Fuel:</label>
            <input type="number" @bind="newEdataK.GasFuel" />
        </div>
        <div>
            <label>Purchased Electricity:</label>
            <input type="number" @bind="newEdataK.PurchElec" />
        </div>
        <div>
            <label>Fossil Energy:</label>
            <input type="number" @bind="newEdataK.FossilEnergy" />
        </div>
        <button class="add-button" @onclick="AddEdataK">Add Data</button>
    </div>
</div>


<h3 class="centered-headline">Edit Greenhouse Gas (GHG) Emissions</h3>

<div class="bordered-section">
    @if (greenHouseList == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <table class="edata-table">
            <thead>
                <tr>
                    <th>Data Indicator</th>
                    <th>Unit</th>
                    @foreach (var greenhouseK in greenHouseKList)
                    {
                        <th class="centered-header">@greenhouseK.Year.Year <button @onclick="() => DeleteGreenhouseK(greenhouseK.GreenHouseId)">Delete</button></th>
                    }
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Total scope 1 and 2 - market-based</td>
                    <td>@greenHouseKList.FirstOrDefault()?.Unit</td>
                    @foreach (var greenhouseK in greenHouseKList)
                    {
                        <td><input type="number" @bind="greenhouseK.scope12Market" /></td>
                    }
                </tr>
                <tr>
                    <td>Total scope 1 and 2 - location-based</td>
                    <td>@greenHouseKList.FirstOrDefault()?.Unit</td>
                    @foreach (var greenhouseK in greenHouseKList)
                    {
                        <td><input type="number" @bind="greenhouseK.scope12location" /></td>
                    }
                </tr>
            </tbody>
        </table>
        <button class="apply-button" @onclick="ApplyGreenHouseKChanges">Apply</button>
    }
</div>

<h3 class="centered-headline">Add New Greenhouse Gas (GHG) Emissions Data</h3>

<div class="bordered-section">
    <div class="add-data-form">
        <div>
            <label>Year:</label>
            <input type="number" @bind="newYear" />
        </div>
        <div>
            <label>Total scope 1 and 2 - market-based:</label>
            <input type="number" @bind="newGreenhouseK.scope12Market" />
        </div>
        <div>
            <label>Total scope 1 and 2 - location-based:</label>
            <input type="number" @bind="newGreenhouseK.scope12location" />
        </div>
        <button class="add-button" @onclick="AddGreenhouseK">Add Data</button>
    </div>
</div>

<h3 class="centered-headline">Edit Water Data</h3>

<div class="bordered-section">
    @if (waterKList == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <table class="edata-table">
            <thead>
                <tr>
                    <th>Data Indicator</th>
                    <th>Unit</th>
                    @foreach (var waterK in waterKList)
                    {
                        <th class="centered-header">@waterK.Year.Year <button @onclick="() => DeleteWaterK(waterK.WaterId)">Delete</button></th>
                    }
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Water Consumption</td>
                    <td>@waterKList.FirstOrDefault()?.Unit</td>
                    @foreach (var waterK in waterKList)
                    {
                        <td><input type="number" @bind="waterK.WaterConsumption" /></td>
                    }
                </tr>
            </tbody>
        </table>
        <button class="apply-button" @onclick="ApplyWaterKChanges">Apply</button>
    }
</div>

<h3 class="centered-headline">Add New Water Data</h3>

<div class="bordered-section">
    <div class="add-data-form">
        <div>
            <label>Year:</label>
            <input type="number" @bind="newYear" />
        </div>
        <div>
            <label>Water Consumption:</label>
            <input type="number" @bind="newWaterK.WaterConsumption" />
        </div>
        <button class="add-button" @onclick="AddWaterK">Add Data</button>
    </div>
</div>

<h3 class="centered-headline">Edit Waste Data</h3>

<div class="bordered-section">
    @if (wasteKList == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <table class="edata-table">
            <thead>
                <tr>
                    <th>Data Indicator</th>
                    <th>Unit</th>
                    @foreach (var wasteK in wasteKList)
                    {
                        <th class="centered-header">@wasteK.Year.Year <button @onclick="() => DeleteWasteK(wasteK.WasteId)">Delete</button></th>
                    } 
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Total Waste</td>
                    <td>@wasteKList.FirstOrDefault()?.Unit</td>
                    @foreach (var wasteK in wasteKList)
                    {
                        <td><input type="number" @bind="wasteK.TotalWaste" /></td>
                    }
                </tr>
            </tbody>
        </table>
        <button class="apply-button" @onclick="ApplyWasteKChanges">Apply</button>
    }
</div>

<h3 class="centered-headline">Add New Waste Data</h3>

<div class="bordered-section">
    <div class="add-data-form">
        <div>
            <label>Year:</label>
            <input type="number" @bind="newYear" />
        </div>
        <div>
            <label>Total Waste:</label>
            <input type="number" @bind="newWasteK.TotalWaste" />
        </div>
        <button class="add-button" @onclick="AddWasteK">Add Data</button>
    </div>
</div>

<hr class="section-divider" />

<h3 class="centered-headline centered-headline kaescher-headline">
    <img src="images/tennant.webp" alt="Kaerscher Logo" style="width: 500px; height: auto;" />
</h3>

<h3 class="centered-headline">Edit Greenhouse Gas (GHG) Emissions</h3>

<div class="bordered-section">
    @if (greenHouseTList == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <table class="edata-table">
            <thead>
                <tr>
                    <th>Data Indicator</th>
                    <th>Unit</th>
                    @foreach (var greenhouseT in greenHouseTList)
                    {
                        <th class="centered-header">@greenhouseT.Year.Year <button @onclick="() => DeleteGreenhouseT(greenhouseT.GreenHouseId)">Delete</button></th>
                    }
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Total scope 1 and 2 - market-based</td>
                    <td>@greenHouseTList.FirstOrDefault()?.Unit</td>
                    @foreach (var greenhouseT in greenHouseTList)
                    {
                        <td><input type="number" @bind="greenhouseT.scope12Market" /></td>
                    }
                </tr>
                <tr>
                    <td>Total scope 1 and 2 - location-based</td>
                    <td>@greenHouseTList.FirstOrDefault()?.Unit</td>
                    @foreach (var greenhouseT in greenHouseTList)
                    {
                        <td><input type="number" @bind="greenhouseT.scope12location" /></td>
                    }
                </tr>
            </tbody>
        </table>
        <button class="apply-button" @onclick="ApplyGreenHouseTChanges">Apply</button>
    }
</div>

<h3 class="centered-headline">Add New Greenhouse Gas (GHG) Emissions Data</h3>

<div class="bordered-section">
    <div class="add-data-form">
        <div>
            <label>Year:</label>
            <input type="number" @bind="newYear" />
        </div>
        <div>
            <label>Total scope 1 and 2 - market-based:</label>
            <input type="number" @bind="newGreenhouseT.scope12Market" />
        </div>
        <div>
            <label>Total scope 1 and 2 - location-based:</label>
            <input type="number" @bind="newGreenhouseT.scope12location" />
        </div>
        <button class="add-button" @onclick="AddGreenhouseT">Add Data</button>
    </div>
</div>

<h3 class="centered-headline">Edit Waste Data</h3>

<div class="bordered-section">
    @if (wasteTList == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <table class="edata-table">
            <thead>
                <tr>
                    <th>Data Indicator</th>
                    <th>Unit</th>
                    @foreach (var wasteT in wasteTList)
                    {
                        <th class="centered-header">@wasteT.Year.Year <button @onclick="() => DeleteWasteT(wasteT.WasteId)">Delete</button></th>
                    } 
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Total Waste</td>
                    <td>@wasteTList.FirstOrDefault()?.Unit</td>
                    @foreach (var wasteT in wasteTList)
                    {
                        <td><input type="number" @bind="wasteT.TotalWaste" /></td>
                    }
                </tr>
            </tbody>
        </table>
        <button class="apply-button" @onclick="ApplyWasteTChanges">Apply</button>
    }
</div>

<h3 class="centered-headline">Add New Waste Data</h3>

<div class="bordered-section">
    <div class="add-data-form">
        <div>
            <label>Year:</label>
            <input type="number" @bind="newYear" />
        </div>
        <div>
            <label>Total Waste:</label>
            <input type="number" @bind="newWasteT.TotalWaste" />
        </div>
        <button class="add-button" @onclick="AddWasteT">Add Data</button>
    </div>
</div>


@code {
    Data newData = new() { DueDate = DateTime.Now };
    List<Data> datas = new();
    string infoMessage = "";
    List<Edata> edataList = new();
    private List<EdataK> edataKList = new List<EdataK>();
    private List<GreenHouse> greenHouseList = new List<GreenHouse>();
    List<Water> waterList = new();
    List<Waste> wasteList = new();
    private List<WasteK> wasteKList = new List<WasteK>();
    private List<WaterK> waterKList = new List<WaterK>();
    private List<WasteT> wasteTList = new List<WasteT>();
    List<GreenHouseK> greenHouseKList = new List<GreenHouseK>();
    List<GreenHouseT> greenHouseTList = new List<GreenHouseT>();

    int newYear;
    Edata newEdata = new Edata();
    private EdataK newEdataK = new EdataK();
    private GreenHouse newGreenhouse = new GreenHouse();
    private GreenHouseK newGreenhouseK = new GreenHouseK();
    private GreenHouseT newGreenhouseT = new GreenHouseT();
    private Water newWater = new Water();
    private Waste newWaste = new Waste();
    private WasteK newWasteK = new WasteK();
    private WaterK newWaterK = new WaterK();
    private WasteT newWasteT = new WasteT();

    protected async override Task OnInitializedAsync()
    {
    await FetchDatasAsync();
    await FetchEdataAsync();
    await FetchGreenHouseAsync();
    await FetchWaterAsync();
    await FetchWasteAsync();
    await FetchEdataKAsync();
    await FetchGreenHouseKAsync();
    await FetchWaterKAsync();
    await FetchWasteKAsync();
    await FetchGreenHouseTAsync();
    await FetchWasteKAsync();
    await FetchWasteTAsync();
    }

    async Task AddData()
    {
        var response = await httpClient.PostAsJsonAsync("api/datas", newData);
        if (response.IsSuccessStatusCode)
        {
            infoMessage = "Data Created";
            await FetchDatasAsync();
        }
        else
        {
            infoMessage = $"Error creating data: {response.StatusCode}, {response.ReasonPhrase}.";
        }
    }

    async Task AddEdata()
    {
        newEdata.Year = new DateTime(newYear, 1, 1);
        var response = await httpClient.PostAsJsonAsync("api/edata", newEdata);
        if (response.IsSuccessStatusCode)
        {
            infoMessage = "Data Created";
            await FetchEdataAsync();
        }
        else
        {
            infoMessage = $"Error creating data: {response.StatusCode}, {response.ReasonPhrase}.";
        }
    }

    async Task AddEdataK()
    {
        newEdataK.Year = new DateTime(newYear, 1, 1);
        var response = await httpClient.PostAsJsonAsync("api/edatak", newEdataK);
        if (response.IsSuccessStatusCode)
        {
            infoMessage = "Data Created";
            await FetchEdataKAsync();
        }
        else
        {
            infoMessage = $"Error creating data: {response.StatusCode}, {response.ReasonPhrase}.";
        }
    }

    async Task AddGreenhouse()
    {
        newGreenhouse.Year = new DateTime(newYear, 1, 1);
        var response = await httpClient.PostAsJsonAsync("api/greenhouse", newGreenhouse);
        if (response.IsSuccessStatusCode)
        {
            infoMessage = "Data Created";
            await FetchGreenHouseAsync();
        }
        else
        {
            infoMessage = $"Error creating data: {response.StatusCode}, {response.ReasonPhrase}.";
        }
    }

    private async Task AddGreenhouseK()
    {
        newGreenhouseK.Year = new DateTime(newYear, 1, 1);
        var response = await httpClient.PostAsJsonAsync("api/greenhousek", newGreenhouseK);
        if (response.IsSuccessStatusCode)
        {
            infoMessage = "Data Created";
            await FetchGreenHouseKAsync();
        }
        else
        {
            infoMessage = $"Error creating data: {response.StatusCode}, {response.ReasonPhrase}.";
        }
    }

    private async Task AddGreenhouseT()
    {
        newGreenhouseT.Year = new DateTime(newYear, 1, 1);
        var response = await httpClient.PostAsJsonAsync("api/greenhouset", newGreenhouseT);
        if (response.IsSuccessStatusCode)
        {
            infoMessage = "Data Created";
            await FetchGreenHouseTAsync();
        }
        else
        {
            infoMessage = $"Error creating data: {response.StatusCode}, {response.ReasonPhrase}.";
        }
    }

    async Task AddWater()
    {
        newWater.Year = new DateTime(newYear, 1, 1);
        var response = await httpClient.PostAsJsonAsync("api/water", newWater);
        if (response.IsSuccessStatusCode)
        {
            infoMessage = "Data Created";
            await FetchWaterAsync();
        }
        else
        {
            infoMessage = $"Error creating data: {response.StatusCode}, {response.ReasonPhrase}.";
        }
    }

    async Task AddWaste()
    {
        newWaste.Year = new DateTime(newYear, 1, 1);
        var response = await httpClient.PostAsJsonAsync("api/waste", newWaste);
        if (response.IsSuccessStatusCode)
        {
            infoMessage = "Data Created";
            await FetchWasteAsync();
        }
        else
        {
            infoMessage = $"Error creating data: {response.StatusCode}, {response.ReasonPhrase}.";
        }
    }

    async Task AddWaterK()
    {
        newWaterK.Year = new DateTime(newYear, 1, 1);
        var response = await httpClient.PostAsJsonAsync("api/waterk", newWaterK);
        if (response.IsSuccessStatusCode)
        {
            infoMessage = "Data Created";
            await FetchWaterKAsync();
        }
        else
        {
            infoMessage = $"Error creating data: {response.StatusCode}, {response.ReasonPhrase}.";
        }
    }

    async Task AddWasteK()
    {
        newWasteK.Year = new DateTime(newYear, 1, 1);
        var response = await httpClient.PostAsJsonAsync("api/wastek", newWasteK);
        if (response.IsSuccessStatusCode)
        {
            infoMessage = "Data Created";
            await FetchWasteKAsync();
        }
        else
        {
            infoMessage = $"Error creating data: {response.StatusCode}, {response.ReasonPhrase}.";
        }
    }

    async Task AddWasteT()
    {
        newWasteT.Year = new DateTime(newYear, 1, 1);
        var response = await httpClient.PostAsJsonAsync("api/wastet", newWasteT);
        if (response.IsSuccessStatusCode)
        {
            infoMessage = "Data Created";
            await FetchWasteTAsync();
        }
        else
        {
            infoMessage = $"Error creating data: {response.StatusCode}, {response.ReasonPhrase}.";
        }
    }

    @* async Task UpdateData(Data data)
    {
        await httpClient.PutAsJsonAsync($"api/datas/{data.Id}", data);
        await FetchDatasAsync();
    } *@

    async Task FetchDatasAsync()
    {
        try
        {
            var response = await httpClient.GetStringAsync("api/datas");
            var options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
            datas = JsonSerializer.Deserialize<List<Data>>(response, options) ?? new();
        }
        catch
        {
            
        }
    }

    async Task RemoveDataAsync(int id)
    {
        await httpClient.DeleteAsync($"api/datas?id={id}");
        await FetchDatasAsync();
    }

    async Task FetchEdataAsync()
    {
        try
        {
            var response = await httpClient.GetStringAsync("api/edata");
            var options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
            edataList = JsonSerializer.Deserialize<List<Edata>>(response, options) ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching Edata: {ex.Message}");
        }
    }

    async Task FetchEdataKAsync()
    {
        try
        {
            var response = await httpClient.GetStringAsync("api/edatak");
            var options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
            edataKList = JsonSerializer.Deserialize<List<EdataK>>(response, options) ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching EdataK: {ex.Message}");
        }
    }

    async Task FetchGreenHouseAsync()
    {
        try
        {
            var response = await httpClient.GetStringAsync("api/greenhouse");
            var options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
            greenHouseList = JsonSerializer.Deserialize<List<GreenHouse>>(response, options) ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching GreenHouse data: {ex.Message}");
        }
    }

    async Task FetchGreenHouseKAsync()
    {
        try
        {
            var response = await httpClient.GetStringAsync("api/greenhousek");
            var options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
            greenHouseKList = JsonSerializer.Deserialize<List<GreenHouseK>>(response, options) ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching GreenHouseK: {ex.Message}");
        }
    }

    async Task FetchGreenHouseTAsync()
    {
        try
        {
            var response = await httpClient.GetStringAsync("api/greenhouset");
            var options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
            greenHouseTList = JsonSerializer.Deserialize<List<GreenHouseT>>(response, options) ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching GreenHouseT: {ex.Message}");
        }
    }

    async Task FetchWaterAsync()
    {
        try
        {
            var response = await httpClient.GetStringAsync("api/water");
            var options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
            waterList = JsonSerializer.Deserialize<List<Water>>(response, options) ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching Water data: {ex.Message}");
        }
    }

    async Task FetchWasteAsync()
    {
        try
        {
            var response = await httpClient.GetStringAsync("api/waste");
            var options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
            wasteList = JsonSerializer.Deserialize<List<Waste>>(response, options) ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching Waste data: {ex.Message}");
        }
    }

    async Task FetchWasteTAsync()
    {
        try
        {
            var response = await httpClient.GetStringAsync("api/wastet");
            var options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
            wasteTList = JsonSerializer.Deserialize<List<WasteT>>(response, options) ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching WasteT data: {ex.Message}");
        }
    }

    async Task FetchWasteKAsync()
    {
        try
        {
            var response = await httpClient.GetStringAsync("api/wastek");
            var options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
            wasteKList = JsonSerializer.Deserialize<List<WasteK>>(response, options) ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching WasteT data: {ex.Message}");
        }
    }

    async Task FetchWaterKAsync()
    {
        try
        {
            var response = await httpClient.GetStringAsync("api/waterk");
            var options = new JsonSerializerOptions() { PropertyNameCaseInsensitive = true };
            waterKList = JsonSerializer.Deserialize<List<WaterK>>(response, options) ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching WaterK data: {ex.Message}");
        }
    }

    async Task ApplyChanges()
    {
        foreach (var edata in edataList)
        {
            await httpClient.PutAsJsonAsync($"api/edata/{edata.Environmentid}", edata);
        }
        await FetchEdataAsync();
    }

    async Task ApplyWasteChanges()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync("api/waste", wasteList);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Waste changes applied successfully.");
            }
            else
            {
                Console.WriteLine($"Error applying Waste changes: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error applying Waste changes: {ex.Message}");
        }
    }

    async Task ApplyWasteKChanges()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync("api/wastek", wasteKList);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Waste changes applied successfully.");
            }
            else
            {
                Console.WriteLine($"Error applying Waste changes: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error applying Waste changes: {ex.Message}");
        }
    }

    async Task ApplyWasteTChanges()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync("api/wastet", wasteTList);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Waste changes applied successfully.");
            }
            else
            {
                Console.WriteLine($"Error applying Waste changes: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error applying Waste changes: {ex.Message}");
        }
    }
    
    async Task ApplyEdataChanges()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync("api/edata", edataList);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Edata changes applied successfully.");
            }
            else
            {
                Console.WriteLine($"Error applying Edata changes: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error applying Edata changes: {ex.Message}");
        }
    }

    async Task ApplyEdataKChanges()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync("api/edatak", edataKList);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Edata changes applied successfully.");
            }
            else
            {
                Console.WriteLine($"Error applying Edata changes: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error applying Edata changes: {ex.Message}");
        }
    }

    async Task ApplyGreenHouseChanges()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync("api/greenhouse", greenHouseList);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("GreenHouse changes applied successfully.");
            }
            else
            {
                Console.WriteLine($"Error applying GreenHouse changes: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error applying GreenHouse changes: {ex.Message}");
        }
    }

    async Task ApplyGreenHouseKChanges()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync("api/greenhousek", greenHouseKList);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("GreenHouseK changes applied successfully.");
            }
            else
            {
                Console.WriteLine($"Error applying GreenHouseK changes: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error applying GreenHouse changes: {ex.Message}");
        }
    }

    async Task ApplyGreenHouseTChanges()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync("api/greenhouset", greenHouseTList);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("GreenHouseT changes applied successfully.");
            }
            else
            {
                Console.WriteLine($"Error applying GreenHouseT changes: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error applying GreenHouse changes: {ex.Message}");
        }
    }

    async Task ApplyWaterChanges()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync("api/water", waterList);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Water changes applied successfully.");
            }
            else
            {
                Console.WriteLine($"Error applying Water changes: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error applying Water changes: {ex.Message}");
        }
    }

    async Task ApplyWaterKChanges()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync("api/waterk", waterKList);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("WaterK changes applied successfully.");
            }
            else
            {
                Console.WriteLine($"Error applying WaterK changes: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error applying WaterK changes: {ex.Message}");
        }
    }

    async Task DeleteEdata(int environmentId)
    {
        try
        {
            var response = await httpClient.DeleteAsync($"api/edata/{environmentId}");
            if (response.IsSuccessStatusCode)
            {
                infoMessage = "Data Deleted";
                await FetchEdataAsync();
            }
            else
            {
                infoMessage = $"Error deleting data: {response.StatusCode}, {response.ReasonPhrase}.";
            }
        }
        catch (Exception ex)
        {
            infoMessage = $"Error deleting data: {ex.Message}";
        }
    }

    async Task DeleteEdataK(int environmentId)
    {
        try
        {
            var response = await httpClient.DeleteAsync($"api/edatak/{environmentId}");
            if (response.IsSuccessStatusCode)
            {
                infoMessage = "Data Deleted";
                await FetchEdataKAsync();
            }
            else
            {
                infoMessage = $"Error deleting data: {response.StatusCode}, {response.ReasonPhrase}.";
            }
        }
        catch (Exception ex)
        {
            infoMessage = $"Error deleting data: {ex.Message}";
        }
    }

    async Task DeleteGreenhouse(int greenhouseId)
    {
        try
        {
            var response = await httpClient.DeleteAsync($"api/greenhouse/{greenhouseId}");
            if (response.IsSuccessStatusCode)
            {
                infoMessage = "Data Deleted";
                await FetchGreenHouseAsync();
            }
            else
            {
                infoMessage = $"Error deleting data: {response.StatusCode}, {response.ReasonPhrase}.";
            }
        }
        catch (Exception ex)
        {
            infoMessage = $"Error deleting data: {ex.Message}";
        }
    }

    async Task DeleteGreenhouseK(int greenhouseId)
    {
        try
        {
            var response = await httpClient.DeleteAsync($"api/greenhousek/{greenhouseId}");
            if (response.IsSuccessStatusCode)
            {
                infoMessage = "Data Deleted";
                await FetchGreenHouseKAsync();
            }
            else
            {
                infoMessage = $"Error deleting data: {response.StatusCode}, {response.ReasonPhrase}.";
            }
        }
        catch (Exception ex)
        {
            infoMessage = $"Error deleting data: {ex.Message}";
        }
    }

    private async Task DeleteGreenhouseT(int greenhouseId)
    {
        try
        {
            var response = await httpClient.DeleteAsync($"api/greenhouset/{greenhouseId}");
            if (response.IsSuccessStatusCode)
            {
                infoMessage = "Data Deleted";
                await FetchGreenHouseTAsync();
            }
            else
            {
                infoMessage = $"Error deleting data: {response.StatusCode}, {response.ReasonPhrase}.";
            }
        }
        catch (Exception ex)
        {
            infoMessage = $"Error deleting data: {ex.Message}";
        }
    }

    async Task DeleteWater(int waterId)
    {
        try
        {
            var response = await httpClient.DeleteAsync($"api/water/{waterId}");
            if (response.IsSuccessStatusCode)
            {
                infoMessage = "Data Deleted";
                await FetchWaterAsync();
            }
            else
            {
                infoMessage = $"Error deleting data: {response.StatusCode}, {response.ReasonPhrase}.";
            }
        }
        catch (Exception ex)
        {
            infoMessage = $"Error deleting data: {ex.Message}";
        }
    }

    async Task DeleteWaste(int wasteId)
    {
        try
        {
            var response = await httpClient.DeleteAsync($"api/waste/{wasteId}");
            if (response.IsSuccessStatusCode)
            {
                infoMessage = "Data Deleted";
                await FetchWasteAsync();
            }
            else
            {
                infoMessage = $"Error deleting data: {response.StatusCode}, {response.ReasonPhrase}.";
            }
        }
        catch (Exception ex)
        {
            infoMessage = $"Error deleting data: {ex.Message}";
        }
    }

    async Task DeleteWasteK(int wasteId)
    {
        try
        {
            var response = await httpClient.DeleteAsync($"api/wastek/{wasteId}");
            if (response.IsSuccessStatusCode)
            {
                infoMessage = "Data Deleted";
                await FetchWasteKAsync();
            }
            else
            {
                infoMessage = $"Error deleting data: {response.StatusCode}, {response.ReasonPhrase}.";
            }
        }
        catch (Exception ex)
        {
            infoMessage = $"Error deleting data: {ex.Message}";
        }
    }

    async Task DeleteWaterK(int waterId)
    {
        try
        {
            var response = await httpClient.DeleteAsync($"api/waterk/{waterId}");
            if (response.IsSuccessStatusCode)
            {
                infoMessage = "Data Deleted";
                await FetchWaterKAsync();
            }
            else
            {
                infoMessage = $"Error deleting data: {response.StatusCode}, {response.ReasonPhrase}.";
            }
        }
        catch (Exception ex)
        {
            infoMessage = $"Error deleting data: {ex.Message}";
        }
    }

    async Task DeleteWasteT(int wasteId)
    {
        try
        {
            var response = await httpClient.DeleteAsync($"api/wastet/{wasteId}");
            if (response.IsSuccessStatusCode)
            {
                infoMessage = "Data Deleted";
                await FetchWasteTAsync();
            }
            else
            {
                infoMessage = $"Error deleting data: {response.StatusCode}, {response.ReasonPhrase}.";
            }
        }
        catch (Exception ex)
        {
            infoMessage = $"Error deleting data: {ex.Message}";
        }
    }
}

<style>
    .edata-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        font-size: 16px;
        text-align: left;
        background-color: #f9f9f9;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .edata-table th,
    .edata-table td {
        border: 1px solid #ddd;
        padding: 12px;
    }

    .edata-table th {
        background-color: rgba(65, 75, 86);
        color: white;
        font-weight: bold;
    }

    .edata-table tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    .edata-table tr:hover {
        background-color: #ddd;
    }

    .edata-table td {
        text-align: center;
    }

    .edata-table th:first-child,
    .edata-table td:first-child {
        text-align: left;
    }

    .add-data-form {
        margin-top: 20px;
        padding: 20px;
        background-color: #f9f9f9;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .add-data-form div {
        margin-bottom: 10px;
    }

    .add-data-form label {
        display: block;
        font-weight: bold;
        margin-bottom: 5px;
    }

    .add-data-form input {
        width: 100%;
        padding: 8px;
        box-sizing: border-box;
    }

    .apply-button,
    .add-button {
        background-color: rgba(65, 75, 86);
        color: white;
        padding: 10px 20px;
        border: none;
        cursor: pointer;
        font-size: 16px;
    }

    .apply-button:hover,
    .add-button:hover {
        background-color: rgba(65, 75, 86);
    }

    .bordered-section {
        border: 2px solid #ddd;
        padding: 20px;
        margin-bottom: 20px;
        border-radius: 5px;
        background-color: #f9f9f9;
    }

    .centered-headline {
    text-align: center;
    font-family: 'Arial', sans-serif;
    margin-bottom: 20px;
    }

    .centered-header {
        text-align: center;
    }

    .nilfisk-headline {
    color: #007BFF;
    font-size: 2em;
    font-weight: bold;
    }

    .kaescher-headline {
    color: #28A745;
    font-size: 1.8em;
    font-weight: bold;
    }

    .tennant-headline {
    color: #28A745;
    font-size: 1.8em;
    font-weight: bold;
    }

    .section-divider {D
    border: 0;
    height: 2px;
    background: #333;
    margin: 40px 0;
    }
</style>