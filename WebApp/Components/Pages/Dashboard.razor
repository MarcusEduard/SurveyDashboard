@page "/Dashboard"
@attribute [Authorize(Policy = "NotGuest")]
@using WebApp.Components.Layout

<PageTitle>Dashboard</PageTitle>

<ChartComponent />

@* @page "/energycharts"
@using WebAPI.Models
@inject IJSRuntime JSRuntime
@inject HttpClient Http

<button class="btn" @onclick="ShowTotalEnergyChart">Total Energy Consumption</button>
<button class="btn" @onclick="ShowCrudeFuelChart">Crude Fuel</button>
<button class="btn" @onclick="ShowGasFuelChart">Gas Fuel</button>
<button class="btn" @onclick="ShowPurchElecChart">Purchased Electricity</button>
<button class="btn" @onclick="ShowRenewEnergyChart">Renewable Energy</button>
<button class="btn" @onclick="ShowFossilEnergyChart">Fossil Energy Chart</button>
<button class="btn" @onclick="ShowScope12MarketChart">Scope 1 & 2 Market-based</button>
<button class="btn" @onclick="ShowScope12LocationChart">Scope 1 & 2 Location-based</button>
<button class="btn" @onclick="ShowScope3SoldProductsChart">Scope 3 Sold Products</button>
<button class="btn" @onclick="ShowWaterConsumptionChart">Water Consumption</button>
<button class="btn" @onclick="ShowWaterRecycledChart">Water Recycled</button>
<button class="btn" @onclick="ShowTotalWasteChart">Total Waste</button>

<div id="chartsContainer" style="display:none;">
    <div class="chart-container">
        <div class="chart-column" id="totalEnergyChartContainer" style="display:none;">
            <div class="chart-title">Total Energy Consumption</div>
            <canvas id="totalEnergyChart" width="300" height="200"></canvas>
        </div>
        <div class="recommendation-column" id="recommendationContainer" style="display:none;">
            <div class="recommendation-title">Recommendation</div>
            <div id="recommendationText" class="recommendation-box"></div>
        </div>
        <div class="chart-column" id="edataGraphContainer" style="display:none;">
            <div class="chart-title">Energy Data Graph</div>
            <canvas id="edataGraph" width="300" height="200"></canvas>
        </div>
        <div class="chart-column" id="crudeFuelChartContainer" style="display:none;">
            <div class="chart-title">Crude Fuel</div>
            <canvas id="crudeFuelChart" width="300" height="200"></canvas>
        </div>
        <div class="recommendation-column" id="recommendationContainer" style="display:none;">
            <div class="recommendation-title">Recommendation</div>
            <div id="recommendationText" class="recommendation-box"></div>
        </div>
        <div class="chart-column" id="crudeFuelLineChartContainer" style="display:none;">
            <div class="chart-title">Crude Fuel Line Chart</div>
            <canvas id="crudeFuelLineChart" width="300" height="200"></canvas>
        </div>
        <div class="chart-column" id="gasFuelChartContainer" style="display:none;">
            <div class="chart-title">Gas Fuel</div>
            <canvas id="gasFuelChart" width="300" height="200"></canvas>
        </div>
        <div class="recommendation-column" id="recommendationContainer" style="display:none;">
            <div class="recommendation-title">Recommendation</div>
            <div id="recommendationText" class="recommendation-box"></div>
        </div>
        <div class="chart-column" id="gasFuelLineChartContainer" style="display:none;">
            <div class="chart-title">Gas Fuel Line Chart</div>
            <canvas id="gasFuelLineChart" width="300" height="200"></canvas>
        </div>
        <div class="chart-column" id="purchElecChartContainer" style="display:none;">
            <div class="chart-title">Purchased Electricity</div>
            <canvas id="purchElecChart" width="300" height="200"></canvas>
        </div>
        <div class="recommendation-column" id="recommendationContainer" style="display:none;">
            <div class="recommendation-title">Recommendation</div>
            <div id="recommendationText" class="recommendation-box"></div>
        </div>
        <div class="chart-column" id="purchElecLineChartContainer" style="display:none;">
            <div class="chart-title">Purchased Electricity Line Chart</div>
            <canvas id="purchElecLineChart" width="300" height="200"></canvas>
        </div>
        <div class="chart-column" id="renewEnergyChartContainer" style="display:none;">
            <div class="chart-title">Renewable Energy</div>
            <canvas id="renewEnergyChart" width="300" height="200"></canvas>
        </div>
        <div class="recommendation-column" id="recommendationContainer" style="display:none;">
            <div class="recommendation-title">Recommendation</div>
            <div id="recommendationText" class="recommendation-box"></div>
        </div>
        <div class="chart-column" id="renewEnergyLineChartContainer" style="display:none;">
            <div class="chart-title">Renewable Energy Line Chart</div>
            <canvas id="renewEnergyLineChart" width="300" height="200"></canvas>
        </div>
        <div class="chart-column" id="fossilEnergyChartContainer" style="display:none;">
            <div class="chart-title">Fossil Energy</div>
            <canvas id="fossilEnergyChart" width="300" height="200"></canvas>
        </div>
        <div class="recommendation-column" id="recommendationContainer" style="display:none;">
            <div class="recommendation-title">Recommendation</div>
            <div id="recommendationText" class="recommendation-box"></div>
        </div>
        <div class="chart-column" id="fossilEnergyLineChartContainer" style="display:none;">
            <div class="chart-title">Fossil Energy Line Chart</div>
            <canvas id="fossilEnergyLineChart" width="300" height="200"></canvas>
        </div>
        <div class="chart-column" id="scope12MarketChartContainer" style="display:none;">
            <div class="chart-title">Scope 1 & 2 Market</div>
            <canvas id="scope12MarketChart" width="300" height="200"></canvas>
        </div>
        <div class="recommendation-column" id="recommendationContainer" style="display:none;">
            <div class="recommendation-title">Recommendation</div>
            <div id="recommendationText" class="recommendation-box"></div>
        </div>
        <div class="chart-column" id="scope12MarketLineChartContainer" style="display:none;">
            <div class="chart-title">Scope 1 & 2 Market Line Chart</div>
            <canvas id="scope12MarketLineChart" width="300" height="200"></canvas>
        </div>
        <div class="chart-column" id="scope12LocationChartContainer" style="display:none;">
            <div class="chart-title">Scope 1 & 2 Location</div>
            <canvas id="scope12LocationChart" width="300" height="200"></canvas>
        </div>
        <div class="recommendation-column" id="recommendationContainer" style="display:none;">
            <div class="recommendation-title">Recommendation</div>
            <div id="recommendationText" class="recommendation-box"></div>
        </div>
        <div class="chart-column" id="scope12LocationLineChartContainer" style="display:none;">
            <div class="chart-title">Scope 1 & 2 Location Line Chart</div>
            <canvas id="scope12LocationLineChart" width="300" height="200"></canvas>
        </div>
        <div class="chart-column" id="scope3SoldProductsChartContainer" style="display:none;">
            <div class="chart-title">Scope 3 Sold Products</div>
            <canvas id="scope3SoldProductsChart" width="300" height="200"></canvas>
        </div>
        <div class="recommendation-column" id="recommendationContainer" style="display:none;">
            <div class="recommendation-title">Recommendation</div>
            <div id="recommendationText" class="recommendation-box"></div>
        </div>
        <div class="chart-column" id="scope3SoldProductsLineChartContainer" style="display:none;">
            <div class="chart-title">Scope 3 Sold Products Line Chart</div>
            <canvas id="scope3SoldProductsLineChart" width="300" height="200"></canvas>
        </div>
        <div class="chart-column" id="waterConsumptionChartContainer" style="display:none;">
            <div class="chart-title">Water Consumption</div>
            <canvas id="waterConsumptionChart" width="300" height="200"></canvas>
        </div>
        <div class="recommendation-column" id="recommendationContainer" style="display:none;">
            <div class="recommendation-title">Recommendation</div>
            <div id="recommendationText" class="recommendation-box"></div>
        </div>
        <div class="chart-column" id="waterConsumptionLineChartContainer" style="display:none;">
            <div class="chart-title">Water Consumption Line Chart</div>
            <canvas id="waterConsumptionLineChart" width="300" height="200"></canvas>
        </div>
        <div class="chart-column" id="waterRecycledChartContainer" style="display:none;">
            <div class="chart-title">Water Recycled</div>
            <canvas id="waterRecycledChart" width="300" height="200"></canvas>
        </div>
        <div class="recommendation-column" id="recommendationContainer" style="display:none;">
            <div class="recommendation-title">Recommendation</div>
            <div id="recommendationText" class="recommendation-box"></div>
        </div>
        <div class="chart-column" id="waterRecycledLineChartContainer" style="display:none;">
            <div class="chart-title">Water Recycled Line Chart</div>
            <canvas id="waterRecycledLineChart" width="300" height="200"></canvas>
        </div>
        <div class="chart-column" id="totalWasteChartContainer" style="display:none;">
            <div class="chart-title">Total Waste</div>
            <canvas id="totalWasteChart" width="300" height="200"></canvas>
        </div>
        <div class="recommendation-column" id="recommendationContainer" style="display:none;">
            <div class="recommendation-title">Recommendation</div>
            <div id="recommendationText" class="recommendation-box"></div>
        </div>
        <div class="chart-column" id="totalWasteLineChartContainer" style="display:none;">
            <div class="chart-title">Total Waste Line Chart</div>
            <canvas id="totalWasteLineChart" width="300" height="200"></canvas>
        </div>
    </div>
</div>

<div id="recommendationText" style="margin-top: 20px; font-weight: bold;"></div>

<style>
    .chart-container {
    display: flex;
    justify-content: space-between;
    gap: 20px;
}
.recommendation-box {
        border: 2px solid #34495e;
        padding: 10px;
        margin-top: 20px;
        border-radius: 5px;
        background-color: #f9f9f9;
        text-align: center;
        font-weight: bold;
    }
    .chart-column, .recommendation-column {
    flex: 1;
    min-width: 300px;
    max-width: 400px;
    margin: 10px;
}
    canvas {
        max-width: 100%;
        height: 200px;
    }
    .chart-title, .recommendation-title {
    text-align: center;
    font-weight: bold;
    margin-top: 10px;
}
#recommendationText {
    text-align: center;
    margin-top: 20px;
}
    .btn {
        display: inline-block;
        padding: 10px 20px;
        font-size: 16px;
        font-weight: bold;
        text-align: center;
        text-decoration: none;
        color: #fff;
        background-color: rgba(65, 75, 86);
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        margin-bottom: 10px;
    }
    .btn:hover {
        background-color: rgba(65, 75, 86);
    }
    .btn:active {
        background-color: rgba(65, 75, 86);
    }
    .btn:focus {
        outline: none;
        box-shadow: 0 0 0 3px rgba(65, 75, 86);
    }
</style>

@code {
    private async Task ShowTotalEnergyChart()
    {
        await HideAllCharts();
        var edataList = await Http.GetFromJsonAsync<List<Edata>>("api/edata");
        await JSRuntime.InvokeVoidAsync("drawTotalEnergyChart", edataList);
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('totalEnergyChartContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('recommendationContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('edataGraphContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('chartsContainer').style.display = 'block';");
        var totalEnergy = edataList.Sum(e => e.TotalEnergy);
        var recommendation = totalEnergy > 70000 ? "Indicating high energy consumption without sufficient efficiency improvements" : "Indicating effective energy efficiency measures and optimized energy use";
        await JSRuntime.InvokeVoidAsync("updateRecommendationText", recommendation);
    }

    private async Task ShowCrudeFuelChart()
    {
        await HideAllCharts();
        var edataList = await Http.GetFromJsonAsync<List<Edata>>("api/edata");
        await JSRuntime.InvokeVoidAsync("drawCrudeFuelChart", edataList);
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('crudeFuelChartContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('recommendationContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('crudeFuelLineChartContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('chartsContainer').style.display = 'block';");
        var crudeFuel = edataList.Sum(e => e.CrudeFuel);
        var recommendation = crudeFuel > 18300 ? "Indicating heavy reliance on crude oil and petroleum products" : "Showing a shift towards greener alternatives";
        await JSRuntime.InvokeVoidAsync("updateRecommendationText", recommendation);
    }

    private async Task ShowGasFuelChart()
    {
        await HideAllCharts();
        var edataList = await Http.GetFromJsonAsync<List<Edata>>("api/edata");
        await JSRuntime.InvokeVoidAsync("drawGasFuelChart", edataList);
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('gasFuelChartContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('recommendationContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('gasFuelLineChartContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('chartsContainer').style.display = 'block';");
        var gasFuel = edataList.Sum(e => e.GasFuel);
        var recommendation = gasFuel > 11000 ? "Indicating problematic reliance on natural gas" : "Representing a reduced dependence on natural gas";
        await JSRuntime.InvokeVoidAsync("updateRecommendationText", recommendation);
    }

    private async Task ShowPurchElecChart()
    {
        await HideAllCharts();
        var edataList = await Http.GetFromJsonAsync<List<Edata>>("api/edata");
        await JSRuntime.InvokeVoidAsync("drawPurchElecChart", edataList);
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('purchElecChartContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('recommendationContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('purchElecLineChartContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('chartsContainer').style.display = 'block';");
        var purchElec = edataList.Sum(e => e.PurchElec);
        var recommendation = purchElec > 6600 ? "Indicating over-reliance on fossil-based external energy" : "Showing minimal external fossil energy dependency";
        await JSRuntime.InvokeVoidAsync("updateRecommendationText", recommendation);
    }

    private async Task ShowRenewEnergyChart()
    {
        await HideAllCharts();
        var edataList = await Http.GetFromJsonAsync<List<Edata>>("api/edata");
        await JSRuntime.InvokeVoidAsync("drawRenewEnergyChart", edataList);
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('renewEnergyChartContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('recommendationContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('renewEnergyLineChartContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('chartsContainer').style.display = 'block';");
        var renewEnergy = edataList.Sum(e => e.RenewEnergy);
        var recommendation = renewEnergy > 12000 ? "Demonstrating substantial use of renewables" : "Indicating insufficient adoption of renewable energy";
        await JSRuntime.InvokeVoidAsync("updateRecommendationText", recommendation);
    }

    private async Task ShowFossilEnergyChart()
    {
        await HideAllCharts();
        var edataList = await Http.GetFromJsonAsync<List<Edata>>("api/edata");
        await JSRuntime.InvokeVoidAsync("drawFossilEnergyChart", edataList);
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('fossilEnergyChartContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('recommendationContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('fossilEnergyLineChartContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('chartsContainer').style.display = 'block';");
        var fossilEnergy = edataList.Sum(e => e.FossilEnergy);
        var recommendation = fossilEnergy > 45000 ? "Indicating critical reliance on fossil fuels" : "Indicating significant progress in reducing fossil fuel dependency";
        await JSRuntime.InvokeVoidAsync("updateRecommendationText", recommendation);
    }

    private async Task ShowScope12MarketChart()
    {
        await HideAllCharts();
        var greenHouseList = await Http.GetFromJsonAsync<List<GreenHouse>>("api/greenhouse");
        await JSRuntime.InvokeVoidAsync("drawScope12MarketChart", greenHouseList);
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('scope12MarketChartContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('recommendationContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('scope12MarketLineChartContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('chartsContainer').style.display = 'block';");
        var scope12Market = greenHouseList.Sum(g => g.scope12Market);
        var recommendation = scope12Market > 15000 ? "Indicating high emissions from direct operations and purchased energy" : "Reflecting low emissions and substantial reliance on green energy";
        await JSRuntime.InvokeVoidAsync("updateRecommendationText", recommendation);
    }

    private async Task ShowScope12LocationChart()
    {
        await HideAllCharts();
        var greenHouseList = await Http.GetFromJsonAsync<List<GreenHouse>>("api/greenhouse");
        await JSRuntime.InvokeVoidAsync("drawScope12LocationChart", greenHouseList);
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('scope12LocationChartContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('recommendationContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('scope12LocationLineChartContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('chartsContainer').style.display = 'block';");
        var scope12Location = greenHouseList.Sum(g => g.scope12location);
        var recommendation = scope12Location > 15000 ? "Indicating a heavy reliance on carbon-intensive operations" : "Demonstrating effective energy efficiency measures";
        await JSRuntime.InvokeVoidAsync("updateRecommendationText", recommendation);
    }

    private async Task ShowScope3SoldProductsChart()
    {
        await HideAllCharts();
        var greenHouseList = await Http.GetFromJsonAsync<List<GreenHouse>>("api/greenhouse");
        await JSRuntime.InvokeVoidAsync("drawScope3SoldProductsChart", greenHouseList);
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('scope3SoldProductsChartContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('recommendationContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('scope3SoldProductsLineChartContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('chartsContainer').style.display = 'block';");
        var scope3SoldProducts = greenHouseList.Sum(g => g.scope3soldproducts);
        var recommendation = scope3SoldProducts > 1500000 ? "Indicating limited progress in mitigating emissions from sold products" : "Showing improved product efficiency and reduced lifecycle emissions";
        await JSRuntime.InvokeVoidAsync("updateRecommendationText", recommendation);
    }

    private async Task ShowWaterConsumptionChart()
    {
        await HideAllCharts();
        var waterList = await Http.GetFromJsonAsync<List<Water>>("api/water");
        await JSRuntime.InvokeVoidAsync("drawWaterConsumptionChart", waterList);
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('waterConsumptionChartContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('recommendationContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('waterConsumptionLineChartContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('chartsContainer').style.display = 'block';");
        var waterConsumption = waterList.Sum(w => w.WaterConsumption);
        var recommendation = waterConsumption > 60000 ? "Indicating high water usage and lack of water-saving measures" : "indicating strong water conservation practices";
        await JSRuntime.InvokeVoidAsync("updateRecommendationText", recommendation);
    }

    private async Task ShowWaterRecycledChart()
    {
        await HideAllCharts();
        var waterList = await Http.GetFromJsonAsync<List<Water>>("api/water");
        await JSRuntime.InvokeVoidAsync("drawWaterRecycledChart", waterList);
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('waterRecycledChartContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('recommendationContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('waterRecycledLineChartContainer').style.display = 'block';"); 
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('chartsContainer').style.display = 'block';");
        var waterRecycled = waterList.Sum(w => w.WaterRecycled);
        var recommendation = waterRecycled > 15000 ? "Demonstrating robust water recycling initiatives" : "Indicating insufficient efforts to reuse water resources";
        await JSRuntime.InvokeVoidAsync("updateRecommendationText", recommendation);
    }

    private async Task ShowTotalWasteChart()
    {
        await HideAllCharts();
        var wasteList = await Http.GetFromJsonAsync<List<Waste>>("api/waste");
        await JSRuntime.InvokeVoidAsync("drawTotalWasteChart", wasteList);
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('totalWasteChartContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('recommendationContainer').style.display = 'block';");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('totalWasteLineChartContainer').style.display = 'block';");    
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('chartsContainer').style.display = 'block';"); 
        var totalWaste = wasteList.Sum(w => w.TotalWaste);
        var recommendation = totalWaste > 1500 ? "Indicating excessive waste generation without sufficient mitigation efforts" : "Reflecting effective waste reduction and management strategies";
        await JSRuntime.InvokeVoidAsync("updateRecommendationText", recommendation);
    }

    private async Task HideAllCharts()
    {
        await JSRuntime.InvokeVoidAsync("hideAllCharts");
    }
} *@