@page "/survey-dashboard"
@attribute [Authorize(Policy = "NotGuest")]
@using WebAPI.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient httpClient
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="dashboard-container">
    <h2>Survey Analytics Dashboard</h2>
    
    @if (isLoading)
    {
        <div class="loading-spinner">
            <div class="spinner"></div>
            <p>Loading survey data...</p>
        </div>
    }
    else if (surveyResponses.Count == 0)
    {
        <div class="no-data">
            <p>No survey responses available yet.</p>
        </div>
    }
    else
    {
        <!-- Summary Cards -->
        <div class="summary-cards">
            <div class="card clickable" @onclick='() => ScrollToSection("responses")'>
                <div class="card-icon">üìä</div>
                <h3 class="counter" data-target="@surveyResponses.Count">@surveyResponses.Count</h3>
                <p>Total Responses</p>
                <div class="card-arrow">‚Üí</div>
            </div>
            <div class="card clickable" @onclick='() => ScrollToSection("satisfaction")'>
                <div class="card-icon">‚≠ê</div>
                <h3 class="counter satisfaction-score" data-target="@Math.Round(avgSatisfaction, 1)">@Math.Round(avgSatisfaction, 1)</h3>
                <p>Avg Overall Satisfaction</p>
                <div class="satisfaction-bar">
                    <div class="satisfaction-fill" style="width: @(avgSatisfaction * 10)%"></div>
                </div>
            </div>
            <div class="card clickable" @onclick='() => ScrollToSection("sectors")'>
                <div class="card-icon">üè¢</div>
                <h3 class="counter" data-target="@sectorCounts.Count">@sectorCounts.Count</h3>
                <p>Active Sectors</p>
                <div class="card-arrow">‚Üí</div>
            </div>
        </div>

        <!-- Sector Overview Charts -->
        <div class="charts-section">
            <div class="section-header">
                <h3>üìà Analytics</h3>
                <div class="filter-buttons">
                    <button class="filter-btn @(selectedFilter == "all" ? "active" : "")" @onclick='() => SetFilter("all")'>All Sectors</button>
                    @foreach (var sector in sectorCounts.Keys)
                    {
                        <button class="filter-btn @(selectedFilter == sector ? "active" : "")" @onclick="() => SetFilter(sector)">@GetSectorShortName(sector)</button>
                    }
                </div>
            </div>
            
            <!-- Bar Chart: Responses per Sector -->
            <div class="chart-container" id="responses">
                <div class="chart-header">
                    <h4>üîç Survey Responses by Sector</h4>
                    <div class="chart-controls">
                        <button class="view-btn @(chartView == "count" ? "active" : "")" @onclick='() => SetChartView("count")'>Count</button>
                        <button class="view-btn @(chartView == "percentage" ? "active" : "")" @onclick='() => SetChartView("percentage")'>%</button>
                        <button class="view-btn @(chartView == "completion" ? "active" : "")" @onclick='() => SetChartView("completion")'>Completion Rate</button>
                    </div>
                </div>
                <div class="interactive-bar-chart">
                    @foreach (var sector in GetFilteredSectors().OrderByDescending(x => x.Value))
                    {
                        var totalCount = sector.Value;
                        var completedCount = GetCompletedCountForSector(sector.Key);
                        var completionRate = totalCount > 0 ? (double)completedCount / totalCount * 100 : 0;
                        
                        var displayValue = chartView switch
                        {
                            "percentage" => $"{((double)sector.Value / surveyResponses.Count * 100):F1}%",
                            "completion" => $"{completionRate.ToString("F0")}% ({completedCount}/{totalCount})",
                            _ => sector.Value.ToString()
                        };
                        
                        var barWidth = chartView switch
                        {
                            "percentage" => (double)sector.Value / surveyResponses.Count * 100,
                            "completion" => completionRate,
                            _ => totalCount > 0 ? Math.Max(((double)totalCount / surveyResponses.Count * 100), 5) : 0
                        };
                        
                        <div class="interactive-bar-item @(hoveredSector == sector.Key ? "hovered" : "")" 
                             @onclick="() => ToggleSectorDetails(sector.Key)"
                             @onmouseover="() => hoveredSector = sector.Key"
                             @onmouseleave="() => hoveredSector = null">
                            <div class="bar-header">
                                <div class="bar-label">
                                    <span class="sector-icon">@GetSectorIcon(sector.Key)</span>
                                    @sector.Key
                                </div>
                                <div class="bar-value-display">@displayValue</div>
                            </div>
                            <div class="bar-wrapper">
                                <div class="interactive-bar" 
                                     style="width: @(barWidth)%; background: linear-gradient(135deg, @GetSectorColor(sector.Key), @GetSectorColorDark(sector.Key)); animation-delay: @(Array.IndexOf(sectorCounts.Keys.ToArray(), sector.Key) * 0.1)s">
                                    <div class="bar-shine"></div>
                                </div>
                                @if (chartView == "completion")
                                {
                                    <div class="completion-progress-bg">
                                        <div class="completion-progress-fill" style="width: @(completionRate)%"></div>
                                    </div>
                                }
                            </div>
                            @if (expandedSectors.Contains(sector.Key))
                            {
                                <div class="sector-dropdown">
                                    <div class="dropdown-stats">
                                        <div class="mini-stat">
                                            <span class="mini-stat-value">@Math.Round(GetSectorAverage(sector.Key, "satisfaction"), 1)</span>
                                            <span class="mini-stat-label">Avg Satisfaction</span>
                                        </div>
                                        <div class="mini-stat">
                                            <span class="mini-stat-value">@completedCount</span>
                                            <span class="mini-stat-label">Completed</span>
                                        </div>
                                        <div class="mini-stat">
                                            <span class="mini-stat-value">@(totalCount - completedCount)</span>
                                            <span class="mini-stat-label">Pending</span>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>

            <!-- Average Satisfaction by Sector -->
            <div class="chart-container" id="satisfaction">
                <h4>‚≠ê Satisfaction Ratings</h4>
                <div class="satisfaction-grid">
                    @foreach (var sector in sectorAverages.OrderByDescending(x => x.Value))
                    {
                        var percentage = sector.Value / 10 * 100;
                        var satisfaction = sector.Value;
                        var satisfactionClass = satisfaction >= 8 ? "excellent" : satisfaction >= 6 ? "good" : satisfaction >= 4 ? "average" : "poor";
                        
                        <div class="satisfaction-card @satisfactionClass @(selectedSector == sector.Key ? "selected" : "")" 
                             @onclick="() => SelectSector(sector.Key)">
                            <div class="satisfaction-header">
                                <span class="sector-icon">@GetSectorIcon(sector.Key)</span>
                                <h5>@sector.Key</h5>
                                <div class="satisfaction-score-big">@Math.Round(sector.Value, 1)</div>
                            </div>
                            <div class="satisfaction-meter">
                                <div class="meter-track"></div>
                                <div class="meter-fill" style="width: @(percentage)%"></div>
                                <div class="meter-labels">
                                    @for (int i = 0; i <= 10; i += 2)
                                    {
                                        <span class="meter-label">@i</span>
                                    }
                                </div>
                            </div>
                            <div class="satisfaction-emotion">@GetSatisfactionEmoji(satisfaction)</div>
                        </div>
                    }
                </div>
            </div>

            <!-- Question Performance Chart -->
            <div class="chart-container">
                <h4>üìä Question Performance</h4>
                <div class="question-performance">
                    <div class="question-bars">
                        @for (int q = 1; q <= 9; q++)
                        {
                            var avg = GetQuestionAverage(q);
                            var height = avg / 10 * 100;
                            var questionClass = avg >= 8 ? "excellent" : avg >= 6 ? "good" : avg >= 4 ? "average" : "poor";
                            
                            <div class="question-bar-item @(selectedQuestion == q ? "selected" : "")" @onclick="() => ToggleQuestion(q)">
                                <div class="question-bar @questionClass" style="height: @(height)%">
                                    <div class="bar-value">@Math.Round(avg, 1)</div>
                                </div>
                                <div class="question-label">Q@(q)</div>
                                @if (selectedQuestion == q)
                                {
                                    <div class="question-tooltip">
                                        <strong>@GetQuestionText(q)</strong>
                                        <div class="tooltip-stats">
                                            <span>Average: @Math.Round(avg, 1)/10</span>
                                            <span>@GetQuestionCategory(avg)</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Hierarchical Navigation Section -->
            <div class="sector-details" id="sectors">
                <div class="section-header">
                    <h3>
                        @if (currentNavigationLevel == "sectors")
                        {
                            <span>üè¢ Select Sector for Detailed Analysis</span>
                        }
                        else if (currentNavigationLevel == "customers")
                        {
                            <span>üè¨ Customers in @selectedSector Sector</span>
                        }
                        else if (currentNavigationLevel == "projects")
                        {
                            <span>üìã Projects for @selectedCustomer</span>
                        }
                        else if (currentNavigationLevel == "analysis")
                        {
                            <span>üìä Detailed Analysis: @selectedProject</span>
                        }
                    </h3>
                    
                    @if (currentNavigationLevel != "sectors")
                    {
                        <button class="toggle-btn" @onclick="NavigateBack">‚Üê Back</button>
                    }
                </div>

                @if (currentNavigationLevel == "sectors")
                {
                    <!-- Sector Selection - Show all sectors for all roles in main overview -->
                    <div class="navigation-grid">
                        @foreach (var sectorKvp in sectorCounts)
                        {
                            var sector = sectorKvp.Key;
                            var count = sectorKvp.Value;
                            var sectorResponses = surveyResponses.Where(r => r.Sector == sector).ToList();
                            var avgSat = sectorResponses.Count > 0 ? Math.Round(sectorResponses.Average(r => r.Question1), 1) : 0;
                            var completedCount = sectorResponses.Count(r => r.DateCompleted.HasValue);
                            var completionRate = count > 0 ? (double)completedCount / count * 100 : 0;
                            
                            <div class="navigation-card sector-card" @onclick="() => NavigateToCustomers(sector)">
                                <div class="card-icon">@GetSectorIcon(sector)</div>
                                <h4>@sector</h4>
                                <div class="card-stats">
                                    <div class="stat-item">
                                        <span class="stat-number">@count</span>
                                        <span class="stat-label">Total Surveys</span>
                                    </div>
                                    <div class="stat-item">
                                        <span class="stat-number">@avgSat</span>
                                        <span class="stat-label">Avg. Score</span>
                                    </div>
                                </div>
                                <div class="completion-stats">
                                    <div class="completion-bar">
                                        <div class="completion-fill" style="width: @(completionRate)%"></div>
                                    </div>
                                    <span class="completion-text">@completedCount/@count completed (@(completionRate.ToString("F0"))%)</span>
                                </div>
                                <div class="card-arrow">‚Üí</div>
                            </div>
                        }
                    </div>
                }
                else if (currentNavigationLevel == "customers")
                {
                    <!-- Customer Selection - Now role-filtered for detailed analysis -->
                    <div class="navigation-grid">
                        @foreach (var customer in GetCustomersForSector(selectedSector!))
                        {
                            var customerResponses = GetRoleBasedResponses().Where(r => r.Sector == selectedSector && r.CustomerName == customer).ToList();
                            
                            @if (customerResponses.Any()) // Only show if user has access to this data
                            {
                                var avgSat = customerResponses.Count > 0 ? Math.Round(customerResponses.Average(r => r.Question1), 1) : 0;
                                var projectCount = customerResponses.Select(r => r.ProjectName).Distinct().Count();
                                
                                <div class="navigation-card customer-card" @onclick="() => NavigateToProjects(customer)">
                                    <div class="card-icon">üè¨</div>
                                    <h4>@customer</h4>
                                    <div class="card-stats">
                                        <div class="stat-item">
                                            <span class="stat-number">@projectCount</span>
                                            <span class="stat-label">Projects</span>
                                        </div>
                                        <div class="stat-item">
                                            <span class="stat-number">@avgSat</span>
                                            <span class="stat-label">Avg. Score</span>
                                        </div>
                                    </div>
                                    <div class="card-arrow">‚Üí</div>
                                </div>
                            }
                        }
                    </div>
                }
                else if (currentNavigationLevel == "projects")
                {
                    <!-- Project Selection -->
                    <div class="navigation-grid">
                        @foreach (var project in GetProjectsForCustomer(selectedSector!, selectedCustomer!))
                        {
                            var projectResponses = GetProjectResponses(selectedSector!, selectedCustomer!, project);
                            var avgSat = projectResponses.Count > 0 ? Math.Round(projectResponses.Average(r => r.Question1), 1) : 0;
                            var duration = projectResponses.FirstOrDefault()?.ProjectDuration ?? "N/A";
                            
                            <div class="navigation-card project-card" @onclick="() => NavigateToAnalysis(project)">
                                <div class="card-icon">üìã</div>
                                <h4>@project</h4>
                                <div class="card-stats">
                                    <div class="stat-item">
                                        <span class="stat-number">@projectResponses.Count</span>
                                        <span class="stat-label">Responses</span>
                                    </div>
                                    <div class="stat-item">
                                        <span class="stat-number">@avgSat</span>
                                        <span class="stat-label">Score</span>
                                    </div>
                                </div>
                                <div class="card-arrow">‚Üí</div>
                            </div>
                        }
                    </div>
                }
                else if (currentNavigationLevel == "analysis")
                {
                    <!-- Detailed Analysis -->
                    var analysisResponses = GetProjectResponses(selectedSector!, selectedCustomer!, selectedProject!);
                    
                    <div class="detailed-analysis-container">
                        <div class="analysis-header">
                            <div class="project-info">
                                <h4>@selectedProject</h4>
                                <p><strong>Customer:</strong> @selectedCustomer</p>
                                <p><strong>Sector:</strong> @selectedSector</p>
                                <p><strong>Total Responses:</strong> @analysisResponses.Count</p>
                                @if (analysisResponses.Any())
                                {
                                    <p><strong>Response Period:</strong> 
                                       @analysisResponses.Min(r => r.DateCompleted?.ToString("dd/MM/yyyy") ?? "N/A") - 
                                       @analysisResponses.Max(r => r.DateCompleted?.ToString("dd/MM/yyyy") ?? "N/A")
                                    </p>
                                }
                            </div>
                        </div>

                        <!-- Question Breakdown for this specific project -->
                        <div class="analysis-charts">
                            <div class="chart-container">
                                <h5>üìä Question Breakdown</h5>
                                <div class="question-analysis-grid">
                                    @for (int q = 1; q <= 9; q++)
                                    {
                                        var scores = analysisResponses.Select(r => GetQuestionScore(r, q)).Where(s => s > 0);
                                        var avg = scores.Any() ? Math.Round(scores.Average(), 1) : 0;
                                        var count = scores.Count();
                                        var questionClass = avg >= 8 ? "excellent" : avg >= 6 ? "good" : avg >= 4 ? "average" : "poor";
                                        
                                        <div class="question-analysis-item">
                                            <div class="question-header">
                                                <span class="question-number">Q@(q)</span>
                                                <span class="question-score @questionClass">@avg</span>
                                            </div>
                                            <div class="question-text">@GetQuestionText(q)</div>
                                            <div class="question-bar-container">
                                                <div class="question-bar-bg"></div>
                                                <div class="question-bar-fill @questionClass" style="width: @(avg * 10)%"></div>
                                            </div>
                                            <div class="question-stats">
                                                <span>@count responses</span>
                                                <span>@GetQuestionCategory(avg)</span>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                            
                            <!-- Individual Response Details -->
                            <div class="chart-container">
                                <h5>üìã Individual Survey Responses</h5>
                                <div class="responses-table">
                                    <table class="table table-striped">
                                        <thead>
                                            <tr>
                                                <th>Survey ID</th>
                                                <th>Date Sent</th>
                                                <th>Date Completed</th>
                                                <th>Project Duration</th>
                                                <th>Overall Score</th>
                                                <th>Status</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var response in analysisResponses.OrderByDescending(r => r.DateCompleted))
                                            {
                                                <tr>
                                                    <td><code>@response.SurveyId.Substring(0, 8)...</code></td>
                                                    <td>@(response.DateSent?.ToString("dd/MM/yyyy HH:mm") ?? "N/A")</td>
                                                    <td>@(response.DateCompleted?.ToString("dd/MM/yyyy HH:mm") ?? "N/A")</td>
                                                    <td>@(response.ProjectDuration ?? "N/A")</td>
                                                    <td>
                                                        <span class="badge @(response.Question1 >= 8 ? "bg-success" : response.Question1 >= 6 ? "bg-info" : response.Question1 >= 4 ? "bg-warning" : "bg-danger")">
                                                            @response.Question1/10
                                                        </span>
                                                    </td>
                                                    <td>
                                                        @if (response.DateCompleted.HasValue)
                                                        {
                                                            <span class="badge bg-success">‚úì Completed</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-warning">‚è≥ Pending</span>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

<style>
    .dashboard-container {
        max-width: 1400px;
        margin: 20px auto;
        padding: 20px;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 20px;
        box-shadow: 0 10px 40px rgba(0,0,0,0.1);
        position: relative;
        overflow: hidden;
    }

    .dashboard-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #007bff, #28a745, #ffc107, #dc3545);
        z-index: 1;
    }

    .dashboard-container h2 {
        text-align: center;
        color: #0056b3;
        font-weight: 700;
        margin-bottom: 30px;
        letter-spacing: 1px;
        font-size: 2.5rem;
        text-shadow: 0 2px 4px rgba(0,0,0,0.1);
        background: linear-gradient(135deg, #007bff, #0056b3);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    /* Enhanced Summary Cards */
    .summary-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 24px;
        margin-bottom: 40px;
    }

    .card {
        background: white;
        padding: 32px 24px;
        border-radius: 16px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.08);
        text-align: center;
        border-left: 4px solid #007bff;
        transition: all 0.4s ease;
        position: relative;
        overflow: hidden;
    }

    .card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, transparent 0%, rgba(0,123,255,0.02) 100%);
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .card.clickable {
        cursor: pointer;
    }

    .card.clickable:hover {
        transform: translateY(-8px) scale(1.02);
        box-shadow: 0 16px 48px rgba(0,0,0,0.15);
        border-left-color: #28a745;
    }

    .card.clickable:hover::before {
        opacity: 1;
    }

    .card-icon {
        font-size: 2.5rem;
        margin-bottom: 12px;
        display: block;
    }

    .card h3 {
        font-size: 3rem;
        color: #007bff;
        margin: 0 0 8px 0;
        font-weight: 700;
        transition: all 0.3s ease;
    }

    .card.clickable:hover h3 {
        color: #28a745;
        transform: scale(1.1);
    }

    .card p {
        color: #666;
        margin: 0 0 16px 0;
        font-size: 1rem;
        font-weight: 500;
    }

    .card-arrow {
        font-size: 1.5rem;
        color: #007bff;
        opacity: 0;
        transition: all 0.3s ease;
    }

    .card.clickable:hover .card-arrow {
        opacity: 1;
        transform: translateX(8px);
        color: #28a745;
    }

    .satisfaction-bar {
        height: 8px;
        background: #e9ecef;
        border-radius: 4px;
        margin-top: 12px;
        overflow: hidden;
        position: relative;
    }

    .satisfaction-fill {
        height: 100%;
        background: linear-gradient(90deg, #dc3545 0%, #ffc107 50%, #28a745 100%);
        border-radius: 4px;
        transition: width 1s ease;
    }

    /* Section Headers */
    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        flex-wrap: wrap;
        gap: 20px;
    }

    .section-header h3 {
        color: #333;
        margin: 0;
        font-size: 1.8rem;
        font-weight: 600;
    }

    /* Filter and Control Buttons */
    .filter-buttons, .chart-controls, .view-toggles, .performance-controls {
        display: flex;
        gap: 8px;
        flex-wrap: wrap;
    }

    .filter-btn, .view-btn, .toggle-btn, .perf-btn {
        padding: 8px 16px;
        border: 2px solid #dee2e6;
        background: white;
        border-radius: 20px;
        cursor: pointer;
        font-size: 0.9rem;
        font-weight: 500;
        transition: all 0.3s ease;
        color: #6c757d;
    }

    .filter-btn:hover, .view-btn:hover, .toggle-btn:hover, .perf-btn:hover {
        border-color: #007bff;
        color: #007bff;
        transform: translateY(-2px);
    }

    .filter-btn.active, .view-btn.active, .toggle-btn.active, .perf-btn.active {
        background: #007bff;
        color: white;
        border-color: #007bff;
        box-shadow: 0 4px 12px rgba(0,123,255,0.3);
    }

    /* Enhanced Chart Containers */
    .chart-container {
        background: white;
        padding: 32px;
        margin-bottom: 30px;
        border-radius: 16px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.08);
        border-top: 4px solid #007bff;
        transition: all 0.3s ease;
    }

    .chart-container:hover {
        box-shadow: 0 12px 48px rgba(0,0,0,0.12);
        transform: translateY(-4px);
    }

    .chart-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 24px;
        flex-wrap: wrap;
        gap: 16px;
    }

    .chart-header h4 {
        color: #333;
        margin: 0;
        font-size: 1.4rem;
        font-weight: 600;
    }

    /* Interactive Bar Chart */
    .interactive-bar-chart {
        margin-top: 20px;
    }

    .interactive-bar-item {
        margin-bottom: 20px;
        padding: 16px;
        border-radius: 12px;
        transition: all 0.3s ease;
        cursor: pointer;
        border: 2px solid transparent;
    }

    .interactive-bar-item:hover, .interactive-bar-item.hovered {
        background: rgba(0,123,255,0.05);
        border-color: #007bff;
        transform: translateX(8px);
    }

    .bar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }

    .bar-label {
        display: flex;
        align-items: center;
        gap: 8px;
        font-weight: 600;
        color: #333;
        font-size: 1rem;
    }

    .sector-icon {
        font-size: 1.2rem;
    }

    .bar-value-display {
        font-weight: 700;
        color: #007bff;
        font-size: 1.1rem;
    }

    .bar-wrapper {
        position: relative;
        height: 12px;
        background: #e9ecef;
        border-radius: 6px;
        overflow: hidden;
    }

    .completion-progress-bg {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 100%;
        background: rgba(0,0,0,0.1);
        border-radius: 6px;
    }

    .completion-progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #28a745, #20c997);
        border-radius: 6px;
        transition: width 0.8s ease;
    }

    .completion-bar {
        height: 6px;
        background: #e9ecef;
        border-radius: 3px;
        margin: 8px 0 4px 0;
        overflow: hidden;
    }

    .completion-fill {
        height: 100%;
        background: linear-gradient(90deg, #28a745, #20c997);
        border-radius: 3px;
        transition: width 0.8s ease;
    }

    .completion-stats {
        margin-top: 12px;
        padding-top: 12px;
        border-top: 1px solid #e9ecef;
    }

    .completion-text {
        font-size: 0.85rem;
        color: #666;
        font-weight: 500;
        text-align: center;
        display: block;
        margin-top: 4px;
    }

    .interactive-bar {
        height: 100%;
        border-radius: 6px;
        position: relative;
        animation: slideIn 0.8s ease;
        transition: all 0.3s ease;
    }

    .interactive-bar-item:hover .interactive-bar {
        transform: scaleY(1.2);
    }

    .bar-shine {
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
        animation: shine 2s ease-in-out infinite;
    }

    /* Animations */
    .slideIn {
        animation: slideIn 0.8s ease;
    }

    .shine {
        animation: shine 2s ease-in-out infinite;
    }

    .sector-dropdown {
        margin-top: 16px;
        padding: 16px;
        background: rgba(0,123,255,0.05);
        border-radius: 8px;
        animation: slideDown 0.3s ease;
    }

    /* Remove keyframes - using transitions instead */

    .dropdown-stats {
        display: flex;
        gap: 24px;
        flex-wrap: wrap;
    }

    .mini-stat {
        text-align: center;
    }

    .mini-stat-value {
        display: block;
        font-size: 1.4rem;
        font-weight: 700;
        color: #007bff;
    }

    .mini-stat-label {
        font-size: 0.8rem;
        color: #666;
    }

    /* Satisfaction Grid */
    .satisfaction-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 24px;
        margin-top: 20px;
    }

    .satisfaction-card {
        background: white;
        padding: 24px;
        border-radius: 16px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        border-left: 4px solid #007bff;
        transition: all 0.4s ease;
        cursor: pointer;
        position: relative;
        overflow: hidden;
    }

    .satisfaction-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: radial-gradient(circle at 50% 50%, rgba(0,123,255,0.05) 0%, transparent 70%);
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .satisfaction-card:hover::before, .satisfaction-card.selected::before {
        opacity: 1;
    }

    .satisfaction-card:hover, .satisfaction-card.selected {
        transform: translateY(-8px) scale(1.02);
        box-shadow: 0 12px 40px rgba(0,0,0,0.15);
    }

    .satisfaction-card.excellent { border-left-color: #28a745; }
    .satisfaction-card.good { border-left-color: #17a2b8; }
    .satisfaction-card.average { border-left-color: #ffc107; }
    .satisfaction-card.poor { border-left-color: #dc3545; }

    .satisfaction-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 20px;
    }

    .satisfaction-header h5 {
        margin: 0;
        color: #333;
        font-size: 1.1rem;
        font-weight: 600;
    }

    .satisfaction-score-big {
        font-size: 2rem;
        font-weight: 700;
        color: #007bff;
    }

    .satisfaction-meter {
        position: relative;
        margin-bottom: 16px;
    }

    .meter-track {
        height: 8px;
        background: #e9ecef;
        border-radius: 4px;
    }

    .meter-fill {
        height: 8px;
        background: linear-gradient(90deg, #dc3545, #ffc107, #28a745);
        border-radius: 4px;
        transition: width 1s ease;
        position: absolute;
        top: 0;
    }

    .meter-labels {
        display: flex;
        justify-content: space-between;
        margin-top: 4px;
    }

    .meter-label {
        font-size: 0.7rem;
        color: #999;
    }

    .satisfaction-emotion {
        text-align: center;
        font-size: 2rem;
        margin-top: 12px;
    }

    /* Question Performance */
    .question-bars {
        display: flex;
        gap: 16px;
        margin-top: 20px;
        flex-wrap: wrap;
        justify-content: center;
    }

    .question-bar-item {
        position: relative;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .question-bar {
        width: 60px;
        max-height: 200px;
        min-height: 20px;
        border-radius: 30px 30px 4px 4px;
        position: relative;
        display: flex;
        align-items: flex-end;
        justify-content: center;
        transition: all 0.4s ease;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }

    .question-bar.excellent { background: linear-gradient(180deg, #28a745, #20c997); }
    .question-bar.good { background: linear-gradient(180deg, #17a2b8, #20c997); }
    .question-bar.average { background: linear-gradient(180deg, #ffc107, #ffcd39); }
    .question-bar.poor { background: linear-gradient(180deg, #dc3545, #e55a5a); }

    .question-bar-item:hover .question-bar, .question-bar-item.selected .question-bar {
        transform: scale(1.1);
        box-shadow: 0 8px 24px rgba(0,0,0,0.2);
    }

    .bar-value {
        color: white;
        font-weight: 700;
        font-size: 0.9rem;
        padding: 4px;
        text-shadow: 0 1px 2px rgba(0,0,0,0.3);
    }

    .question-label {
        text-align: center;
        margin-top: 8px;
        font-weight: 600;
        color: #333;
        font-size: 0.9rem;
    }

    .question-tooltip {
        position: absolute;
        top: -60px;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(0,0,0,0.9);
        color: white;
        padding: 8px 12px;
        border-radius: 8px;
        font-size: 0.8rem;
        white-space: nowrap;
        z-index: 10;
        animation: tooltipIn 0.2s ease;
    }

    /* Tooltip animations removed - using transitions */

    .tooltip-stats {
        margin-top: 4px;
        font-size: 0.7rem;
        opacity: 0.8;
    }

    /* Interactive Line Chart */
    .interactive-line-chart {
        position: relative;
        height: 350px;
        margin: 20px 0;
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        border-radius: 12px;
        padding: 24px;
        overflow: hidden;
    }

    .chart-point {
        position: absolute;
        transform: translateX(-50%);
        cursor: pointer;
        z-index: 5;
    }

    .point {
        width: 14px;
        height: 14px;
        background: #007bff;
        border: 3px solid white;
        border-radius: 50%;
        cursor: pointer;
        box-shadow: 0 3px 8px rgba(0,0,0,0.2);
        transition: all 0.3s ease;
    }

    .point:hover, .point.selected {
        transform: scale(1.4);
        background: #28a745;
        box-shadow: 0 6px 16px rgba(0,0,0,0.3);
    }

    .chart-point.hovered .point {
        transform: scale(1.2);
        transition: transform 0.3s ease;
    }

    .point-tooltip {
        position: absolute;
        top: -40px;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(0,0,0,0.9);
        color: white;
        padding: 6px 10px;
        border-radius: 6px;
        font-size: 0.8rem;
        white-space: nowrap;
        z-index: 10;
    }

    /* Sector Cards Grid */
    .sector-cards-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
        gap: 24px;
        margin-top: 20px;
    }

    .enhanced-sector-card {
        background: white;
        padding: 24px;
        border-radius: 16px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.08);
        border-left: 4px solid #007bff;
        transition: all 0.4s ease;
        cursor: pointer;
        position: relative;
        overflow: hidden;
    }

    .enhanced-sector-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, transparent, rgba(0,123,255,0.03));
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .enhanced-sector-card:hover::before, .enhanced-sector-card.selected::before {
        opacity: 1;
    }

    .enhanced-sector-card:hover, .enhanced-sector-card.selected {
        transform: translateY(-8px);
        box-shadow: 0 16px 48px rgba(0,0,0,0.15);
    }

    .sector-card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .sector-title {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .sector-icon-large {
        font-size: 1.8rem;
    }

    .sector-title h4 {
        margin: 0;
        color: #333;
        font-size: 1.3rem;
        font-weight: 600;
    }

    .expand-icon {
        font-size: 1.5rem;
        color: #999;
        transition: transform 0.3s ease;
    }

    .expand-icon.expanded {
        transform: rotate(180deg);
    }

    .sector-quick-stats {
        display: flex;
        justify-content: space-around;
        margin-bottom: 20px;
    }

    .quick-stat {
        text-align: center;
    }

    .stat-circle {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 8px;
        background: conic-gradient(var(--color) var(--fill), #e9ecef var(--fill));
        position: relative;
    }

    .stat-circle::before {
        content: '';
        position: absolute;
        inset: 6px;
        border-radius: 50%;
        background: white;
    }

    .stat-circle span {
        font-weight: 700;
        color: #333;
        font-size: 1rem;
        position: relative;
        z-index: 1;
    }

    .stat-number {
        font-size: 2rem;
        font-weight: 700;
        color: #007bff;
        margin-bottom: 8px;
        display: block;
    }

    .quick-stat label {
        font-size: 0.8rem;
        color: #666;
        font-weight: 500;
    }

    .sector-expanded-content {
        opacity: 1;
        max-height: 500px;
        transition: opacity 0.4s ease, max-height 0.4s ease;
        border-top: 1px solid #e9ecef;
        padding-top: 20px;
        margin-top: 20px;
    }

    .trend-indicators {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 16px;
        margin-bottom: 20px;
    }

    .trend-item {
        padding: 12px;
        background: rgba(0,123,255,0.05);
        border-radius: 8px;
        border-left: 3px solid #007bff;
    }

    .trend-label {
        font-size: 0.8rem;
        color: #666;
        display: block;
        margin-bottom: 4px;
    }

    .trend-value {
        font-weight: 600;
        color: #333;
        font-size: 0.9rem;
    }

    .mini-bars-interactive {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 12px;
        margin-top: 12px;
    }

    .mini-bar-interactive {
        position: relative;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .mini-bar-interactive:hover {
        transform: translateY(-2px);
    }

    .mini-bar-container {
        position: relative;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .mini-bar-bg {
        height: 8px;
        background: #e9ecef;
        border-radius: 4px;
        flex: 1;
    }

    .mini-bar-fill {
        position: absolute;
        height: 8px;
        border-radius: 4px;
        transition: width 0.8s ease;
        left: 20px;
        right: 0;
    }

    .mini-bar-fill.excellent { background: #28a745; }
    .mini-bar-fill.good { background: #17a2b8; }
    .mini-bar-fill.average { background: #ffc107; }
    .mini-bar-fill.poor { background: #dc3545; }

    .mini-bar-label {
        font-size: 0.8rem;
        color: #666;
        min-width: 20px;
        font-weight: 500;
    }

    .mini-bar-tooltip {
        position: absolute;
        top: -30px;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(0,0,0,0.9);
        color: white;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.7rem;
        white-space: nowrap;
        z-index: 10;
    }

    /* Interactive Table */
    .sector-table {
        margin-top: 20px;
        overflow-x: auto;
    }

    .interactive-table {
        width: 100%;
        border-collapse: collapse;
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);
    }

    .interactive-table th {
        background: linear-gradient(135deg, #007bff, #0056b3);
        color: white;
        padding: 16px 12px;
        text-align: left;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        user-select: none;
        position: relative;
    }

    .interactive-table th:hover {
        background: linear-gradient(135deg, #0056b3, #004085);
    }

    .table-row {
        transition: all 0.2s ease;
        cursor: pointer;
        border-bottom: 1px solid #e9ecef;
    }

    .table-row:hover, .table-row.selected {
        background: rgba(0,123,255,0.05);
        transform: scale(1.01);
    }

    .table-row td {
        padding: 16px 12px;
        color: #333;
    }

    .table-sector {
        display: flex;
        align-items: center;
        gap: 8px;
        font-weight: 500;
    }

    .table-sector-icon {
        font-size: 1.1rem;
    }

    .response-count {
        background: #007bff;
        color: white;
        padding: 4px 12px;
        border-radius: 12px;
        font-weight: 600;
        font-size: 0.9rem;
    }

    .score-cell {
        font-weight: 600;
        color: #333;
        padding: 6px 12px;
        border-radius: 8px;
        background: rgba(0,123,255,0.1);
    }

    /* Loading and No Data */
    .loading-spinner {
        text-align: center;
        padding: 80px;
    }

    .spinner {
        width: 50px;
        height: 50px;
        border: 5px solid #f3f3f3;
        border-top: 5px solid #007bff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 20px;
    }

    .no-data {
        text-align: center;
        padding: 80px;
        color: #666;
        font-size: 1.2rem;
    }

    /* Responsive Design - Simplified to avoid Razor compilation issues */
    .dashboard-responsive {
        /* Use CSS Grid auto-fit instead of media queries */
    }

    .summary-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
    }

    .sector-cards-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
    }

    /* Smooth scroll behavior */
    html {
        scroll-behavior: smooth;
    }

    /* Navigation Grid and Cards */
    .navigation-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 24px;
        margin-top: 20px;
    }

    .navigation-card {
        background: white;
        padding: 24px;
        border-radius: 16px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        cursor: pointer;
        transition: all 0.3s ease;
        border: 2px solid transparent;
        position: relative;
        overflow: hidden;
    }

    .navigation-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, transparent 0%, rgba(0,123,255,0.02) 100%);
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .navigation-card:hover {
        transform: translateY(-8px) scale(1.02);
        box-shadow: 0 12px 40px rgba(0,0,0,0.15);
        border-color: #007bff;
    }

    .navigation-card:hover::before {
        opacity: 1;
    }

    .navigation-card .card-icon {
        font-size: 3rem;
        margin-bottom: 16px;
        text-align: center;
    }

    .navigation-card h4 {
        text-align: center;
        margin: 0 0 16px 0;
        color: #333;
        font-size: 1.4rem;
        font-weight: 600;
    }

    .navigation-card .card-stats {
        display: flex;
        justify-content: space-around;
        margin-bottom: 16px;
    }

    .navigation-card .stat-item {
        text-align: center;
    }

    .navigation-card .stat-number {
        display: block;
        font-size: 1.8rem;
        font-weight: 700;
        color: #007bff;
        margin-bottom: 4px;
    }

    .navigation-card .stat-label {
        font-size: 0.9rem;
        color: #666;
        font-weight: 500;
    }

    .navigation-card .card-meta {
        text-align: center;
        color: #666;
        font-size: 0.9rem;
        margin-bottom: 8px;
    }

    .navigation-card .card-arrow {
        text-align: center;
        font-size: 2rem;
        color: #007bff;
        opacity: 0;
        transition: all 0.3s ease;
    }

    .navigation-card:hover .card-arrow {
        opacity: 1;
        transform: translateX(8px);
        color: #28a745;
    }

    /* Detailed Analysis */
    .detailed-analysis-container {
        background: white;
        border-radius: 16px;
        padding: 24px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.08);
        margin-top: 20px;
    }

    .analysis-header {
        margin-bottom: 24px;
        padding-bottom: 16px;
        border-bottom: 2px solid #e9ecef;
    }

    .project-info h4 {
        color: #007bff;
        margin: 0 0 12px 0;
        font-size: 1.6rem;
    }

    .project-info p {
        margin: 4px 0;
        color: #666;
    }

    .question-analysis-grid {
        display: grid;
        gap: 20px;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    }

    .question-analysis-item {
        background: #f8f9fa;
        padding: 16px;
        border-radius: 12px;
        border-left: 4px solid #007bff;
    }

    .question-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }

    .question-number {
        font-weight: 600;
        color: #007bff;
        font-size: 1.1rem;
    }

    .question-score {
        font-weight: 700;
        font-size: 1.2rem;
        padding: 4px 8px;
        border-radius: 6px;
        color: white;
    }

    .question-score.excellent { background: #28a745; }
    .question-score.good { background: #17a2b8; }
    .question-score.average { background: #ffc107; color: #333; }
    .question-score.poor { background: #dc3545; }

    .question-text {
        margin-bottom: 12px;
        font-size: 0.9rem;
        color: #555;
        font-weight: 500;
    }

    .question-bar-container {
        position: relative;
        height: 8px;
        background: #dee2e6;
        border-radius: 4px;
        margin-bottom: 8px;
        overflow: hidden;
    }

    .question-bar-fill {
        height: 100%;
        border-radius: 4px;
        transition: width 0.8s ease;
    }

    .question-bar-fill.excellent { background: #28a745; }
    .question-bar-fill.good { background: #17a2b8; }
    .question-bar-fill.average { background: #ffc107; }
    .question-bar-fill.poor { background: #dc3545; }

    .question-stats {
        display: flex;
        justify-content: space-between;
        font-size: 0.8rem;
        color: #666;
    }

    /* Individual Responses Table */
    .responses-table {
        margin-top: 16px;
    }

    .responses-table table {
        width: 100%;
        border-collapse: collapse;
    }

    .responses-table th,
    .responses-table td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid #dee2e6;
    }

    .responses-table th {
        background-color: #f8f9fa;
        font-weight: 600;
        color: #333;
    }

    .responses-table tr:hover {
        background-color: #f8f9fa;
    }

    .responses-table code {
        background: #f1f3f4;
        padding: 2px 6px;
        border-radius: 4px;
        font-family: 'Courier New', monospace;
        font-size: 0.9rem;
    }

    .responses-table .badge {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .bg-success { background-color: #28a745 !important; color: white; }
    .bg-info { background-color: #17a2b8 !important; color: white; }
    .bg-warning { background-color: #ffc107 !important; color: #333; }
    .bg-danger { background-color: #dc3545 !important; color: white; }
</style>

@code {
    List<SurveyResponse> surveyResponses = new List<SurveyResponse>();
    bool isLoading = true;
    Dictionary<string, int> sectorCounts = new Dictionary<string, int>();
    Dictionary<string, double> sectorAverages = new Dictionary<string, double>();
    double avgSatisfaction = 0;

    // Interactive states
    string selectedFilter = "all";
    string chartView = "count";
    string detailView = "cards";
    string? selectedSector = null;
    string? selectedTableRow = null;
    string? hoveredSector = null;
    string? hoveredMiniBar = null;
    int? selectedQuestion = null;
    int? hoveredPoint = null;
    
    // Hierarchical navigation states
    string? selectedCustomer = null;
    string? selectedProject = null;
    string currentNavigationLevel = "sectors"; // sectors, customers, projects, analysis
    
    // Expansion states
    HashSet<string> expandedSectors = new HashSet<string>();
    HashSet<string> expandedSectorCards = new HashSet<string>();
    
    // Table sorting
    string sortColumn = "sector";
    bool sortAscending = true;
    
    // User role for filtering
    string userRole = "";

    protected override async Task OnInitializedAsync()
    {
        // Get user role for filtering
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            var roleClaim = authState.User.FindFirst("Role");
            userRole = roleClaim?.Value ?? "";
        }
        
        await LoadSurveyData();
    }

    async Task LoadSurveyData()
    {
        isLoading = true;
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<SurveyResponse>>("api/survey/responses");
            surveyResponses = response ?? new List<SurveyResponse>();
            
            CalculateStatistics();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading survey data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    void CalculateStatistics()
    {
        if (!surveyResponses.Any()) return;

        // Calculate sector counts
        sectorCounts = surveyResponses
            .GroupBy(r => r.Sector)
            .ToDictionary(g => g.Key, g => g.Count());

        // Calculate sector averages for overall satisfaction
        sectorAverages = surveyResponses
            .GroupBy(r => r.Sector)
            .ToDictionary(g => g.Key, g => g.Average(r => r.Question1));

        // Calculate overall average satisfaction
        avgSatisfaction = surveyResponses.Average(r => r.Question1);
    }

    // Interactive Functions
    void SetFilter(string filter)
    {
        selectedFilter = filter;
        StateHasChanged();
    }

    void SetChartView(string view)
    {
        chartView = view;
        StateHasChanged();
    }

    void SetDetailView(string view)
    {
        detailView = view;
        StateHasChanged();
    }

    void SelectSector(string sector)
    {
        selectedSector = selectedSector == sector ? null : sector;
        StateHasChanged();
    }

    void SelectTableRow(string sector)
    {
        selectedTableRow = selectedTableRow == sector ? null : sector;
        StateHasChanged();
    }

    void ToggleSectorDetails(string sector)
    {
        if (expandedSectors.Contains(sector))
            expandedSectors.Remove(sector);
        else
            expandedSectors.Add(sector);
        StateHasChanged();
    }

    void ToggleSectorCard(string sector)
    {
        if (expandedSectorCards.Contains(sector))
            expandedSectorCards.Remove(sector);
        else
            expandedSectorCards.Add(sector);
        StateHasChanged();
    }

    // Hierarchical navigation methods
    void NavigateToCustomers(string sector)
    {
        // Check if user has access to this sector in detailed analysis
        if (userRole != "Admin")
        {
            var allowedSectors = GetRoleBasedSectors().Keys;
            if (!allowedSectors.Contains(sector))
            {
                // User doesn't have access to this sector in detailed analysis
                return; // Do nothing, don't navigate
            }
        }
        
        selectedSector = sector;
        currentNavigationLevel = "customers";
        selectedCustomer = null;
        selectedProject = null;
        StateHasChanged();
    }

    void NavigateToProjects(string customer)
    {
        selectedCustomer = customer;
        currentNavigationLevel = "projects";
        selectedProject = null;
        StateHasChanged();
    }

    void NavigateToAnalysis(string project)
    {
        selectedProject = project;
        currentNavigationLevel = "analysis";
        StateHasChanged();
    }

    void NavigateBack()
    {
        if (currentNavigationLevel == "analysis")
        {
            currentNavigationLevel = "projects";
            selectedProject = null;
        }
        else if (currentNavigationLevel == "projects")
        {
            currentNavigationLevel = "customers";
            selectedCustomer = null;
        }
        else if (currentNavigationLevel == "customers")
        {
            currentNavigationLevel = "sectors";
            selectedSector = null;
        }
        StateHasChanged();
    }

    void ToggleQuestion(int question)
    {
        selectedQuestion = selectedQuestion == question ? null : question;
        StateHasChanged();
    }

    void SelectQuestionPoint(int question)
    {
        selectedQuestion = selectedQuestion == question ? null : question;
        StateHasChanged();
    }

    void HandleLineChartClick()
    {
        // Handle line chart clicks if needed
    }

    void ScrollToSection(string sectionId)
    {
        // This would need JavaScript interop to work properly
        // For now, we'll just do a simple state change
        StateHasChanged();
    }

    void SortTable(string column)
    {
        if (sortColumn == column)
            sortAscending = !sortAscending;
        else
        {
            sortColumn = column;
            sortAscending = true;
        }
        StateHasChanged();
    }

    // Helper Functions
    Dictionary<string, int> GetFilteredSectors()
    {
        // Show all sectors in main overview (no role filtering)
        if (selectedFilter == "all")
            return sectorCounts;
        
        return sectorCounts.Where(kvp => kvp.Key == selectedFilter).ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
    }

    Dictionary<string, int> GetRoleBasedSectors()
    {
        // Admin can see all sectors
        if (userRole == "Admin")
            return sectorCounts;
        
        // Role-based filtering for other users
        if (userRole == "Health")
            return sectorCounts.Where(kvp => kvp.Key == "Health").ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
        else if (userRole == "Tech")
            return sectorCounts.Where(kvp => kvp.Key == "Tech").ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
        else if (userRole == "Energy")
            return sectorCounts.Where(kvp => kvp.Key == "Energy").ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
        
        // Default: return all (for edge cases)
        return sectorCounts;
    }

    int GetCompletedCountForSector(string sector)
    {
        return surveyResponses.Count(r => r.Sector == sector && r.DateCompleted.HasValue);
    }

    List<SurveyResponse> GetRoleBasedResponses()
    {
        // Admin can see all responses
        if (userRole == "Admin")
            return surveyResponses;
        
        // Filter responses by user's role
        if (userRole == "Health" || userRole == "Tech" || userRole == "Energy")
            return surveyResponses.Where(r => r.Sector == userRole).ToList();
        
        // Default: return all (for edge cases)
        return surveyResponses;
    }

    List<string> GetCustomersForSector(string sector)
    {
        return GetRoleBasedResponses()
            .Where(r => r.Sector == sector)
            .Select(r => r.CustomerName)
            .Distinct()
            .OrderBy(c => c)
            .ToList();
    }

    List<string> GetProjectsForCustomer(string sector, string customer)
    {
        return GetRoleBasedResponses()
            .Where(r => r.Sector == sector && r.CustomerName == customer)
            .Select(r => r.ProjectName)
            .Distinct()
            .OrderBy(p => p)
            .ToList();
    }

    List<SurveyResponse> GetProjectResponses(string sector, string customer, string project)
    {
        return GetRoleBasedResponses()
            .Where(r => r.Sector == sector && r.CustomerName == customer && r.ProjectName == project)
            .ToList();
    }

    int GetQuestionScore(SurveyResponse response, int questionNumber)
    {
        return questionNumber switch
        {
            1 => response.Question1,
            2 => response.Question2,
            3 => response.Question3,
            4 => response.Question4,
            5 => response.Question5,
            6 => response.Question6,
            7 => response.Question7,
            8 => response.Question8,
            9 => response.Question9,
            _ => 0
        };
    }

    IEnumerable<string> GetSortedSectors()
    {
        var sectors = sectorCounts.Keys.AsEnumerable();
        
        sectors = sortColumn switch
        {
            "sector" => sortAscending ? sectors.OrderBy(s => s) : sectors.OrderByDescending(s => s),
            "responses" => sortAscending ? sectors.OrderBy(s => sectorCounts[s]) : sectors.OrderByDescending(s => sectorCounts[s]),
            "satisfaction" => sortAscending ? sectors.OrderBy(s => GetSectorAverage(s, "satisfaction")) : sectors.OrderByDescending(s => GetSectorAverage(s, "satisfaction")),
            "professionalism" => sortAscending ? sectors.OrderBy(s => GetSectorAverage(s, "professionalism")) : sectors.OrderByDescending(s => GetSectorAverage(s, "professionalism")),
            "growth" => sortAscending ? sectors.OrderBy(s => GetSectorAverage(s, "growth")) : sectors.OrderByDescending(s => GetSectorAverage(s, "growth")),
            "value" => sortAscending ? sectors.OrderBy(s => GetSectorAverage(s, "value")) : sectors.OrderByDescending(s => GetSectorAverage(s, "value")),
            "likelihood" => sortAscending ? sectors.OrderBy(s => GetSectorAverage(s, "likelihood")) : sectors.OrderByDescending(s => GetSectorAverage(s, "likelihood")),
            _ => sectors
        };
        
        return sectors;
    }

    string GetSortIcon(string column)
    {
        if (sortColumn != column) return "‚ÜïÔ∏è";
        return sortAscending ? "‚¨ÜÔ∏è" : "‚¨áÔ∏è";
    }

    double GetSectorAverage(string sector, string type)
    {
        var sectorResponses = surveyResponses.Where(r => r.Sector == sector);
        if (!sectorResponses.Any()) return 0;
        
        return type switch
        {
            "satisfaction" => sectorResponses.Average(r => r.Question1),
            "professionalism" => sectorResponses.Average(r => r.Question2),
            "growth" => sectorResponses.Average(r => r.Question3),
            "value" => sectorResponses.Average(r => r.Question4),
            "likelihood" => sectorResponses.Average(r => r.Question9),
            _ => 0
        };
    }

    int GetBestQuestion(string sector)
    {
        var sectorResponses = surveyResponses.Where(r => r.Sector == sector).ToList();
        if (!sectorResponses.Any()) return 1;
        
        var averages = new Dictionary<int, double>();
        for (int q = 1; q <= 9; q++)
        {
            averages[q] = GetSectorQuestionAverage(sector, q);
        }
        
        return averages.OrderByDescending(kvp => kvp.Value).First().Key;
    }

    double GetBestQuestionScore(string sector)
    {
        return GetSectorQuestionAverage(sector, GetBestQuestion(sector));
    }

    int GetWorstQuestion(string sector)
    {
        var sectorResponses = surveyResponses.Where(r => r.Sector == sector).ToList();
        if (!sectorResponses.Any()) return 1;
        
        var averages = new Dictionary<int, double>();
        for (int q = 1; q <= 9; q++)
        {
            averages[q] = GetSectorQuestionAverage(sector, q);
        }
        
        return averages.OrderBy(kvp => kvp.Value).First().Key;
    }

    double GetWorstQuestionScore(string sector)
    {
        return GetSectorQuestionAverage(sector, GetWorstQuestion(sector));
    }

    string GetSectorShortName(string sector)
    {
        return sector switch
        {
            "Tech & Digitalization" => "Tech",
            "Health" => "Health",
            "Energy" => "Energy",
            _ => sector
        };
    }

    string GetSectorIcon(string sector)
    {
        return sector switch
        {
            "Health" => "üè•",
            "Tech & Digitalization" => "üíª",
            "Energy" => "‚ö°",
            _ => "üè¢"
        };
    }

    string GetSatisfactionEmoji(double satisfaction)
    {
        return satisfaction switch
        {
            >= 9 => "ü§©",
            >= 8 => "üòç",
            >= 7 => "üòä",
            >= 6 => "üôÇ",
            >= 5 => "üòê",
            >= 4 => "üòï",
            >= 3 => "üòû",
            _ => "üò¢"
        };
    }

    string GetQuestionText(int question)
    {
        return question switch
        {
            1 => "Overall Satisfaction",
            2 => "Professionalism",
            3 => "Growth Impact",
            4 => "Value for Money",
            5 => "Solution Fit",
            6 => "Communication",
            7 => "Timeliness",
            8 => "Advisor Expertise",
            9 => "Future Use Likelihood",
            _ => $"Question {question}"
        };
    }

    string GetQuestionCategory(double avg)
    {
        return avg switch
        {
            >= 8 => "Excellent",
            >= 6 => "Good",
            >= 4 => "Average",
            _ => "Needs Improvement"
        };
    }

    string GetSectorColor(string sector)
    {
        return sector switch
        {
            "Health" => "#ff6b6b",
            "Tech & Digitalization" => "#4ecdc4",
            "Energy" => "#45b7d1",
            _ => "#95a5a6"
        };
    }

    string GetSectorColorDark(string sector)
    {
        return sector switch
        {
            "Health" => "#e74c3c",
            "Tech & Digitalization" => "#16a085",
            "Energy" => "#2980b9",
            _ => "#7f8c8d"
        };
    }

    double GetQuestionAverage(int questionNumber)
    {
        if (!surveyResponses.Any()) return 0;
        
        return questionNumber switch
        {
            1 => surveyResponses.Average(r => r.Question1),
            2 => surveyResponses.Average(r => r.Question2),
            3 => surveyResponses.Average(r => r.Question3),
            4 => surveyResponses.Average(r => r.Question4),
            5 => surveyResponses.Average(r => r.Question5),
            6 => surveyResponses.Average(r => r.Question6),
            7 => surveyResponses.Average(r => r.Question7),
            8 => surveyResponses.Average(r => r.Question8),
            9 => surveyResponses.Average(r => r.Question9),
            _ => 0
        };
    }

    double GetSectorQuestionAverage(string sector, int questionNumber)
    {
        var sectorResponses = surveyResponses.Where(r => r.Sector == sector);
        if (!sectorResponses.Any()) return 0;
        
        return questionNumber switch
        {
            1 => sectorResponses.Average(r => r.Question1),
            2 => sectorResponses.Average(r => r.Question2),
            3 => sectorResponses.Average(r => r.Question3),
            4 => sectorResponses.Average(r => r.Question4),
            5 => sectorResponses.Average(r => r.Question5),
            6 => sectorResponses.Average(r => r.Question6),
            7 => sectorResponses.Average(r => r.Question7),
            8 => sectorResponses.Average(r => r.Question8),
            9 => sectorResponses.Average(r => r.Question9),
            _ => 0
        };
    }

    string GetLinePoints()
    {
        var points = new List<string>();
        for (int q = 1; q <= 9; q++)
        {
            var x = (q - 1) * 12.5;
            var y = 100 - (GetQuestionAverage(q) / 10 * 100);
            points.Add($"{x},{y}");
        }
        return string.Join(" ", points);
    }
}